/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/admin/category/route";
exports.ids = ["app/api/admin/category/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fcategory%2Froute&page=%2Fapi%2Fadmin%2Fcategory%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fcategory%2Froute.ts&appDir=D%3A%5CWebstep2%5Cshipowl-merge%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CWebstep2%5Cshipowl-merge&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fcategory%2Froute&page=%2Fapi%2Fadmin%2Fcategory%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fcategory%2Froute.ts&appDir=D%3A%5CWebstep2%5Cshipowl-merge%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CWebstep2%5Cshipowl-merge&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_Webstep2_shipowl_merge_src_app_api_admin_category_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/admin/category/route.ts */ \"(rsc)/./src/app/api/admin/category/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/admin/category/route\",\n        pathname: \"/api/admin/category\",\n        filename: \"route\",\n        bundlePath: \"app/api/admin/category/route\"\n    },\n    resolvedPagePath: \"D:\\\\Webstep2\\\\shipowl-merge\\\\src\\\\app\\\\api\\\\admin\\\\category\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_Webstep2_shipowl_merge_src_app_api_admin_category_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZhZG1pbiUyRmNhdGVnb3J5JTJGcm91dGUmcGFnZT0lMkZhcGklMkZhZG1pbiUyRmNhdGVnb3J5JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYWRtaW4lMkZjYXRlZ29yeSUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDV2Vic3RlcDIlNUNzaGlwb3dsLW1lcmdlJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1EJTNBJTVDV2Vic3RlcDIlNUNzaGlwb3dsLW1lcmdlJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNxQjtBQUNsRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRDpcXFxcV2Vic3RlcDJcXFxcc2hpcG93bC1tZXJnZVxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxhZG1pblxcXFxjYXRlZ29yeVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYWRtaW4vY2F0ZWdvcnkvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hZG1pbi9jYXRlZ29yeVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvYWRtaW4vY2F0ZWdvcnkvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJEOlxcXFxXZWJzdGVwMlxcXFxzaGlwb3dsLW1lcmdlXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGFkbWluXFxcXGNhdGVnb3J5XFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fcategory%2Froute&page=%2Fapi%2Fadmin%2Fcategory%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fcategory%2Froute.ts&appDir=D%3A%5CWebstep2%5Cshipowl-merge%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CWebstep2%5Cshipowl-merge&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./prisma/prisma/generated/client/index.js":
/*!*************************************************!*\
  !*** ./prisma/prisma/generated/client/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/* !!! This is code generated by Prisma. Do not edit directly. !!!\r\n/* eslint-disable */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst { PrismaClientKnownRequestError, PrismaClientUnknownRequestError, PrismaClientRustPanicError, PrismaClientInitializationError, PrismaClientValidationError, getPrismaClient, sqltag, empty, join, raw, skip, Decimal, Debug, objectEnumValues, makeStrictEnum, Extensions, warnOnce, defineDmmfProperty, Public, getRuntime, createParam } = __webpack_require__(/*! ./runtime/library.js */ \"(rsc)/./prisma/prisma/generated/client/runtime/library.js\");\nconst Prisma = {};\nexports.Prisma = Prisma;\nexports.$Enums = {};\n/**\r\n * Prisma Client JS version: 6.10.1\r\n * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c\r\n */ Prisma.prismaVersion = {\n    client: \"6.10.1\",\n    engine: \"9b628578b3b7cae625e8c927178f15a170e74a9c\"\n};\nPrisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;\nPrisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;\nPrisma.PrismaClientRustPanicError = PrismaClientRustPanicError;\nPrisma.PrismaClientInitializationError = PrismaClientInitializationError;\nPrisma.PrismaClientValidationError = PrismaClientValidationError;\nPrisma.Decimal = Decimal;\n/**\r\n * Re-export of sql-template-tag\r\n */ Prisma.sql = sqltag;\nPrisma.empty = empty;\nPrisma.join = join;\nPrisma.raw = raw;\nPrisma.validator = Public.validator;\n/**\r\n* Extensions\r\n*/ Prisma.getExtensionContext = Extensions.getExtensionContext;\nPrisma.defineExtension = Extensions.defineExtension;\n/**\r\n * Shorthand utilities for JSON filtering\r\n */ Prisma.DbNull = objectEnumValues.instances.DbNull;\nPrisma.JsonNull = objectEnumValues.instances.JsonNull;\nPrisma.AnyNull = objectEnumValues.instances.AnyNull;\nPrisma.NullTypes = {\n    DbNull: objectEnumValues.classes.DbNull,\n    JsonNull: objectEnumValues.classes.JsonNull,\n    AnyNull: objectEnumValues.classes.AnyNull\n};\nconst path = __webpack_require__(/*! path */ \"path\");\n/**\r\n * Enums\r\n */ exports.Prisma.TransactionIsolationLevel = makeStrictEnum({\n    ReadUncommitted: 'ReadUncommitted',\n    ReadCommitted: 'ReadCommitted',\n    RepeatableRead: 'RepeatableRead',\n    Serializable: 'Serializable'\n});\nexports.Prisma.AppConfigScalarFieldEnum = {\n    id: 'id',\n    shippingCost: 'shippingCost',\n    status: 'status'\n};\nexports.Prisma.EmailConfigScalarFieldEnum = {\n    id: 'id',\n    panel: 'panel',\n    module: 'module',\n    subject: 'subject',\n    action: 'action',\n    html_template: 'html_template',\n    smtp_host: 'smtp_host',\n    smtp_secure: 'smtp_secure',\n    smtp_port: 'smtp_port',\n    smtp_username: 'smtp_username',\n    smtp_password: 'smtp_password',\n    from_email: 'from_email',\n    from_name: 'from_name',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole'\n};\nexports.Prisma.AdminScalarFieldEnum = {\n    id: 'id',\n    profilePicture: 'profilePicture',\n    name: 'name',\n    uniqeId: 'uniqeId',\n    username: 'username',\n    website: 'website',\n    email: 'email',\n    isEmailVerified: 'isEmailVerified',\n    emailVerifiedAt: 'emailVerifiedAt',\n    referralCode: 'referralCode',\n    password: 'password',\n    role: 'role',\n    type: 'type',\n    isVerified: 'isVerified',\n    verifiedAt: 'verifiedAt',\n    status: 'status',\n    dateOfBirth: 'dateOfBirth',\n    phoneNumber: 'phoneNumber',\n    currentAddress: 'currentAddress',\n    permanentAddress: 'permanentAddress',\n    permanentPostalCode: 'permanentPostalCode',\n    permanentCityId: 'permanentCityId',\n    permanentStateId: 'permanentStateId',\n    permanentCountryId: 'permanentCountryId',\n    pr_token: 'pr_token',\n    pr_expires_at: 'pr_expires_at',\n    pr_last_reset: 'pr_last_reset',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.ShopifyStoreScalarFieldEnum = {\n    id: 'id',\n    adminId: 'adminId',\n    name: 'name',\n    logo: 'logo',\n    shop: 'shop',\n    accessToken: 'accessToken',\n    email: 'email',\n    shopName: 'shopName',\n    planName: 'planName',\n    country: 'country',\n    shopOwner: 'shopOwner',\n    domain: 'domain',\n    myshopifyDomain: 'myshopifyDomain',\n    province: 'province',\n    city: 'city',\n    phone: 'phone',\n    currency: 'currency',\n    moneyFormat: 'moneyFormat',\n    timezone: 'timezone',\n    createdAtShop: 'createdAtShop',\n    userId: 'userId',\n    verificationStatus: 'verificationStatus',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.CompanyDetailScalarFieldEnum = {\n    id: 'id',\n    adminId: 'adminId',\n    companyName: 'companyName',\n    brandName: 'brandName',\n    brandShortName: 'brandShortName',\n    billingAddress: 'billingAddress',\n    billingPincode: 'billingPincode',\n    billingCountryId: 'billingCountryId',\n    billingStateId: 'billingStateId',\n    billingCityId: 'billingCityId',\n    businessType: 'businessType',\n    clientEntryType: 'clientEntryType',\n    gstNumber: 'gstNumber',\n    companyPanNumber: 'companyPanNumber',\n    companyPanCardName: 'companyPanCardName',\n    companyPanCardImage: 'companyPanCardImage',\n    aadharNumber: 'aadharNumber',\n    gstDocument: 'gstDocument',\n    panCardHolderName: 'panCardHolderName',\n    aadharCardHolderName: 'aadharCardHolderName',\n    panCardImage: 'panCardImage',\n    aadharCardImage: 'aadharCardImage',\n    additionalDocumentUpload: 'additionalDocumentUpload',\n    documentId: 'documentId',\n    documentName: 'documentName',\n    documentImage: 'documentImage',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.BankAccountScalarFieldEnum = {\n    id: 'id',\n    adminId: 'adminId',\n    accountHolderName: 'accountHolderName',\n    accountNumber: 'accountNumber',\n    bankName: 'bankName',\n    bankBranch: 'bankBranch',\n    accountType: 'accountType',\n    ifscCode: 'ifscCode',\n    cancelledChequeImage: 'cancelledChequeImage',\n    paymentMethod: 'paymentMethod',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.BankAccountChangeRequestScalarFieldEnum = {\n    id: 'id',\n    adminId: 'adminId',\n    bankAccountId: 'bankAccountId',\n    accountHolderName: 'accountHolderName',\n    accountNumber: 'accountNumber',\n    bankName: 'bankName',\n    bankBranch: 'bankBranch',\n    accountType: 'accountType',\n    ifscCode: 'ifscCode',\n    cancelledChequeImage: 'cancelledChequeImage',\n    paymentMethod: 'paymentMethod',\n    status: 'status',\n    remarks: 'remarks',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.AdminStaffScalarFieldEnum = {\n    id: 'id',\n    admin_id: 'admin_id',\n    profilePicture: 'profilePicture',\n    name: 'name',\n    email: 'email',\n    phoneNumber: 'phoneNumber',\n    currentAddress: 'currentAddress',\n    permanentAddress: 'permanentAddress',\n    permanentPostalCode: 'permanentPostalCode',\n    permanentCityId: 'permanentCityId',\n    permanentStateId: 'permanentStateId',\n    permanentCountryId: 'permanentCountryId',\n    password: 'password',\n    role: 'role',\n    status: 'status',\n    pr_token: 'pr_token',\n    pr_expires_at: 'pr_expires_at',\n    pr_last_reset: 'pr_last_reset',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.AdminStaffPermissionScalarFieldEnum = {\n    id: 'id',\n    panel: 'panel',\n    module: 'module',\n    action: 'action',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.AdminStaffHasPermissionScalarFieldEnum = {\n    id: 'id',\n    adminStaffId: 'adminStaffId',\n    adminStaffPermissionId: 'adminStaffPermissionId',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.GlobalPermissionScalarFieldEnum = {\n    id: 'id',\n    panel: 'panel',\n    module: 'module',\n    action: 'action',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.LoginLogScalarFieldEnum = {\n    id: 'id',\n    adminId: 'adminId',\n    adminRole: 'adminRole',\n    action: 'action',\n    response: 'response',\n    ipv4: 'ipv4',\n    ipv6: 'ipv6',\n    internetServiceProvider: 'internetServiceProvider',\n    clientInformation: 'clientInformation',\n    userAgent: 'userAgent',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.ActivityLogScalarFieldEnum = {\n    id: 'id',\n    adminId: 'adminId',\n    adminRole: 'adminRole',\n    module: 'module',\n    action: 'action',\n    endpoint: 'endpoint',\n    method: 'method',\n    payload: 'payload',\n    response: 'response',\n    result: 'result',\n    data: 'data',\n    ipv4: 'ipv4',\n    ipv6: 'ipv6',\n    internetServiceProvider: 'internetServiceProvider',\n    clientInformation: 'clientInformation',\n    userAgent: 'userAgent',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.CountryScalarFieldEnum = {\n    id: 'id',\n    name: 'name',\n    iso3: 'iso3',\n    iso2: 'iso2',\n    phonecode: 'phonecode',\n    currency: 'currency',\n    currencyName: 'currencyName',\n    currencySymbol: 'currencySymbol',\n    nationality: 'nationality',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.StateScalarFieldEnum = {\n    id: 'id',\n    name: 'name',\n    countryId: 'countryId',\n    iso2: 'iso2',\n    type: 'type',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.CityScalarFieldEnum = {\n    id: 'id',\n    name: 'name',\n    stateId: 'stateId',\n    countryId: 'countryId',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.WarehouseScalarFieldEnum = {\n    id: 'id',\n    name: 'name',\n    slug: 'slug',\n    gst_number: 'gst_number',\n    contact_name: 'contact_name',\n    contact_number: 'contact_number',\n    address_line_1: 'address_line_1',\n    address_line_2: 'address_line_2',\n    postal_code: 'postal_code',\n    countryId: 'countryId',\n    stateId: 'stateId',\n    cityId: 'cityId',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.CategoryScalarFieldEnum = {\n    id: 'id',\n    name: 'name',\n    slug: 'slug',\n    description: 'description',\n    image: 'image',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.BrandScalarFieldEnum = {\n    id: 'id',\n    name: 'name',\n    slug: 'slug',\n    description: 'description',\n    image: 'image',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.ProductRequestScalarFieldEnum = {\n    id: 'id',\n    name: 'name',\n    categoryId: 'categoryId',\n    expectedPrice: 'expectedPrice',\n    expectedDailyOrders: 'expectedDailyOrders',\n    url: 'url',\n    image: 'image',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.ProductScalarFieldEnum = {\n    id: 'id',\n    shippingOwlProductId: 'shippingOwlProductId',\n    categoryId: 'categoryId',\n    name: 'name',\n    slug: 'slug',\n    main_sku: 'main_sku',\n    description: 'description',\n    tags: 'tags',\n    brandId: 'brandId',\n    originCountryId: 'originCountryId',\n    hsnCode: 'hsnCode',\n    taxRate: 'taxRate',\n    rtoAddress: 'rtoAddress',\n    pickupAddress: 'pickupAddress',\n    shippingCountryId: 'shippingCountryId',\n    video_url: 'video_url',\n    list_as: 'list_as',\n    shipping_time: 'shipping_time',\n    weight: 'weight',\n    package_length: 'package_length',\n    package_width: 'package_width',\n    package_height: 'package_height',\n    chargeable_weight: 'chargeable_weight',\n    package_weight_image: 'package_weight_image',\n    package_length_image: 'package_length_image',\n    package_width_image: 'package_width_image',\n    package_height_image: 'package_height_image',\n    product_detail_video: 'product_detail_video',\n    training_guidance_video: 'training_guidance_video',\n    isVisibleToAll: 'isVisibleToAll',\n    status: 'status',\n    isVarientExists: 'isVarientExists',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.ProductVariantScalarFieldEnum = {\n    id: 'id',\n    name: 'name',\n    productId: 'productId',\n    image: 'image',\n    color: 'color',\n    model: 'model',\n    sku: 'sku',\n    product_link: 'product_link',\n    suggested_price: 'suggested_price',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.ProductSupplierVisibilityScalarFieldEnum = {\n    id: 'id',\n    productId: 'productId',\n    supplierId: 'supplierId',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.CourierCompanyScalarFieldEnum = {\n    id: 'id',\n    name: 'name',\n    slug: 'slug',\n    code: 'code',\n    website: 'website',\n    email: 'email',\n    phoneNumber: 'phoneNumber',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.HighRtoScalarFieldEnum = {\n    id: 'id',\n    pincode: 'pincode',\n    countryId: 'countryId',\n    stateId: 'stateId',\n    cityId: 'cityId',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.BadPincodeScalarFieldEnum = {\n    id: 'id',\n    pincode: 'pincode',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.GoodPincodeScalarFieldEnum = {\n    id: 'id',\n    pincode: 'pincode',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.SupplierProductScalarFieldEnum = {\n    id: 'id',\n    supplierId: 'supplierId',\n    productId: 'productId',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.SupplierProductVariantScalarFieldEnum = {\n    id: 'id',\n    supplierId: 'supplierId',\n    productId: 'productId',\n    productVariantId: 'productVariantId',\n    supplierProductId: 'supplierProductId',\n    price: 'price',\n    stock: 'stock',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.DropshipperProductScalarFieldEnum = {\n    id: 'id',\n    shopifyProductId: 'shopifyProductId',\n    dropshipperId: 'dropshipperId',\n    supplierId: 'supplierId',\n    supplierProductId: 'supplierProductId',\n    productId: 'productId',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.DropshipperProductVariantScalarFieldEnum = {\n    id: 'id',\n    dropshipperId: 'dropshipperId',\n    productId: 'productId',\n    supplierProductId: 'supplierProductId',\n    dropshipperProductId: 'dropshipperProductId',\n    supplierProductVariantId: 'supplierProductVariantId',\n    price: 'price',\n    status: 'status',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.PaymentScalarFieldEnum = {\n    id: 'id',\n    transactionId: 'transactionId',\n    cycle: 'cycle',\n    amount: 'amount',\n    status: 'status',\n    date: 'date',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.OrderScalarFieldEnum = {\n    id: 'id',\n    orderNumber: 'orderNumber',\n    awbNumber: 'awbNumber',\n    status: 'status',\n    orderNote: 'orderNote',\n    subtotal: 'subtotal',\n    tax: 'tax',\n    discount: 'discount',\n    totalAmount: 'totalAmount',\n    currency: 'currency',\n    shippingName: 'shippingName',\n    shippingPhone: 'shippingPhone',\n    shippingEmail: 'shippingEmail',\n    shippingAddress: 'shippingAddress',\n    shippingZip: 'shippingZip',\n    shippingCountryId: 'shippingCountryId',\n    shippingStateId: 'shippingStateId',\n    shippingCityId: 'shippingCityId',\n    billingName: 'billingName',\n    billingPhone: 'billingPhone',\n    billingEmail: 'billingEmail',\n    billingAddress: 'billingAddress',\n    billingZip: 'billingZip',\n    billingCountryId: 'billingCountryId',\n    billingStateId: 'billingStateId',\n    billingCityId: 'billingCityId',\n    isPostpaid: 'isPostpaid',\n    paymentId: 'paymentId',\n    shippingApiResult: 'shippingApiResult',\n    barcodeImage: 'barcodeImage',\n    delivered: 'delivered',\n    deliveredDate: 'deliveredDate',\n    rtoDelivered: 'rtoDelivered',\n    rtoDeliveredDate: 'rtoDeliveredDate',\n    lastRefreshAt: 'lastRefreshAt',\n    disputeCase: 'disputeCase',\n    supplierRTOResponse: 'supplierRTOResponse',\n    packingGallery: 'packingGallery',\n    unboxingGallery: 'unboxingGallery',\n    collectedAtWarehouse: 'collectedAtWarehouse',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.OrderItemScalarFieldEnum = {\n    id: 'id',\n    orderId: 'orderId',\n    dropshipperProductId: 'dropshipperProductId',\n    dropshipperProductVariantId: 'dropshipperProductVariantId',\n    dropshipperId: 'dropshipperId',\n    supplierProductId: 'supplierProductId',\n    supplierProductVariantId: 'supplierProductVariantId',\n    supplierId: 'supplierId',\n    quantity: 'quantity',\n    price: 'price',\n    total: 'total'\n};\nexports.Prisma.RtoInventoryScalarFieldEnum = {\n    id: 'id',\n    orderId: 'orderId',\n    orderItemId: 'orderItemId',\n    dropshipperId: 'dropshipperId',\n    dropshipperProductId: 'dropshipperProductId',\n    dropshipperProductVariantId: 'dropshipperProductVariantId',\n    quantity: 'quantity',\n    price: 'price',\n    createdAt: 'createdAt',\n    createdBy: 'createdBy',\n    createdByRole: 'createdByRole',\n    updatedAt: 'updatedAt',\n    updatedBy: 'updatedBy',\n    updatedByRole: 'updatedByRole',\n    deletedAt: 'deletedAt',\n    deletedBy: 'deletedBy',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.SupplierOrderPermissionScalarFieldEnum = {\n    id: 'id',\n    orderNumber: 'orderNumber',\n    awbNumber: 'awbNumber',\n    status: 'status',\n    orderNote: 'orderNote',\n    subtotal: 'subtotal',\n    tax: 'tax',\n    discount: 'discount',\n    totalAmount: 'totalAmount',\n    currency: 'currency',\n    shippingName: 'shippingName',\n    shippingPhone: 'shippingPhone',\n    shippingEmail: 'shippingEmail',\n    shippingAddress: 'shippingAddress',\n    shippingZip: 'shippingZip',\n    shippingCountry: 'shippingCountry',\n    shippingState: 'shippingState',\n    shippingCity: 'shippingCity',\n    billingName: 'billingName',\n    billingPhone: 'billingPhone',\n    billingEmail: 'billingEmail',\n    billingAddress: 'billingAddress',\n    billingZip: 'billingZip',\n    billingCountry: 'billingCountry',\n    billingState: 'billingState',\n    billingCity: 'billingCity'\n};\nexports.Prisma.SortOrder = {\n    asc: 'asc',\n    desc: 'desc'\n};\nexports.Prisma.NullableJsonNullValueInput = {\n    DbNull: Prisma.DbNull,\n    JsonNull: Prisma.JsonNull\n};\nexports.Prisma.NullsOrder = {\n    first: 'first',\n    last: 'last'\n};\nexports.Prisma.emailConfigOrderByRelevanceFieldEnum = {\n    panel: 'panel',\n    module: 'module',\n    subject: 'subject',\n    action: 'action',\n    html_template: 'html_template',\n    smtp_host: 'smtp_host',\n    smtp_username: 'smtp_username',\n    smtp_password: 'smtp_password',\n    from_email: 'from_email',\n    from_name: 'from_name',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole'\n};\nexports.Prisma.adminOrderByRelevanceFieldEnum = {\n    profilePicture: 'profilePicture',\n    name: 'name',\n    uniqeId: 'uniqeId',\n    username: 'username',\n    website: 'website',\n    email: 'email',\n    referralCode: 'referralCode',\n    password: 'password',\n    role: 'role',\n    type: 'type',\n    status: 'status',\n    phoneNumber: 'phoneNumber',\n    currentAddress: 'currentAddress',\n    permanentAddress: 'permanentAddress',\n    permanentPostalCode: 'permanentPostalCode',\n    pr_token: 'pr_token',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.shopifyStoreOrderByRelevanceFieldEnum = {\n    name: 'name',\n    logo: 'logo',\n    shop: 'shop',\n    accessToken: 'accessToken',\n    email: 'email',\n    shopName: 'shopName',\n    planName: 'planName',\n    country: 'country',\n    shopOwner: 'shopOwner',\n    domain: 'domain',\n    myshopifyDomain: 'myshopifyDomain',\n    province: 'province',\n    city: 'city',\n    phone: 'phone',\n    currency: 'currency',\n    moneyFormat: 'moneyFormat',\n    timezone: 'timezone',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.companyDetailOrderByRelevanceFieldEnum = {\n    companyName: 'companyName',\n    brandName: 'brandName',\n    brandShortName: 'brandShortName',\n    billingAddress: 'billingAddress',\n    billingPincode: 'billingPincode',\n    businessType: 'businessType',\n    clientEntryType: 'clientEntryType',\n    gstNumber: 'gstNumber',\n    companyPanNumber: 'companyPanNumber',\n    companyPanCardName: 'companyPanCardName',\n    companyPanCardImage: 'companyPanCardImage',\n    aadharNumber: 'aadharNumber',\n    gstDocument: 'gstDocument',\n    panCardHolderName: 'panCardHolderName',\n    aadharCardHolderName: 'aadharCardHolderName',\n    panCardImage: 'panCardImage',\n    aadharCardImage: 'aadharCardImage',\n    additionalDocumentUpload: 'additionalDocumentUpload',\n    documentId: 'documentId',\n    documentName: 'documentName',\n    documentImage: 'documentImage',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.bankAccountOrderByRelevanceFieldEnum = {\n    accountHolderName: 'accountHolderName',\n    accountNumber: 'accountNumber',\n    bankName: 'bankName',\n    bankBranch: 'bankBranch',\n    accountType: 'accountType',\n    ifscCode: 'ifscCode',\n    cancelledChequeImage: 'cancelledChequeImage',\n    paymentMethod: 'paymentMethod',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.bankAccountChangeRequestOrderByRelevanceFieldEnum = {\n    accountHolderName: 'accountHolderName',\n    accountNumber: 'accountNumber',\n    bankName: 'bankName',\n    bankBranch: 'bankBranch',\n    accountType: 'accountType',\n    ifscCode: 'ifscCode',\n    cancelledChequeImage: 'cancelledChequeImage',\n    paymentMethod: 'paymentMethod',\n    status: 'status',\n    remarks: 'remarks',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.adminStaffOrderByRelevanceFieldEnum = {\n    profilePicture: 'profilePicture',\n    name: 'name',\n    email: 'email',\n    phoneNumber: 'phoneNumber',\n    currentAddress: 'currentAddress',\n    permanentAddress: 'permanentAddress',\n    permanentPostalCode: 'permanentPostalCode',\n    password: 'password',\n    role: 'role',\n    status: 'status',\n    pr_token: 'pr_token',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.adminStaffPermissionOrderByRelevanceFieldEnum = {\n    panel: 'panel',\n    module: 'module',\n    action: 'action',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.adminStaffHasPermissionOrderByRelevanceFieldEnum = {\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.globalPermissionOrderByRelevanceFieldEnum = {\n    panel: 'panel',\n    module: 'module',\n    action: 'action',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.loginLogOrderByRelevanceFieldEnum = {\n    adminRole: 'adminRole',\n    action: 'action',\n    response: 'response',\n    ipv4: 'ipv4',\n    ipv6: 'ipv6',\n    internetServiceProvider: 'internetServiceProvider',\n    clientInformation: 'clientInformation',\n    userAgent: 'userAgent',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.activityLogOrderByRelevanceFieldEnum = {\n    adminRole: 'adminRole',\n    module: 'module',\n    action: 'action',\n    endpoint: 'endpoint',\n    method: 'method',\n    payload: 'payload',\n    response: 'response',\n    data: 'data',\n    ipv4: 'ipv4',\n    ipv6: 'ipv6',\n    internetServiceProvider: 'internetServiceProvider',\n    clientInformation: 'clientInformation',\n    userAgent: 'userAgent',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.countryOrderByRelevanceFieldEnum = {\n    name: 'name',\n    iso3: 'iso3',\n    iso2: 'iso2',\n    phonecode: 'phonecode',\n    currency: 'currency',\n    currencyName: 'currencyName',\n    currencySymbol: 'currencySymbol',\n    nationality: 'nationality',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.stateOrderByRelevanceFieldEnum = {\n    name: 'name',\n    iso2: 'iso2',\n    type: 'type',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.cityOrderByRelevanceFieldEnum = {\n    name: 'name',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.warehouseOrderByRelevanceFieldEnum = {\n    name: 'name',\n    slug: 'slug',\n    gst_number: 'gst_number',\n    contact_name: 'contact_name',\n    contact_number: 'contact_number',\n    address_line_1: 'address_line_1',\n    address_line_2: 'address_line_2',\n    postal_code: 'postal_code',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.categoryOrderByRelevanceFieldEnum = {\n    name: 'name',\n    slug: 'slug',\n    description: 'description',\n    image: 'image',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.brandOrderByRelevanceFieldEnum = {\n    name: 'name',\n    slug: 'slug',\n    description: 'description',\n    image: 'image',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.productRequestOrderByRelevanceFieldEnum = {\n    name: 'name',\n    expectedDailyOrders: 'expectedDailyOrders',\n    url: 'url',\n    image: 'image',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.JsonNullValueFilter = {\n    DbNull: Prisma.DbNull,\n    JsonNull: Prisma.JsonNull,\n    AnyNull: Prisma.AnyNull\n};\nexports.Prisma.QueryMode = {\n    default: 'default',\n    insensitive: 'insensitive'\n};\nexports.Prisma.productOrderByRelevanceFieldEnum = {\n    shippingOwlProductId: 'shippingOwlProductId',\n    name: 'name',\n    slug: 'slug',\n    main_sku: 'main_sku',\n    description: 'description',\n    hsnCode: 'hsnCode',\n    rtoAddress: 'rtoAddress',\n    pickupAddress: 'pickupAddress',\n    video_url: 'video_url',\n    list_as: 'list_as',\n    shipping_time: 'shipping_time',\n    package_weight_image: 'package_weight_image',\n    package_length_image: 'package_length_image',\n    package_width_image: 'package_width_image',\n    package_height_image: 'package_height_image',\n    product_detail_video: 'product_detail_video',\n    training_guidance_video: 'training_guidance_video',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.productVariantOrderByRelevanceFieldEnum = {\n    name: 'name',\n    image: 'image',\n    color: 'color',\n    model: 'model',\n    sku: 'sku',\n    product_link: 'product_link',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.productSupplierVisibilityOrderByRelevanceFieldEnum = {\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.courierCompanyOrderByRelevanceFieldEnum = {\n    name: 'name',\n    slug: 'slug',\n    code: 'code',\n    website: 'website',\n    email: 'email',\n    phoneNumber: 'phoneNumber',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.highRtoOrderByRelevanceFieldEnum = {\n    pincode: 'pincode',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.badPincodeOrderByRelevanceFieldEnum = {\n    pincode: 'pincode',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.goodPincodeOrderByRelevanceFieldEnum = {\n    pincode: 'pincode',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.supplierProductOrderByRelevanceFieldEnum = {\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.supplierProductVariantOrderByRelevanceFieldEnum = {\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.dropshipperProductOrderByRelevanceFieldEnum = {\n    shopifyProductId: 'shopifyProductId',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.dropshipperProductVariantOrderByRelevanceFieldEnum = {\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.paymentOrderByRelevanceFieldEnum = {\n    transactionId: 'transactionId',\n    cycle: 'cycle',\n    status: 'status',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.orderOrderByRelevanceFieldEnum = {\n    orderNumber: 'orderNumber',\n    awbNumber: 'awbNumber',\n    status: 'status',\n    orderNote: 'orderNote',\n    currency: 'currency',\n    shippingName: 'shippingName',\n    shippingPhone: 'shippingPhone',\n    shippingEmail: 'shippingEmail',\n    shippingAddress: 'shippingAddress',\n    shippingZip: 'shippingZip',\n    billingName: 'billingName',\n    billingPhone: 'billingPhone',\n    billingEmail: 'billingEmail',\n    billingAddress: 'billingAddress',\n    billingZip: 'billingZip',\n    barcodeImage: 'barcodeImage',\n    supplierRTOResponse: 'supplierRTOResponse',\n    packingGallery: 'packingGallery',\n    unboxingGallery: 'unboxingGallery',\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.rtoInventoryOrderByRelevanceFieldEnum = {\n    createdByRole: 'createdByRole',\n    updatedByRole: 'updatedByRole',\n    deletedByRole: 'deletedByRole'\n};\nexports.Prisma.ModelName = {\n    appConfig: 'appConfig',\n    emailConfig: 'emailConfig',\n    admin: 'admin',\n    shopifyStore: 'shopifyStore',\n    companyDetail: 'companyDetail',\n    bankAccount: 'bankAccount',\n    bankAccountChangeRequest: 'bankAccountChangeRequest',\n    adminStaff: 'adminStaff',\n    adminStaffPermission: 'adminStaffPermission',\n    adminStaffHasPermission: 'adminStaffHasPermission',\n    globalPermission: 'globalPermission',\n    loginLog: 'loginLog',\n    activityLog: 'activityLog',\n    country: 'country',\n    state: 'state',\n    city: 'city',\n    warehouse: 'warehouse',\n    category: 'category',\n    brand: 'brand',\n    productRequest: 'productRequest',\n    product: 'product',\n    productVariant: 'productVariant',\n    productSupplierVisibility: 'productSupplierVisibility',\n    courierCompany: 'courierCompany',\n    highRto: 'highRto',\n    badPincode: 'badPincode',\n    goodPincode: 'goodPincode',\n    supplierProduct: 'supplierProduct',\n    supplierProductVariant: 'supplierProductVariant',\n    dropshipperProduct: 'dropshipperProduct',\n    dropshipperProductVariant: 'dropshipperProductVariant',\n    payment: 'payment',\n    order: 'order',\n    orderItem: 'orderItem',\n    rtoInventory: 'rtoInventory',\n    supplierOrderPermission: 'supplierOrderPermission'\n};\n/**\r\n * Create the Client\r\n */ const config = {\n    \"generator\": {\n        \"name\": \"client\",\n        \"provider\": {\n            \"fromEnvVar\": null,\n            \"value\": \"prisma-client-js\"\n        },\n        \"output\": {\n            \"value\": \"D:\\\\Webstep2\\\\shipowl\\\\prisma\\\\prisma\\\\generated\\\\client\",\n            \"fromEnvVar\": null\n        },\n        \"config\": {\n            \"engineType\": \"library\"\n        },\n        \"binaryTargets\": [\n            {\n                \"fromEnvVar\": null,\n                \"value\": \"windows\",\n                \"native\": true\n            }\n        ],\n        \"previewFeatures\": [],\n        \"sourceFilePath\": \"D:\\\\Webstep2\\\\shipowl\\\\prisma\\\\schema.prisma\",\n        \"isCustomOutput\": true\n    },\n    \"relativeEnvPaths\": {\n        \"rootEnvPath\": null,\n        \"schemaEnvPath\": \"../../../../.env\"\n    },\n    \"relativePath\": \"../../..\",\n    \"clientVersion\": \"6.10.1\",\n    \"engineVersion\": \"9b628578b3b7cae625e8c927178f15a170e74a9c\",\n    \"datasourceNames\": [\n        \"db\"\n    ],\n    \"activeProvider\": \"mysql\",\n    \"inlineDatasources\": {\n        \"db\": {\n            \"url\": {\n                \"fromEnvVar\": \"DATABASE_URL\",\n                \"value\": null\n            }\n        }\n    },\n    \"inlineSchema\": \"// This is your Prisma schema file,\\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\\n\\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\\n\\ngenerator client {\\n  provider = \\\"prisma-client-js\\\"\\n  output   = \\\"./prisma/generated/client\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"mysql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel appConfig {\\n  id           BigInt  @id @default(autoincrement())\\n  shippingCost BigInt\\n  status       Boolean\\n}\\n\\nmodel emailConfig {\\n  id            BigInt   @id @default(autoincrement())\\n  panel         String\\n  module        String\\n  subject       String\\n  action        String\\n  html_template String?  @db.LongText\\n  smtp_host     String\\n  smtp_secure   Boolean\\n  smtp_port     Int\\n  smtp_username String\\n  smtp_password String\\n  from_email    String\\n  from_name     String\\n  status        Boolean\\n  createdAt     DateTime @default(now())\\n  createdBy     Int?\\n  createdByRole String?\\n  updatedAt     DateTime @updatedAt\\n  updatedBy     Int?\\n  updatedByRole String?\\n\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n}\\n\\nmodel admin {\\n  id                  Int       @id @default(autoincrement())\\n  profilePicture      String?   @db.LongText\\n  name                String\\n  uniqeId             String    @unique\\n  username            String?   @unique\\n  website             String?\\n  email               String\\n  isEmailVerified     Boolean?\\n  emailVerifiedAt     DateTime?\\n  referralCode        String?\\n  password            String\\n  role                String    @default(\\\"admin\\\")\\n  type                String    @default(\\\"main\\\")\\n  isVerified          Boolean?\\n  verifiedAt          DateTime?\\n  status              String    @default(\\\"active\\\")\\n  dateOfBirth         DateTime?\\n  phoneNumber         String?\\n  currentAddress      String?\\n  permanentAddress    String?\\n  permanentPostalCode String?\\n  permanentCityId     BigInt?\\n  permanentStateId    BigInt?\\n  permanentCountryId  BigInt?\\n  pr_token            String?\\n  pr_expires_at       DateTime?\\n  pr_last_reset       DateTime?\\n  createdAt           DateTime  @default(now())\\n  createdBy           Int?\\n  createdByRole       String?\\n  updatedAt           DateTime  @updatedAt\\n  updatedBy           Int?\\n  updatedByRole       String?\\n  deletedAt           DateTime?\\n  deletedBy           Int?\\n  deletedByRole       String?\\n\\n  permanentCity    city?    @relation(fields: [permanentCityId], references: [id], onDelete: SetNull)\\n  permanentState   state?   @relation(fields: [permanentStateId], references: [id], onDelete: SetNull)\\n  permanentCountry country? @relation(fields: [permanentCountryId], references: [id], onDelete: SetNull)\\n\\n  orderItemsDropshipper      orderItem[]                 @relation(\\\"OrderItemToDropshipper\\\")\\n  orderItemsSupplier         orderItem[]                 @relation(\\\"OrderItemToSupplier\\\")\\n  shopifyStores              shopifyStore[]              @relation\\n  staff                      adminStaff[]                @relation(\\\"AdminToStaff\\\")\\n  companyDetail              companyDetail?              @relation(\\\"AdminToCompanyDetail\\\", map: \\\"admin_company_detail_fkey\\\")\\n  bankAccount                bankAccount?                @relation(\\\"AdminToBankAccount\\\", map: \\\"admin_bank_account_fkey\\\")\\n  supplierProducts           supplierProduct[]           @relation(\\\"SupplierProducts\\\")\\n  dropshipperProducts        dropshipperProduct[]        @relation(\\\"DropshipperProducts\\\")\\n  suppliedProducts           dropshipperProduct[]        @relation(\\\"SuppliedProducts\\\")\\n  bankAccountChangeRequest   bankAccountChangeRequest?   @relation(\\\"AdminToBankAccountChangeRequest\\\", map: \\\"admin_bank_account_change_request_fkey\\\")\\n  productVisibility          productSupplierVisibility[] @relation\\n  supplierProductVariants    supplierProductVariant[]    @relation(\\\"AdminToSupplierProductVariant\\\", map: \\\"admin_supplier_product_variant_fkey\\\")\\n  dropshipperProductVariants dropshipperProductVariant[] @relation(\\\"AdminToDropshipperProductVariant\\\", map: \\\"admin_dropshipper_product_variant_fkey\\\")\\n  rtoInventories             rtoInventory[]              @relation(\\\"AdminToRtoInventory\\\")\\n}\\n\\nmodel shopifyStore {\\n  id                 Int       @id @default(autoincrement())\\n  adminId            Int\\n  name               String?\\n  logo               String?   @db.LongText\\n  shop               String    @unique\\n  accessToken        String?\\n  email              String?\\n  shopName           String?\\n  planName           String?\\n  country            String?\\n  shopOwner          String?\\n  domain             String?\\n  myshopifyDomain    String?\\n  province           String?\\n  city               String?\\n  phone              String?\\n  currency           String?\\n  moneyFormat        String?\\n  timezone           String?\\n  createdAtShop      DateTime?\\n  userId             Int?\\n  verificationStatus Boolean   @default(true)\\n  status             Boolean   @default(true)\\n  createdAt          DateTime  @default(now())\\n  createdBy          Int?\\n  createdByRole      String?\\n  updatedAt          DateTime  @updatedAt\\n  updatedBy          Int?\\n  updatedByRole      String?\\n  deletedAt          DateTime?\\n  deletedBy          Int?\\n  deletedByRole      String?\\n  admin              admin     @relation(fields: [adminId], references: [id], onDelete: Cascade)\\n}\\n\\nmodel companyDetail {\\n  id                       Int       @id @default(autoincrement())\\n  adminId                  Int       @unique\\n  companyName              String?\\n  brandName                String?\\n  brandShortName           String?\\n  billingAddress           String?\\n  billingPincode           String?\\n  billingCountryId         BigInt?\\n  billingCountry           country?  @relation(\\\"CompanyCountryRelation\\\", fields: [billingCountryId], references: [id], onDelete: SetNull)\\n  billingStateId           BigInt?\\n  billingState             state?    @relation(\\\"CompanyStateRelation\\\", fields: [billingStateId], references: [id], onDelete: SetNull)\\n  billingCityId            BigInt?\\n  billingCity              city?     @relation(\\\"CompanyCityRelation\\\", fields: [billingCityId], references: [id], onDelete: SetNull)\\n  businessType             String?\\n  clientEntryType          String?\\n  gstNumber                String?\\n  companyPanNumber         String?\\n  companyPanCardName       String?   @db.LongText\\n  companyPanCardImage      String?   @db.LongText\\n  aadharNumber             String?\\n  gstDocument              String?\\n  panCardHolderName        String?\\n  aadharCardHolderName     String?\\n  panCardImage             String?   @db.LongText\\n  aadharCardImage          String?   @db.LongText\\n  additionalDocumentUpload String?\\n  documentId               String?\\n  documentName             String?\\n  documentImage            String?   @db.LongText\\n  createdAt                DateTime  @default(now())\\n  createdBy                Int?\\n  createdByRole            String?\\n  updatedAt                DateTime  @updatedAt\\n  updatedBy                Int?\\n  updatedByRole            String?\\n  deletedAt                DateTime?\\n  deletedBy                Int?\\n  deletedByRole            String?\\n  admin                    admin     @relation(fields: [adminId], references: [id], onDelete: Cascade, name: \\\"AdminToCompanyDetail\\\", map: \\\"admin_company_detail_fkey\\\")\\n}\\n\\nmodel bankAccount {\\n  id                       Int                       @id @default(autoincrement())\\n  adminId                  Int                       @unique\\n  accountHolderName        String\\n  accountNumber            String\\n  bankName                 String\\n  bankBranch               String\\n  accountType              String\\n  ifscCode                 String\\n  cancelledChequeImage     String?                   @db.LongText\\n  paymentMethod            String?\\n  createdAt                DateTime                  @default(now())\\n  createdBy                Int?\\n  createdByRole            String?\\n  updatedAt                DateTime                  @updatedAt\\n  updatedBy                Int?\\n  updatedByRole            String?\\n  deletedAt                DateTime?\\n  deletedBy                Int?\\n  deletedByRole            String?\\n  admin                    admin                     @relation(fields: [adminId], references: [id], onDelete: Cascade, name: \\\"AdminToBankAccount\\\", map: \\\"admin_bank_account_fkey\\\")\\n  bankAccountChangeRequest bankAccountChangeRequest? @relation\\n}\\n\\nmodel bankAccountChangeRequest {\\n  id                   Int          @id @default(autoincrement())\\n  adminId              Int          @unique\\n  bankAccountId        Int?         @unique\\n  accountHolderName    String\\n  accountNumber        String\\n  bankName             String\\n  bankBranch           String\\n  accountType          String\\n  ifscCode             String\\n  cancelledChequeImage String?      @db.LongText\\n  paymentMethod        String?\\n  status               String       @default(\\\"pending\\\")\\n  remarks              String?      @db.LongText\\n  createdAt            DateTime     @default(now())\\n  createdBy            Int?\\n  createdByRole        String?\\n  updatedAt            DateTime     @updatedAt\\n  updatedBy            Int?\\n  updatedByRole        String?\\n  deletedAt            DateTime?\\n  deletedBy            Int?\\n  deletedByRole        String?\\n  admin                admin        @relation(fields: [adminId], references: [id], onDelete: Cascade, name: \\\"AdminToBankAccountChangeRequest\\\", map: \\\"admin_bank_account_change_request_fkey\\\")\\n  bankAccount          bankAccount? @relation(fields: [bankAccountId], references: [id], onDelete: SetNull)\\n\\n  @@index([adminId])\\n  @@index([bankAccountId])\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel adminStaff {\\n  id                    Int                       @id @default(autoincrement())\\n  admin_id              Int\\n  profilePicture        String?                   @db.LongText\\n  name                  String\\n  email                 String                    @unique\\n  phoneNumber           String?\\n  currentAddress        String?\\n  permanentAddress      String?\\n  permanentPostalCode   String?\\n  permanentCityId       BigInt?\\n  permanentStateId      BigInt?\\n  permanentCountryId    BigInt?\\n  password              String\\n  role                  String                    @default(\\\"admin\\\")\\n  status                String                    @default(\\\"active\\\")\\n  pr_token              String?\\n  pr_expires_at         DateTime?\\n  pr_last_reset         DateTime?\\n  createdAt             DateTime                  @default(now())\\n  createdBy             Int?\\n  createdByRole         String?\\n  updatedAt             DateTime                  @updatedAt\\n  updatedBy             Int?\\n  updatedByRole         String?\\n  deletedAt             DateTime?\\n  deletedBy             Int?\\n  deletedByRole         String?\\n  permanentCity         city?                     @relation(fields: [permanentCityId], references: [id], onDelete: SetNull)\\n  permanentState        state?                    @relation(fields: [permanentStateId], references: [id], onDelete: SetNull)\\n  permanentCountry      country?                  @relation(fields: [permanentCountryId], references: [id], onDelete: SetNull)\\n  admin                 admin                     @relation(fields: [admin_id], references: [id], onDelete: Cascade, name: \\\"AdminToStaff\\\")\\n  adminStaffPermissions adminStaffHasPermission[] @relation(\\\"AdminStaffToHasPermission\\\")\\n}\\n\\nmodel adminStaffPermission {\\n  id                       Int                       @id @default(autoincrement())\\n  panel                    String\\n  module                   String\\n  action                   String\\n  status                   Boolean                   @default(true)\\n  createdAt                DateTime                  @default(now())\\n  createdBy                Int?\\n  createdByRole            String?\\n  updatedAt                DateTime                  @updatedAt\\n  updatedBy                Int?\\n  updatedByRole            String?\\n  deletedAt                DateTime?\\n  deletedBy                Int?\\n  deletedByRole            String?\\n  adminStaffHasPermissions adminStaffHasPermission[] @relation(\\\"PermissionToHasPermission\\\")\\n\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel adminStaffHasPermission {\\n  id                     Int                  @id @default(autoincrement())\\n  adminStaffId           Int\\n  adminStaffPermissionId Int\\n  createdAt              DateTime             @default(now())\\n  createdBy              Int?\\n  createdByRole          String?\\n  updatedAt              DateTime             @updatedAt\\n  updatedBy              Int?\\n  updatedByRole          String?\\n  deletedAt              DateTime?\\n  deletedBy              Int?\\n  deletedByRole          String?\\n  adminStaff             adminStaff           @relation(fields: [adminStaffId], references: [id], onDelete: Cascade, name: \\\"AdminStaffToHasPermission\\\")\\n  permission             adminStaffPermission @relation(fields: [adminStaffPermissionId], references: [id], onDelete: Cascade, name: \\\"PermissionToHasPermission\\\")\\n\\n  @@index([adminStaffId])\\n  @@index([adminStaffPermissionId])\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel globalPermission {\\n  id            Int       @id @default(autoincrement())\\n  panel         String\\n  module        String\\n  action        String\\n  status        Boolean   @default(true)\\n  createdAt     DateTime  @default(now())\\n  createdBy     Int?\\n  createdByRole String?\\n  updatedAt     DateTime  @updatedAt\\n  updatedBy     Int?\\n  updatedByRole String?\\n  deletedAt     DateTime?\\n  deletedBy     Int?\\n  deletedByRole String?\\n}\\n\\nmodel loginLog {\\n  id                      Int       @id @default(autoincrement())\\n  adminId                 Int\\n  adminRole               String\\n  action                  String\\n  response                String?\\n  ipv4                    String?\\n  ipv6                    String?\\n  internetServiceProvider String?\\n  clientInformation       String?\\n  userAgent               String?\\n  createdAt               DateTime  @default(now())\\n  createdBy               Int?\\n  createdByRole           String?\\n  updatedAt               DateTime  @updatedAt\\n  updatedBy               Int?\\n  updatedByRole           String?\\n  deletedAt               DateTime?\\n  deletedBy               Int?\\n  deletedByRole           String?\\n\\n  @@index([adminId])\\n  @@index([adminRole])\\n  @@index([action])\\n  @@index([createdAt])\\n  @@index([deletedAt])\\n}\\n\\nmodel activityLog {\\n  id                      Int       @id @default(autoincrement())\\n  adminId                 Int\\n  adminRole               String\\n  module                  String\\n  action                  String\\n  endpoint                String\\n  method                  String\\n  payload                 String?   @db.LongText\\n  response                String?   @db.LongText\\n  result                  Boolean\\n  data                    String?   @db.LongText\\n  ipv4                    String?\\n  ipv6                    String?\\n  internetServiceProvider String?\\n  clientInformation       String?\\n  userAgent               String?\\n  createdAt               DateTime  @default(now())\\n  createdBy               Int?\\n  createdByRole           String?\\n  updatedAt               DateTime  @updatedAt\\n  updatedBy               Int?\\n  updatedByRole           String?\\n  deletedAt               DateTime?\\n  deletedBy               Int?\\n  deletedByRole           String?\\n\\n  @@index([adminId])\\n  @@index([adminRole])\\n  @@index([module])\\n  @@index([action])\\n  @@index([createdAt])\\n  @@index([deletedAt])\\n}\\n\\nmodel country {\\n  id                    BigInt          @id @default(autoincrement())\\n  name                  String\\n  iso3                  String?\\n  iso2                  String?\\n  phonecode             String?\\n  currency              String?\\n  currencyName          String?\\n  currencySymbol        String?\\n  nationality           String?\\n  createdAt             DateTime        @default(now())\\n  createdBy             Int?\\n  createdByRole         String?\\n  updatedAt             DateTime        @updatedAt\\n  updatedBy             Int?\\n  updatedByRole         String?\\n  deletedAt             DateTime?\\n  deletedBy             Int?\\n  deletedByRole         String?\\n  states                state[]\\n  cities                city[]\\n  warehouses            warehouse[]\\n  highRtos              highRto[]\\n  admins                admin[]\\n  adminStaffs           adminStaff[]\\n  originProducts        product[]       @relation(\\\"OriginCountryRelation\\\")\\n  shippingProducts      product[]       @relation(\\\"ShippingCountryRelation\\\")\\n  shippingOrders        order[]         @relation(\\\"CountryShippingRelation\\\")\\n  billingOrders         order[]         @relation(\\\"CountryBillingRelation\\\")\\n  billingCompanyDetails companyDetail[] @relation(\\\"CompanyCountryRelation\\\")\\n\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel state {\\n  id                    BigInt          @id @default(autoincrement())\\n  name                  String\\n  countryId             BigInt\\n  iso2                  String?\\n  type                  String?\\n  createdAt             DateTime        @default(now())\\n  createdBy             Int?\\n  createdByRole         String?\\n  updatedAt             DateTime        @updatedAt\\n  updatedBy             Int?\\n  updatedByRole         String?\\n  deletedAt             DateTime?\\n  deletedBy             Int?\\n  deletedByRole         String?\\n  country               country         @relation(fields: [countryId], references: [id], onDelete: Cascade)\\n  cities                city[]\\n  warehouses            warehouse[]\\n  highRtos              highRto[]\\n  admins                admin[]\\n  adminStaffs           adminStaff[]\\n  shippingOrders        order[]         @relation(\\\"StateShippingRelation\\\")\\n  billingOrders         order[]         @relation(\\\"StateBillingRelation\\\")\\n  billingCompanyDetails companyDetail[] @relation(\\\"CompanyStateRelation\\\")\\n\\n  @@index([countryId])\\n}\\n\\nmodel city {\\n  id                    BigInt          @id @default(autoincrement())\\n  name                  String\\n  stateId               BigInt\\n  countryId             BigInt\\n  createdAt             DateTime        @default(now())\\n  createdBy             Int?\\n  createdByRole         String?\\n  updatedAt             DateTime        @updatedAt\\n  updatedBy             Int?\\n  updatedByRole         String?\\n  deletedAt             DateTime?\\n  deletedBy             Int?\\n  deletedByRole         String?\\n  state                 state           @relation(fields: [stateId], references: [id], onDelete: Cascade)\\n  country               country         @relation(fields: [countryId], references: [id], onDelete: Cascade)\\n  warehouses            warehouse[]\\n  highRtos              highRto[]\\n  admins                admin[]\\n  adminStaffs           adminStaff[]\\n  shippingOrders        order[]         @relation(\\\"CityShippingRelation\\\")\\n  billingOrders         order[]         @relation(\\\"CityBillingRelation\\\")\\n  billingCompanyDetails companyDetail[] @relation(\\\"CompanyCityRelation\\\")\\n\\n  @@index([stateId])\\n  @@index([countryId])\\n}\\n\\nmodel warehouse {\\n  id             Int       @id @default(autoincrement())\\n  name           String\\n  slug           String    @unique\\n  gst_number     String\\n  contact_name   String\\n  contact_number String\\n  address_line_1 String\\n  address_line_2 String?\\n  postal_code    String\\n  countryId      BigInt?\\n  stateId        BigInt?\\n  cityId         BigInt?\\n  country        country?  @relation(fields: [countryId], references: [id], onDelete: SetNull)\\n  state          state?    @relation(fields: [stateId], references: [id], onDelete: SetNull)\\n  city           city?     @relation(fields: [cityId], references: [id], onDelete: SetNull)\\n  status         Boolean   @default(false)\\n  createdAt      DateTime  @default(now())\\n  createdBy      Int?\\n  createdByRole  String?\\n  updatedAt      DateTime  @updatedAt\\n  updatedBy      Int?\\n  updatedByRole  String?\\n  deletedAt      DateTime?\\n  deletedBy      Int?\\n  deletedByRole  String?\\n\\n  @@index([countryId])\\n  @@index([stateId])\\n  @@index([cityId])\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel category {\\n  id              Int              @id @default(autoincrement())\\n  name            String\\n  slug            String           @unique\\n  description     String?          @db.LongText\\n  image           String?          @db.LongText\\n  status          Boolean          @default(false)\\n  createdAt       DateTime         @default(now())\\n  createdBy       Int?\\n  createdByRole   String?\\n  updatedAt       DateTime         @updatedAt\\n  updatedBy       Int?\\n  updatedByRole   String?\\n  deletedAt       DateTime?\\n  deletedBy       Int?\\n  deletedByRole   String?\\n  products        product[]\\n  productRequests productRequest[]\\n\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel brand {\\n  id            Int       @id @default(autoincrement())\\n  name          String\\n  slug          String    @unique\\n  description   String?   @db.LongText\\n  image         String?   @db.LongText\\n  status        Boolean   @default(false)\\n  createdAt     DateTime  @default(now())\\n  createdBy     Int?\\n  createdByRole String?\\n  updatedAt     DateTime  @updatedAt\\n  updatedBy     Int?\\n  updatedByRole String?\\n  deletedAt     DateTime?\\n  deletedBy     Int?\\n  deletedByRole String?\\n  products      product[]\\n\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel productRequest {\\n  id                  Int       @id @default(autoincrement())\\n  name                String\\n  categoryId          Int\\n  expectedPrice       Int?\\n  expectedDailyOrders String?\\n  url                 String?   @db.LongText\\n  image               String?   @db.LongText\\n  status              Boolean   @default(true)\\n  createdAt           DateTime  @default(now())\\n  createdBy           Int?\\n  createdByRole       String?\\n  updatedAt           DateTime  @updatedAt\\n  updatedBy           Int?\\n  updatedByRole       String?\\n  deletedAt           DateTime?\\n  deletedBy           Int?\\n  deletedByRole       String?\\n  category            category  @relation(fields: [categoryId], references: [id])\\n}\\n\\nmodel product {\\n  id                         Int                         @id @default(autoincrement())\\n  shippingOwlProductId       String                      @unique\\n  categoryId                 Int\\n  name                       String\\n  slug                       String                      @unique\\n  main_sku                   String                      @unique\\n  description                String?                     @db.LongText\\n  tags                       Json?\\n  brandId                    Int\\n  originCountryId            BigInt\\n  hsnCode                    String?\\n  taxRate                    Float?\\n  rtoAddress                 String?\\n  pickupAddress              String?\\n  shippingCountryId          BigInt\\n  video_url                  String?                     @db.LongText\\n  list_as                    String?\\n  shipping_time              String?\\n  weight                     Float?\\n  package_length             Float?\\n  package_width              Float?\\n  package_height             Float?\\n  chargeable_weight          Float?\\n  package_weight_image       String?                     @db.LongText\\n  package_length_image       String?                     @db.LongText\\n  package_width_image        String?                     @db.LongText\\n  package_height_image       String?                     @db.LongText\\n  product_detail_video       String?                     @db.LongText\\n  training_guidance_video    String?                     @db.LongText\\n  isVisibleToAll             Boolean                     @default(true)\\n  status                     Boolean                     @default(true)\\n  isVarientExists            Boolean                     @default(true)\\n  createdAt                  DateTime                    @default(now())\\n  createdBy                  Int?\\n  createdByRole              String?\\n  updatedAt                  DateTime                    @updatedAt\\n  updatedBy                  Int?\\n  updatedByRole              String?\\n  deletedAt                  DateTime?\\n  deletedBy                  Int?\\n  deletedByRole              String?\\n  category                   category                    @relation(fields: [categoryId], references: [id])\\n  brand                      brand                       @relation(fields: [brandId], references: [id])\\n  originCountry              country                     @relation(\\\"OriginCountryRelation\\\", fields: [originCountryId], references: [id])\\n  shippingCountry            country                     @relation(\\\"ShippingCountryRelation\\\", fields: [shippingCountryId], references: [id])\\n  variants                   productVariant[]\\n  supplierProducts           supplierProduct[]\\n  dropshipperProducts        dropshipperProduct[]\\n  supplierVisibility         productSupplierVisibility[]\\n  supplierProductVariants    supplierProductVariant[]    @relation\\n  dropshipperProductVariants dropshipperProductVariant[] @relation\\n\\n  @@index([categoryId])\\n  @@index([brandId])\\n  @@index([originCountryId])\\n  @@index([shippingCountryId])\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel productVariant {\\n  id                      Int                      @id @default(autoincrement())\\n  name                    String\\n  productId               Int\\n  image                   String                   @db.LongText\\n  color                   String\\n  model                   String\\n  sku                     String                   @unique\\n  product_link            String?\\n  suggested_price         Float?\\n  createdAt               DateTime                 @default(now())\\n  createdBy               Int?\\n  createdByRole           String?\\n  updatedAt               DateTime                 @updatedAt\\n  updatedBy               Int?\\n  updatedByRole           String?\\n  deletedAt               DateTime?\\n  deletedBy               Int?\\n  deletedByRole           String?\\n  product                 product                  @relation(fields: [productId], references: [id], onDelete: Cascade)\\n  supplierProductVariants supplierProductVariant[] @relation\\n\\n  @@index([productId])\\n}\\n\\nmodel productSupplierVisibility {\\n  id            Int       @id @default(autoincrement())\\n  productId     Int\\n  supplierId    Int\\n  createdAt     DateTime  @default(now())\\n  createdBy     Int?\\n  createdByRole String?\\n  updatedAt     DateTime  @updatedAt\\n  updatedBy     Int?\\n  updatedByRole String?\\n  deletedAt     DateTime?\\n  deletedBy     Int?\\n  deletedByRole String?\\n  product       product   @relation(fields: [productId], references: [id], onDelete: Cascade)\\n  supplier      admin     @relation(fields: [supplierId], references: [id], onDelete: Cascade)\\n\\n  @@index([productId])\\n  @@index([supplierId])\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel courierCompany {\\n  id            Int       @id @default(autoincrement())\\n  name          String\\n  slug          String    @unique\\n  code          String?   @unique\\n  website       String?   @db.LongText\\n  email         String\\n  phoneNumber   String?\\n  status        Boolean   @default(true)\\n  createdAt     DateTime  @default(now())\\n  createdBy     Int?\\n  createdByRole String?\\n  updatedAt     DateTime  @updatedAt\\n  updatedBy     Int?\\n  updatedByRole String?\\n  deletedAt     DateTime?\\n  deletedBy     Int?\\n  deletedByRole String?\\n}\\n\\nmodel highRto {\\n  id            Int       @id @default(autoincrement())\\n  pincode       String\\n  countryId     BigInt?\\n  stateId       BigInt?\\n  cityId        BigInt?\\n  country       country?  @relation(fields: [countryId], references: [id], onDelete: SetNull)\\n  state         state?    @relation(fields: [stateId], references: [id], onDelete: SetNull)\\n  city          city?     @relation(fields: [cityId], references: [id], onDelete: SetNull)\\n  status        Boolean   @default(false)\\n  createdAt     DateTime  @default(now())\\n  createdBy     Int?\\n  createdByRole String?\\n  updatedAt     DateTime  @updatedAt\\n  updatedBy     Int?\\n  updatedByRole String?\\n  deletedAt     DateTime?\\n  deletedBy     Int?\\n  deletedByRole String?\\n\\n  @@index([countryId])\\n  @@index([stateId])\\n  @@index([cityId])\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel badPincode {\\n  id            Int       @id @default(autoincrement())\\n  pincode       String\\n  status        Boolean   @default(false)\\n  createdAt     DateTime  @default(now())\\n  createdBy     Int?\\n  createdByRole String?\\n  updatedAt     DateTime  @updatedAt\\n  updatedBy     Int?\\n  updatedByRole String?\\n  deletedAt     DateTime?\\n  deletedBy     Int?\\n  deletedByRole String?\\n\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel goodPincode {\\n  id            Int       @id @default(autoincrement())\\n  pincode       String\\n  status        Boolean   @default(false)\\n  createdAt     DateTime  @default(now())\\n  createdBy     Int?\\n  createdByRole String?\\n  updatedAt     DateTime  @updatedAt\\n  updatedBy     Int?\\n  updatedByRole String?\\n  deletedAt     DateTime?\\n  deletedBy     Int?\\n  deletedByRole String?\\n\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel supplierProduct {\\n  id                         Int                         @id @default(autoincrement())\\n  supplierId                 Int\\n  productId                  Int\\n  status                     Boolean                     @default(true)\\n  createdAt                  DateTime                    @default(now())\\n  createdBy                  Int?\\n  createdByRole              String?\\n  updatedAt                  DateTime                    @updatedAt\\n  updatedBy                  Int?\\n  updatedByRole              String?\\n  deletedAt                  DateTime?\\n  deletedBy                  Int?\\n  deletedByRole              String?\\n  orderItems                 orderItem[]\\n  supplier                   admin                       @relation(\\\"SupplierProducts\\\", fields: [supplierId], references: [id], onDelete: Cascade)\\n  product                    product                     @relation(fields: [productId], references: [id], onDelete: Cascade)\\n  variants                   supplierProductVariant[]\\n  dropshipperProducts        dropshipperProduct[]        @relation(\\\"SupplierProductRelation\\\")\\n  dropshipperProductVariants dropshipperProductVariant[] @relation\\n\\n  @@index([supplierId])\\n  @@index([productId])\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel supplierProductVariant {\\n  id                  Int                         @id @default(autoincrement())\\n  supplierId          Int\\n  productId           Int\\n  productVariantId    Int\\n  supplierProductId   Int\\n  price               Float\\n  stock               Int\\n  status              Boolean                     @default(true)\\n  createdAt           DateTime                    @default(now())\\n  createdBy           Int?\\n  createdByRole       String?\\n  updatedAt           DateTime                    @updatedAt\\n  updatedBy           Int?\\n  updatedByRole       String?\\n  deletedAt           DateTime?\\n  deletedBy           Int?\\n  deletedByRole       String?\\n  orderItems          orderItem[]\\n  supplier            admin                       @relation(fields: [supplierId], references: [id], onDelete: Cascade, name: \\\"AdminToSupplierProductVariant\\\", map: \\\"admin_supplier_product_variant_fkey\\\")\\n  product             product                     @relation(fields: [productId], references: [id], onDelete: Cascade)\\n  variant             productVariant?             @relation(fields: [productVariantId], references: [id], onDelete: Cascade)\\n  supplierProduct     supplierProduct             @relation(fields: [supplierProductId], references: [id], onDelete: Cascade)\\n  dropshipperVariants dropshipperProductVariant[] @relation(\\\"SupplierToDropshipperVariant\\\")\\n\\n  @@index([supplierId])\\n  @@index([productId])\\n  @@index([supplierProductId])\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel dropshipperProduct {\\n  id                Int                         @id @default(autoincrement())\\n  shopifyProductId  String?\\n  dropshipperId     Int\\n  supplierId        Int\\n  supplierProductId Int\\n  productId         Int\\n  status            Boolean                     @default(true)\\n  createdAt         DateTime                    @default(now())\\n  createdBy         Int?\\n  createdByRole     String?\\n  updatedAt         DateTime                    @updatedAt\\n  updatedBy         Int?\\n  updatedByRole     String?\\n  deletedAt         DateTime?\\n  deletedBy         Int?\\n  deletedByRole     String?\\n  dropshipper       admin                       @relation(\\\"DropshipperProducts\\\", fields: [dropshipperId], references: [id], onDelete: Cascade)\\n  supplier          admin                       @relation(\\\"SuppliedProducts\\\", fields: [supplierId], references: [id], onDelete: Cascade)\\n  product           product                     @relation(fields: [productId], references: [id], onDelete: Cascade)\\n  supplierProduct   supplierProduct             @relation(\\\"SupplierProductRelation\\\", fields: [supplierProductId], references: [id], onDelete: Cascade)\\n  variants          dropshipperProductVariant[]\\n  orderItems        orderItem[]\\n  rtoInventories    rtoInventory[]              @relation(\\\"ProductToRtoInventory\\\")\\n\\n  @@index([dropshipperId])\\n  @@index([supplierId])\\n  @@index([productId])\\n  @@index([supplierProductId])\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel dropshipperProductVariant {\\n  id                       Int                    @id @default(autoincrement())\\n  dropshipperId            Int\\n  productId                Int\\n  supplierProductId        Int\\n  dropshipperProductId     Int\\n  supplierProductVariantId Int\\n  price                    Float\\n  status                   Boolean                @default(true)\\n  createdAt                DateTime               @default(now())\\n  createdBy                Int?\\n  createdByRole            String?\\n  updatedAt                DateTime               @updatedAt\\n  updatedBy                Int?\\n  updatedByRole            String?\\n  deletedAt                DateTime?\\n  deletedBy                Int?\\n  deletedByRole            String?\\n  dropshipper              admin                  @relation(fields: [dropshipperId], references: [id], onDelete: Cascade, name: \\\"AdminToDropshipperProductVariant\\\", map: \\\"admin_dropshipper_product_variant_fkey\\\")\\n  product                  product                @relation(fields: [productId], references: [id], onDelete: Cascade)\\n  supplierProduct          supplierProduct        @relation(fields: [supplierProductId], references: [id], onDelete: Cascade)\\n  dropshipperProduct       dropshipperProduct     @relation(fields: [dropshipperProductId], references: [id], onDelete: Cascade)\\n  supplierProductVariant   supplierProductVariant @relation(\\\"SupplierToDropshipperVariant\\\", fields: [supplierProductVariantId], references: [id], onDelete: Cascade)\\n  orderItems               orderItem[]\\n  rtoInventories           rtoInventory[]         @relation(\\\"VariantToRtoInventory\\\")\\n\\n  @@index([dropshipperId])\\n  @@index([productId])\\n  @@index([supplierProductId])\\n  @@index([dropshipperProductId])\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel payment {\\n  id            Int       @id @default(autoincrement())\\n  transactionId String    @unique\\n  cycle         String?\\n  amount        Float?\\n  status        String?\\n  date          DateTime?\\n  createdAt     DateTime  @default(now())\\n  createdBy     Int?\\n  createdByRole String?\\n  updatedAt     DateTime  @updatedAt\\n  updatedBy     Int?\\n  updatedByRole String?\\n  deletedAt     DateTime?\\n  deletedBy     Int?\\n  deletedByRole String?\\n  orders        order[]   @relation(\\\"OrderPayment\\\")\\n\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel order {\\n  id                Int       @id @default(autoincrement())\\n  orderNumber       String    @unique\\n  awbNumber         String?   @unique\\n  status            String    @default(\\\"pending\\\")\\n  orderNote         String?\\n  subtotal          Float     @default(0.0)\\n  tax               Float     @default(0.0)\\n  discount          Float     @default(0.0)\\n  totalAmount       Float     @default(0.0)\\n  currency          String    @default(\\\"USD\\\")\\n  shippingName      String\\n  shippingPhone     String\\n  shippingEmail     String\\n  shippingAddress   String\\n  shippingZip       String\\n  shippingCountryId BigInt?\\n  shippingStateId   BigInt?\\n  shippingCityId    BigInt?\\n  shippingCountry   country?  @relation(\\\"CountryShippingRelation\\\", fields: [shippingCountryId], references: [id], onDelete: SetNull)\\n  shippingState     state?    @relation(\\\"StateShippingRelation\\\", fields: [shippingStateId], references: [id], onDelete: SetNull)\\n  shippingCity      city?     @relation(\\\"CityShippingRelation\\\", fields: [shippingCityId], references: [id], onDelete: SetNull)\\n  billingName       String\\n  billingPhone      String\\n  billingEmail      String\\n  billingAddress    String\\n  billingZip        String\\n  billingCountryId  BigInt?\\n  billingStateId    BigInt?\\n  billingCityId     BigInt?\\n  billingCountry    country?  @relation(\\\"CountryBillingRelation\\\", fields: [billingCountryId], references: [id], onDelete: SetNull)\\n  billingState      state?    @relation(\\\"StateBillingRelation\\\", fields: [billingStateId], references: [id], onDelete: SetNull)\\n  billingCity       city?     @relation(\\\"CityBillingRelation\\\", fields: [billingCityId], references: [id], onDelete: SetNull)\\n  isPostpaid        Boolean   @default(false)\\n  paymentId         Int?\\n  payment           payment?  @relation(\\\"OrderPayment\\\", fields: [paymentId], references: [id], onDelete: SetNull)\\n  shippingApiResult Json?\\n  barcodeImage      String?   @db.LongText\\n  delivered         Boolean   @default(false)\\n  deliveredDate     DateTime?\\n  rtoDelivered      Boolean   @default(false)\\n  rtoDeliveredDate  DateTime?\\n  lastRefreshAt     DateTime?\\n\\n  disputeCase         Int?\\n  supplierRTOResponse String?\\n  packingGallery      String? @db.LongText\\n  unboxingGallery     String? @db.LongText\\n\\n  collectedAtWarehouse DateTime?\\n  createdAt            DateTime       @default(now())\\n  createdBy            Int?\\n  createdByRole        String?\\n  updatedAt            DateTime       @updatedAt\\n  updatedBy            Int?\\n  updatedByRole        String?\\n  deletedAt            DateTime?\\n  deletedBy            Int?\\n  deletedByRole        String?\\n  items                orderItem[]\\n  rtoInventories       rtoInventory[] @relation(\\\"OrderToRtoInventory\\\")\\n\\n  @@index([createdBy])\\n  @@index([updatedBy])\\n  @@index([deletedAt])\\n}\\n\\nmodel orderItem {\\n  id                          Int   @id @default(autoincrement())\\n  orderId                     Int\\n  dropshipperProductId        Int?\\n  dropshipperProductVariantId Int?\\n  dropshipperId               Int?\\n  supplierProductId           Int?\\n  supplierProductVariantId    Int?\\n  supplierId                  Int?\\n  quantity                    Int\\n  price                       Float\\n  total                       Float\\n\\n  order              order                      @relation(fields: [orderId], references: [id])\\n  dropshipperProduct dropshipperProduct?        @relation(fields: [dropshipperProductId], references: [id], onDelete: SetNull)\\n  dropshipperVariant dropshipperProductVariant? @relation(fields: [dropshipperProductVariantId], references: [id], onDelete: SetNull)\\n  dropshipper        admin?                     @relation(\\\"OrderItemToDropshipper\\\", fields: [dropshipperId], references: [id], onDelete: SetNull)\\n  supplierProduct    supplierProduct?           @relation(fields: [supplierProductId], references: [id], onDelete: SetNull)\\n  supplierVariant    supplierProductVariant?    @relation(fields: [supplierProductVariantId], references: [id], onDelete: SetNull)\\n  supplier           admin?                     @relation(\\\"OrderItemToSupplier\\\", fields: [supplierId], references: [id], onDelete: SetNull)\\n  rtoInventories     rtoInventory?              @relation(\\\"OrderItemToRtoInventory\\\")\\n\\n  @@index([orderId])\\n  @@index([dropshipperProductId])\\n  @@index([dropshipperProductVariantId])\\n}\\n\\nmodel rtoInventory {\\n  id                          Int                       @id @default(autoincrement())\\n  orderId                     Int\\n  orderItemId                 Int                       @unique\\n  dropshipperId               Int\\n  dropshipperProductId        Int\\n  dropshipperProductVariantId Int\\n  quantity                    Int                       @default(1)\\n  price                       Float                     @default(0.0)\\n  createdAt                   DateTime                  @default(now())\\n  createdBy                   Int?\\n  createdByRole               String?\\n  updatedAt                   DateTime                  @updatedAt\\n  updatedBy                   Int?\\n  updatedByRole               String?\\n  deletedAt                   DateTime?\\n  deletedBy                   Int?\\n  deletedByRole               String?\\n  dropshipper                 admin                     @relation(\\\"AdminToRtoInventory\\\", fields: [dropshipperId], references: [id], onDelete: Cascade)\\n  order                       order                     @relation(\\\"OrderToRtoInventory\\\", fields: [orderId], references: [id])\\n  orderItem                   orderItem                 @relation(\\\"OrderItemToRtoInventory\\\", fields: [orderItemId], references: [id])\\n  dropshipperProduct          dropshipperProduct        @relation(\\\"ProductToRtoInventory\\\", fields: [dropshipperProductId], references: [id])\\n  dropshipperProductVariant   dropshipperProductVariant @relation(\\\"VariantToRtoInventory\\\", fields: [dropshipperProductVariantId], references: [id])\\n\\n  @@index([orderId])\\n  @@index([dropshipperId])\\n  @@index([dropshipperProductId])\\n  @@index([dropshipperProductVariantId])\\n  @@index([deletedAt])\\n}\\n\\nmodel supplierOrderPermission {\\n  id              Int     @id @default(autoincrement())\\n  orderNumber     Boolean @default(false)\\n  awbNumber       Boolean @default(false)\\n  status          Boolean @default(false)\\n  orderNote       Boolean @default(false)\\n  subtotal        Boolean @default(false)\\n  tax             Boolean @default(false)\\n  discount        Boolean @default(false)\\n  totalAmount     Boolean @default(false)\\n  currency        Boolean @default(false)\\n  shippingName    Boolean @default(false)\\n  shippingPhone   Boolean @default(false)\\n  shippingEmail   Boolean @default(false)\\n  shippingAddress Boolean @default(false)\\n  shippingZip     Boolean @default(false)\\n  shippingCountry Boolean @default(false)\\n  shippingState   Boolean @default(false)\\n  shippingCity    Boolean @default(false)\\n  billingName     Boolean @default(false)\\n  billingPhone    Boolean @default(false)\\n  billingEmail    Boolean @default(false)\\n  billingAddress  Boolean @default(false)\\n  billingZip      Boolean @default(false)\\n  billingCountry  Boolean @default(false)\\n  billingState    Boolean @default(false)\\n  billingCity     Boolean @default(false)\\n}\\n\",\n    \"inlineSchemaHash\": \"94c775cb0378cee27deb848513cef6f9bf972b9ca5e0656efa0b2727a494aa2f\",\n    \"copyEngine\": true\n};\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconfig.dirname = __dirname;\nif (!fs.existsSync(path.join(__dirname, 'schema.prisma'))) {\n    const alternativePaths = [\n        \"prisma/prisma/generated/client\",\n        \"prisma/generated/client\"\n    ];\n    const alternativePath = alternativePaths.find((altPath)=>{\n        return fs.existsSync(path.join(process.cwd(), altPath, 'schema.prisma'));\n    }) ?? alternativePaths[0];\n    config.dirname = path.join(process.cwd(), alternativePath);\n    config.isBundled = true;\n}\nconfig.runtimeDataModel = JSON.parse(\"{\\\"models\\\":{\\\"appConfig\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingCost\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"emailConfig\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"panel\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"module\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"subject\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"action\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"html_template\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"smtp_host\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"smtp_secure\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"smtp_port\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"smtp_username\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"smtp_password\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"from_email\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"from_name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"admin\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"profilePicture\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"uniqeId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"username\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"website\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"email\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"isEmailVerified\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"emailVerifiedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"referralCode\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"password\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"role\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":\\\"admin\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"type\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":\\\"main\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"isVerified\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"verifiedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":\\\"active\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dateOfBirth\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"phoneNumber\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"currentAddress\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentAddress\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentPostalCode\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentCityId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentStateId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentCountryId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"pr_token\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"pr_expires_at\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"pr_last_reset\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentCity\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"city\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminTocity\\\",\\\"relationFromFields\\\":[\\\"permanentCityId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentState\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"state\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminTostate\\\",\\\"relationFromFields\\\":[\\\"permanentStateId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentCountry\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"country\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminTocountry\\\",\\\"relationFromFields\\\":[\\\"permanentCountryId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderItemsDropshipper\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"orderItem\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderItemToDropshipper\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderItemsSupplier\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"orderItem\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderItemToSupplier\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shopifyStores\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"shopifyStore\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminToshopifyStore\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"staff\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"adminStaff\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminToStaff\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"companyDetail\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"companyDetail\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminToCompanyDetail\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"bankAccount\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"bankAccount\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminToBankAccount\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProducts\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"supplierProduct\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"SupplierProducts\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperProducts\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"dropshipperProduct\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"DropshipperProducts\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"suppliedProducts\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"dropshipperProduct\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"SuppliedProducts\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"bankAccountChangeRequest\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"bankAccountChangeRequest\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminToBankAccountChangeRequest\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"productVisibility\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"productSupplierVisibility\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminToproductSupplierVisibility\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProductVariants\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"supplierProductVariant\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminToSupplierProductVariant\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperProductVariants\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"dropshipperProductVariant\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminToDropshipperProductVariant\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"rtoInventories\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"rtoInventory\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminToRtoInventory\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"shopifyStore\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"logo\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shop\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"accessToken\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"email\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shopName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"planName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"country\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shopOwner\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"domain\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"myshopifyDomain\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"province\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"city\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"phone\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"currency\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"moneyFormat\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"timezone\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAtShop\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"userId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"verificationStatus\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":true,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":true,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"admin\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminToshopifyStore\\\",\\\"relationFromFields\\\":[\\\"adminId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"companyDetail\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"companyName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"brandName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"brandShortName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingAddress\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingPincode\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingCountryId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingCountry\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"country\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CompanyCountryRelation\\\",\\\"relationFromFields\\\":[\\\"billingCountryId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingStateId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingState\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"state\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CompanyStateRelation\\\",\\\"relationFromFields\\\":[\\\"billingStateId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingCityId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingCity\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"city\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CompanyCityRelation\\\",\\\"relationFromFields\\\":[\\\"billingCityId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"businessType\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"clientEntryType\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"gstNumber\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"companyPanNumber\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"companyPanCardName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"companyPanCardImage\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"aadharNumber\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"gstDocument\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"panCardHolderName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"aadharCardHolderName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"panCardImage\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"aadharCardImage\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"additionalDocumentUpload\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"documentId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"documentName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"documentImage\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"admin\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminToCompanyDetail\\\",\\\"relationFromFields\\\":[\\\"adminId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"bankAccount\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"accountHolderName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"accountNumber\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"bankName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"bankBranch\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"accountType\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"ifscCode\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"cancelledChequeImage\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"paymentMethod\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"admin\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminToBankAccount\\\",\\\"relationFromFields\\\":[\\\"adminId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"bankAccountChangeRequest\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"bankAccountChangeRequest\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"bankAccountTobankAccountChangeRequest\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"bankAccountChangeRequest\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"bankAccountId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"accountHolderName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"accountNumber\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"bankName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"bankBranch\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"accountType\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"ifscCode\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"cancelledChequeImage\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"paymentMethod\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":\\\"pending\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"remarks\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"admin\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminToBankAccountChangeRequest\\\",\\\"relationFromFields\\\":[\\\"adminId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"bankAccount\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"bankAccount\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"bankAccountTobankAccountChangeRequest\\\",\\\"relationFromFields\\\":[\\\"bankAccountId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"adminStaff\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"admin_id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"profilePicture\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"email\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"phoneNumber\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"currentAddress\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentAddress\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentPostalCode\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentCityId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentStateId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentCountryId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"password\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"role\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":\\\"admin\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":\\\"active\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"pr_token\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"pr_expires_at\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"pr_last_reset\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentCity\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"city\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminStaffTocity\\\",\\\"relationFromFields\\\":[\\\"permanentCityId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentState\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"state\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminStaffTostate\\\",\\\"relationFromFields\\\":[\\\"permanentStateId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permanentCountry\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"country\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminStaffTocountry\\\",\\\"relationFromFields\\\":[\\\"permanentCountryId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"admin\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminToStaff\\\",\\\"relationFromFields\\\":[\\\"admin_id\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminStaffPermissions\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"adminStaffHasPermission\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminStaffToHasPermission\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"adminStaffPermission\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"panel\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"module\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"action\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":true,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminStaffHasPermissions\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"adminStaffHasPermission\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"PermissionToHasPermission\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"adminStaffHasPermission\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminStaffId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminStaffPermissionId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminStaff\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"adminStaff\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminStaffToHasPermission\\\",\\\"relationFromFields\\\":[\\\"adminStaffId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"permission\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"adminStaffPermission\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"PermissionToHasPermission\\\",\\\"relationFromFields\\\":[\\\"adminStaffPermissionId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"globalPermission\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"panel\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"module\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"action\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":true,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"loginLog\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"action\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"response\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"ipv4\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"ipv6\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"internetServiceProvider\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"clientInformation\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"userAgent\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"activityLog\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"module\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"action\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"endpoint\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"method\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"payload\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"response\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"result\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"data\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"ipv4\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"ipv6\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"internetServiceProvider\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"clientInformation\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"userAgent\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"country\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"iso3\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"iso2\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"phonecode\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"currency\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"currencyName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"currencySymbol\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"nationality\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"states\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"state\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"countryTostate\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"cities\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"city\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"cityTocountry\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"warehouses\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"warehouse\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"countryTowarehouse\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"highRtos\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"highRto\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"countryTohighRto\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"admins\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminTocountry\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminStaffs\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"adminStaff\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminStaffTocountry\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"originProducts\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"product\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OriginCountryRelation\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingProducts\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"product\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"ShippingCountryRelation\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingOrders\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"order\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CountryShippingRelation\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingOrders\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"order\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CountryBillingRelation\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingCompanyDetails\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"companyDetail\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CompanyCountryRelation\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"state\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"countryId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"iso2\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"type\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"country\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"country\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"countryTostate\\\",\\\"relationFromFields\\\":[\\\"countryId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"cities\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"city\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"cityTostate\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"warehouses\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"warehouse\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"stateTowarehouse\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"highRtos\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"highRto\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"highRtoTostate\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"admins\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminTostate\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminStaffs\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"adminStaff\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminStaffTostate\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingOrders\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"order\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"StateShippingRelation\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingOrders\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"order\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"StateBillingRelation\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingCompanyDetails\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"companyDetail\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CompanyStateRelation\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"city\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"stateId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"countryId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"state\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"state\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"cityTostate\\\",\\\"relationFromFields\\\":[\\\"stateId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"country\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"country\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"cityTocountry\\\",\\\"relationFromFields\\\":[\\\"countryId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"warehouses\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"warehouse\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"cityTowarehouse\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"highRtos\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"highRto\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"cityTohighRto\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"admins\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminTocity\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"adminStaffs\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"adminStaff\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminStaffTocity\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingOrders\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"order\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CityShippingRelation\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingOrders\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"order\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CityBillingRelation\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingCompanyDetails\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"companyDetail\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CompanyCityRelation\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"warehouse\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"slug\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"gst_number\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"contact_name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"contact_number\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"address_line_1\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"address_line_2\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"postal_code\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"countryId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"stateId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"cityId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"country\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"country\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"countryTowarehouse\\\",\\\"relationFromFields\\\":[\\\"countryId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"state\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"state\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"stateTowarehouse\\\",\\\"relationFromFields\\\":[\\\"stateId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"city\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"city\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"cityTowarehouse\\\",\\\"relationFromFields\\\":[\\\"cityId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"category\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"slug\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"description\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"image\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"products\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"product\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"categoryToproduct\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"productRequests\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"productRequest\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"categoryToproductRequest\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"brand\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"slug\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"description\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"image\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"products\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"product\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"brandToproduct\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"productRequest\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"categoryId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"expectedPrice\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"expectedDailyOrders\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"url\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"image\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":true,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"category\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"category\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"categoryToproductRequest\\\",\\\"relationFromFields\\\":[\\\"categoryId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"product\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingOwlProductId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"categoryId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"slug\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"main_sku\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"description\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"tags\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Json\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"brandId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"originCountryId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"hsnCode\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"taxRate\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"rtoAddress\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"pickupAddress\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingCountryId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"video_url\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"list_as\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shipping_time\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"weight\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"package_length\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"package_width\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"package_height\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"chargeable_weight\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"package_weight_image\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"package_length_image\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"package_width_image\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"package_height_image\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"product_detail_video\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"training_guidance_video\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"isVisibleToAll\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":true,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":true,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"isVarientExists\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":true,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"category\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"category\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"categoryToproduct\\\",\\\"relationFromFields\\\":[\\\"categoryId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"brand\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"brand\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"brandToproduct\\\",\\\"relationFromFields\\\":[\\\"brandId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"originCountry\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"country\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OriginCountryRelation\\\",\\\"relationFromFields\\\":[\\\"originCountryId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingCountry\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"country\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"ShippingCountryRelation\\\",\\\"relationFromFields\\\":[\\\"shippingCountryId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"variants\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"productVariant\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"productToproductVariant\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProducts\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"supplierProduct\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"productTosupplierProduct\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperProducts\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"dropshipperProduct\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"dropshipperProductToproduct\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierVisibility\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"productSupplierVisibility\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"productToproductSupplierVisibility\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProductVariants\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"supplierProductVariant\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"productTosupplierProductVariant\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperProductVariants\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"dropshipperProductVariant\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"dropshipperProductVariantToproduct\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"productVariant\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"productId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"image\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"color\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"model\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"sku\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"product_link\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"suggested_price\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"product\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"product\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"productToproductVariant\\\",\\\"relationFromFields\\\":[\\\"productId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProductVariants\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"supplierProductVariant\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"productVariantTosupplierProductVariant\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"productSupplierVisibility\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"productId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"product\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"product\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"productToproductSupplierVisibility\\\",\\\"relationFromFields\\\":[\\\"productId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplier\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"adminToproductSupplierVisibility\\\",\\\"relationFromFields\\\":[\\\"supplierId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"courierCompany\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"slug\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"code\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"website\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"email\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"phoneNumber\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":true,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"highRto\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"pincode\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"countryId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"stateId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"cityId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"country\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"country\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"countryTohighRto\\\",\\\"relationFromFields\\\":[\\\"countryId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"state\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"state\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"highRtoTostate\\\",\\\"relationFromFields\\\":[\\\"stateId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"city\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"city\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"cityTohighRto\\\",\\\"relationFromFields\\\":[\\\"cityId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"badPincode\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"pincode\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"goodPincode\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"pincode\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"supplierProduct\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"productId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":true,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderItems\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"orderItem\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"orderItemTosupplierProduct\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplier\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"SupplierProducts\\\",\\\"relationFromFields\\\":[\\\"supplierId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"product\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"product\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"productTosupplierProduct\\\",\\\"relationFromFields\\\":[\\\"productId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"variants\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"supplierProductVariant\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"supplierProductTosupplierProductVariant\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperProducts\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"dropshipperProduct\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"SupplierProductRelation\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperProductVariants\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"dropshipperProductVariant\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"dropshipperProductVariantTosupplierProduct\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"supplierProductVariant\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"productId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"productVariantId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProductId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"price\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"stock\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":true,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderItems\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"orderItem\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"orderItemTosupplierProductVariant\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplier\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminToSupplierProductVariant\\\",\\\"relationFromFields\\\":[\\\"supplierId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"product\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"product\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"productTosupplierProductVariant\\\",\\\"relationFromFields\\\":[\\\"productId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"variant\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"productVariant\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"productVariantTosupplierProductVariant\\\",\\\"relationFromFields\\\":[\\\"productVariantId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProduct\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"supplierProduct\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"supplierProductTosupplierProductVariant\\\",\\\"relationFromFields\\\":[\\\"supplierProductId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperVariants\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"dropshipperProductVariant\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"SupplierToDropshipperVariant\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"dropshipperProduct\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shopifyProductId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProductId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"productId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":true,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipper\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"DropshipperProducts\\\",\\\"relationFromFields\\\":[\\\"dropshipperId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplier\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"SuppliedProducts\\\",\\\"relationFromFields\\\":[\\\"supplierId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"product\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"product\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"dropshipperProductToproduct\\\",\\\"relationFromFields\\\":[\\\"productId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProduct\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"supplierProduct\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"SupplierProductRelation\\\",\\\"relationFromFields\\\":[\\\"supplierProductId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"variants\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"dropshipperProductVariant\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"dropshipperProductTodropshipperProductVariant\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderItems\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"orderItem\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"dropshipperProductToorderItem\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"rtoInventories\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"rtoInventory\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"ProductToRtoInventory\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"dropshipperProductVariant\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"productId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProductId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperProductId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProductVariantId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"price\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":true,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipper\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminToDropshipperProductVariant\\\",\\\"relationFromFields\\\":[\\\"dropshipperId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"product\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"product\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"dropshipperProductVariantToproduct\\\",\\\"relationFromFields\\\":[\\\"productId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProduct\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"supplierProduct\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"dropshipperProductVariantTosupplierProduct\\\",\\\"relationFromFields\\\":[\\\"supplierProductId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperProduct\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"dropshipperProduct\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"dropshipperProductTodropshipperProductVariant\\\",\\\"relationFromFields\\\":[\\\"dropshipperProductId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProductVariant\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"supplierProductVariant\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"SupplierToDropshipperVariant\\\",\\\"relationFromFields\\\":[\\\"supplierProductVariantId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderItems\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"orderItem\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"dropshipperProductVariantToorderItem\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"rtoInventories\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"rtoInventory\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"VariantToRtoInventory\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"payment\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"transactionId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"cycle\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"amount\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"date\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orders\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"order\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderPayment\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"order\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderNumber\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"awbNumber\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":\\\"pending\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderNote\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"subtotal\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"default\\\":0,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"tax\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"default\\\":0,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"discount\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"default\\\":0,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"totalAmount\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"default\\\":0,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"currency\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":\\\"USD\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingPhone\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingEmail\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingAddress\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingZip\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingCountryId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingStateId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingCityId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingCountry\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"country\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CountryShippingRelation\\\",\\\"relationFromFields\\\":[\\\"shippingCountryId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingState\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"state\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"StateShippingRelation\\\",\\\"relationFromFields\\\":[\\\"shippingStateId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingCity\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"city\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CityShippingRelation\\\",\\\"relationFromFields\\\":[\\\"shippingCityId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingPhone\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingEmail\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingAddress\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingZip\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingCountryId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingStateId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingCityId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"BigInt\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingCountry\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"country\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CountryBillingRelation\\\",\\\"relationFromFields\\\":[\\\"billingCountryId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingState\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"state\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"StateBillingRelation\\\",\\\"relationFromFields\\\":[\\\"billingStateId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingCity\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"city\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CityBillingRelation\\\",\\\"relationFromFields\\\":[\\\"billingCityId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"isPostpaid\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"paymentId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"payment\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"payment\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderPayment\\\",\\\"relationFromFields\\\":[\\\"paymentId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingApiResult\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Json\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"barcodeImage\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"delivered\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deliveredDate\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"rtoDelivered\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"rtoDeliveredDate\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"lastRefreshAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"disputeCase\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierRTOResponse\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"packingGallery\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"unboxingGallery\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"LongText\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"collectedAtWarehouse\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"items\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"orderItem\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"orderToorderItem\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"rtoInventories\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"rtoInventory\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderToRtoInventory\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"orderItem\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperProductId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperProductVariantId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProductId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProductVariantId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"quantity\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"price\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"total\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"order\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"order\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"orderToorderItem\\\",\\\"relationFromFields\\\":[\\\"orderId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperProduct\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"dropshipperProduct\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"dropshipperProductToorderItem\\\",\\\"relationFromFields\\\":[\\\"dropshipperProductId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperVariant\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"dropshipperProductVariant\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"dropshipperProductVariantToorderItem\\\",\\\"relationFromFields\\\":[\\\"dropshipperProductVariantId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipper\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderItemToDropshipper\\\",\\\"relationFromFields\\\":[\\\"dropshipperId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierProduct\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"supplierProduct\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"orderItemTosupplierProduct\\\",\\\"relationFromFields\\\":[\\\"supplierProductId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplierVariant\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"supplierProductVariant\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"orderItemTosupplierProductVariant\\\",\\\"relationFromFields\\\":[\\\"supplierProductVariantId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"supplier\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderItemToSupplier\\\",\\\"relationFromFields\\\":[\\\"supplierId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"rtoInventories\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"rtoInventory\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderItemToRtoInventory\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"rtoInventory\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderItemId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperProductId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperProductVariantId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"quantity\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":1,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"price\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"default\\\":0,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"updatedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedBy\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"deletedByRole\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipper\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"admin\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AdminToRtoInventory\\\",\\\"relationFromFields\\\":[\\\"dropshipperId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"order\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"order\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderToRtoInventory\\\",\\\"relationFromFields\\\":[\\\"orderId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderItem\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"orderItem\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderItemToRtoInventory\\\",\\\"relationFromFields\\\":[\\\"orderItemId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperProduct\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"dropshipperProduct\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"ProductToRtoInventory\\\",\\\"relationFromFields\\\":[\\\"dropshipperProductId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"dropshipperProductVariant\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"dropshipperProductVariant\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"VariantToRtoInventory\\\",\\\"relationFromFields\\\":[\\\"dropshipperProductVariantId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"supplierOrderPermission\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"autoincrement\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderNumber\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"awbNumber\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderNote\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"subtotal\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"tax\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"discount\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"totalAmount\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"currency\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingPhone\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingEmail\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingAddress\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingZip\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingCountry\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingState\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"shippingCity\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingName\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingPhone\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingEmail\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingAddress\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingZip\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingCountry\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingState\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"billingCity\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"Boolean\\\",\\\"nativeType\\\":null,\\\"default\\\":false,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false}},\\\"enums\\\":{},\\\"types\\\":{}}\");\ndefineDmmfProperty(exports.Prisma, config.runtimeDataModel);\nconfig.engineWasm = undefined;\nconfig.compilerWasm = undefined;\nconst { warnEnvConflicts } = __webpack_require__(/*! ./runtime/library.js */ \"(rsc)/./prisma/prisma/generated/client/runtime/library.js\");\nwarnEnvConflicts({\n    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),\n    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath)\n});\nconst PrismaClient = getPrismaClient(config);\nexports.PrismaClient = PrismaClient;\nObject.assign(exports, Prisma);\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"query_engine-windows.dll.node\");\npath.join(process.cwd(), \"prisma/prisma/generated/client/query_engine-windows.dll.node\");\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"schema.prisma\");\npath.join(process.cwd(), \"prisma/prisma/generated/client/schema.prisma\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./prisma/prisma/generated/client/index.js\n");

/***/ }),

/***/ "(rsc)/./prisma/prisma/generated/client/runtime/library.js":
/*!***********************************************************!*\
  !*** ./prisma/prisma/generated/client/runtime/library.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* !!! This is code generated by Prisma. Do not edit directly. !!!\r\n/* eslint-disable */ \nvar bu = Object.create;\nvar Vt = Object.defineProperty;\nvar Eu = Object.getOwnPropertyDescriptor;\nvar wu = Object.getOwnPropertyNames;\nvar xu = Object.getPrototypeOf, Pu = Object.prototype.hasOwnProperty;\nvar Do = (e, r)=>()=>(e && (r = e(e = 0)), r);\nvar ne = (e, r)=>()=>(r || e((r = {\n            exports: {}\n        }).exports, r), r.exports), tr = (e, r)=>{\n    for(var t in r)Vt(e, t, {\n        get: r[t],\n        enumerable: !0\n    });\n}, _o = (e, r, t, n)=>{\n    if (r && typeof r == \"object\" || typeof r == \"function\") for (let i of wu(r))!Pu.call(e, i) && i !== t && Vt(e, i, {\n        get: ()=>r[i],\n        enumerable: !(n = Eu(r, i)) || n.enumerable\n    });\n    return e;\n};\nvar k = (e, r, t)=>(t = e != null ? bu(xu(e)) : {}, _o(r || !e || !e.__esModule ? Vt(t, \"default\", {\n        value: e,\n        enumerable: !0\n    }) : t, e)), vu = (e)=>_o(Vt({}, \"__esModule\", {\n        value: !0\n    }), e);\nvar fi = ne((_g, ss)=>{\n    \"use strict\";\n    ss.exports = (e, r = process.argv)=>{\n        let t = e.startsWith(\"-\") ? \"\" : e.length === 1 ? \"-\" : \"--\", n = r.indexOf(t + e), i = r.indexOf(\"--\");\n        return n !== -1 && (i === -1 || n < i);\n    };\n});\nvar us = ne((Ng, ls)=>{\n    \"use strict\";\n    var Mc = __webpack_require__(/*! node:os */ \"node:os\"), as = __webpack_require__(/*! node:tty */ \"node:tty\"), de = fi(), { env: G } = process, Qe;\n    de(\"no-color\") || de(\"no-colors\") || de(\"color=false\") || de(\"color=never\") ? Qe = 0 : (de(\"color\") || de(\"colors\") || de(\"color=true\") || de(\"color=always\")) && (Qe = 1);\n    \"FORCE_COLOR\" in G && (G.FORCE_COLOR === \"true\" ? Qe = 1 : G.FORCE_COLOR === \"false\" ? Qe = 0 : Qe = G.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(G.FORCE_COLOR, 10), 3));\n    function gi(e) {\n        return e === 0 ? !1 : {\n            level: e,\n            hasBasic: !0,\n            has256: e >= 2,\n            has16m: e >= 3\n        };\n    }\n    function hi(e, r) {\n        if (Qe === 0) return 0;\n        if (de(\"color=16m\") || de(\"color=full\") || de(\"color=truecolor\")) return 3;\n        if (de(\"color=256\")) return 2;\n        if (e && !r && Qe === void 0) return 0;\n        let t = Qe || 0;\n        if (G.TERM === \"dumb\") return t;\n        if (process.platform === \"win32\") {\n            let n = Mc.release().split(\".\");\n            return Number(n[0]) >= 10 && Number(n[2]) >= 10586 ? Number(n[2]) >= 14931 ? 3 : 2 : 1;\n        }\n        if (\"CI\" in G) return [\n            \"TRAVIS\",\n            \"CIRCLECI\",\n            \"APPVEYOR\",\n            \"GITLAB_CI\",\n            \"GITHUB_ACTIONS\",\n            \"BUILDKITE\"\n        ].some((n)=>n in G) || G.CI_NAME === \"codeship\" ? 1 : t;\n        if (\"TEAMCITY_VERSION\" in G) return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(G.TEAMCITY_VERSION) ? 1 : 0;\n        if (G.COLORTERM === \"truecolor\") return 3;\n        if (\"TERM_PROGRAM\" in G) {\n            let n = parseInt((G.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n            switch(G.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return n >= 3 ? 3 : 2;\n                case \"Apple_Terminal\":\n                    return 2;\n            }\n        }\n        return /-256(color)?$/i.test(G.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(G.TERM) || \"COLORTERM\" in G ? 1 : t;\n    }\n    function $c(e) {\n        let r = hi(e, e && e.isTTY);\n        return gi(r);\n    }\n    ls.exports = {\n        supportsColor: $c,\n        stdout: gi(hi(!0, as.isatty(1))),\n        stderr: gi(hi(!0, as.isatty(2)))\n    };\n});\nvar ds = ne((Lg, ps)=>{\n    \"use strict\";\n    var qc = us(), br = fi();\n    function cs(e) {\n        if (/^\\d{3,4}$/.test(e)) {\n            let t = /(\\d{1,2})(\\d{2})/.exec(e) || [];\n            return {\n                major: 0,\n                minor: parseInt(t[1], 10),\n                patch: parseInt(t[2], 10)\n            };\n        }\n        let r = (e || \"\").split(\".\").map((t)=>parseInt(t, 10));\n        return {\n            major: r[0],\n            minor: r[1],\n            patch: r[2]\n        };\n    }\n    function yi(e) {\n        let { CI: r, FORCE_HYPERLINK: t, NETLIFY: n, TEAMCITY_VERSION: i, TERM_PROGRAM: o, TERM_PROGRAM_VERSION: s, VTE_VERSION: a, TERM: l } = process.env;\n        if (t) return !(t.length > 0 && parseInt(t, 10) === 0);\n        if (br(\"no-hyperlink\") || br(\"no-hyperlinks\") || br(\"hyperlink=false\") || br(\"hyperlink=never\")) return !1;\n        if (br(\"hyperlink=true\") || br(\"hyperlink=always\") || n) return !0;\n        if (!qc.supportsColor(e) || e && !e.isTTY) return !1;\n        if (\"WT_SESSION\" in process.env) return !0;\n        if (process.platform === \"win32\" || r || i) return !1;\n        if (o) {\n            let u = cs(s || \"\");\n            switch(o){\n                case \"iTerm.app\":\n                    return u.major === 3 ? u.minor >= 1 : u.major > 3;\n                case \"WezTerm\":\n                    return u.major >= 20200620;\n                case \"vscode\":\n                    return u.major > 1 || u.major === 1 && u.minor >= 72;\n                case \"ghostty\":\n                    return !0;\n            }\n        }\n        if (a) {\n            if (a === \"0.50.0\") return !1;\n            let u = cs(a);\n            return u.major > 0 || u.minor >= 50;\n        }\n        switch(l){\n            case \"alacritty\":\n                return !0;\n        }\n        return !1;\n    }\n    ps.exports = {\n        supportsHyperlink: yi,\n        stdout: yi(process.stdout),\n        stderr: yi(process.stderr)\n    };\n});\nvar ms = ne((Hg, jc)=>{\n    jc.exports = {\n        name: \"@prisma/internals\",\n        version: \"6.10.1\",\n        description: \"This package is intended for Prisma's internal use\",\n        main: \"dist/index.js\",\n        types: \"dist/index.d.ts\",\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/prisma.git\",\n            directory: \"packages/internals\"\n        },\n        homepage: \"https://www.prisma.io\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        bugs: \"https://github.com/prisma/prisma/issues\",\n        license: \"Apache-2.0\",\n        scripts: {\n            dev: \"DEV=true tsx helpers/build.ts\",\n            build: \"tsx helpers/build.ts\",\n            test: \"dotenv -e ../../.db.env -- jest --silent\",\n            prepublishOnly: \"pnpm run build\"\n        },\n        files: [\n            \"README.md\",\n            \"dist\",\n            \"!**/libquery_engine*\",\n            \"!dist/get-generators/engines/*\",\n            \"scripts\"\n        ],\n        devDependencies: {\n            \"@babel/helper-validator-identifier\": \"7.25.9\",\n            \"@opentelemetry/api\": \"1.9.0\",\n            \"@swc/core\": \"1.11.5\",\n            \"@swc/jest\": \"0.2.37\",\n            \"@types/babel__helper-validator-identifier\": \"7.15.2\",\n            \"@types/jest\": \"29.5.14\",\n            \"@types/node\": \"18.19.76\",\n            \"@types/resolve\": \"1.20.6\",\n            archiver: \"6.0.2\",\n            \"checkpoint-client\": \"1.1.33\",\n            \"cli-truncate\": \"4.0.0\",\n            dotenv: \"16.5.0\",\n            esbuild: \"0.25.1\",\n            \"escape-string-regexp\": \"5.0.0\",\n            execa: \"5.1.1\",\n            \"fast-glob\": \"3.3.3\",\n            \"find-up\": \"7.0.0\",\n            \"fp-ts\": \"2.16.9\",\n            \"fs-extra\": \"11.3.0\",\n            \"fs-jetpack\": \"5.1.0\",\n            \"global-dirs\": \"4.0.0\",\n            globby: \"11.1.0\",\n            \"identifier-regex\": \"1.0.0\",\n            \"indent-string\": \"4.0.0\",\n            \"is-windows\": \"1.0.2\",\n            \"is-wsl\": \"3.1.0\",\n            jest: \"29.7.0\",\n            \"jest-junit\": \"16.0.0\",\n            kleur: \"4.1.5\",\n            \"mock-stdin\": \"1.0.0\",\n            \"new-github-issue-url\": \"0.2.1\",\n            \"node-fetch\": \"3.3.2\",\n            \"npm-packlist\": \"5.1.3\",\n            open: \"7.4.2\",\n            \"p-map\": \"4.0.0\",\n            \"read-package-up\": \"11.0.0\",\n            resolve: \"1.22.10\",\n            \"string-width\": \"7.2.0\",\n            \"strip-ansi\": \"6.0.1\",\n            \"strip-indent\": \"4.0.0\",\n            \"temp-dir\": \"2.0.0\",\n            tempy: \"1.0.1\",\n            \"terminal-link\": \"4.0.0\",\n            tmp: \"0.2.3\",\n            \"ts-node\": \"10.9.2\",\n            \"ts-pattern\": \"5.6.2\",\n            \"ts-toolbelt\": \"9.6.0\",\n            typescript: \"5.4.5\",\n            yarn: \"1.22.22\"\n        },\n        dependencies: {\n            \"@prisma/config\": \"workspace:*\",\n            \"@prisma/debug\": \"workspace:*\",\n            \"@prisma/dmmf\": \"workspace:*\",\n            \"@prisma/driver-adapter-utils\": \"workspace:*\",\n            \"@prisma/engines\": \"workspace:*\",\n            \"@prisma/fetch-engine\": \"workspace:*\",\n            \"@prisma/generator\": \"workspace:*\",\n            \"@prisma/generator-helper\": \"workspace:*\",\n            \"@prisma/get-platform\": \"workspace:*\",\n            \"@prisma/prisma-schema-wasm\": \"6.10.1-1.9b628578b3b7cae625e8c927178f15a170e74a9c\",\n            \"@prisma/schema-engine-wasm\": \"6.10.1-1.9b628578b3b7cae625e8c927178f15a170e74a9c\",\n            \"@prisma/schema-files-loader\": \"workspace:*\",\n            arg: \"5.0.2\",\n            prompts: \"2.4.2\"\n        },\n        peerDependencies: {\n            typescript: \">=5.1.0\"\n        },\n        peerDependenciesMeta: {\n            typescript: {\n                optional: !0\n            }\n        },\n        sideEffects: !1\n    };\n});\nvar wi = ne((rh, Gc)=>{\n    Gc.exports = {\n        name: \"@prisma/engines-version\",\n        version: \"6.10.1-1.9b628578b3b7cae625e8c927178f15a170e74a9c\",\n        main: \"index.js\",\n        types: \"index.d.ts\",\n        license: \"Apache-2.0\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        prisma: {\n            enginesVersion: \"9b628578b3b7cae625e8c927178f15a170e74a9c\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/engines-wrapper.git\",\n            directory: \"packages/engines-version\"\n        },\n        devDependencies: {\n            \"@types/node\": \"18.19.76\",\n            typescript: \"4.9.5\"\n        },\n        files: [\n            \"index.js\",\n            \"index.d.ts\"\n        ],\n        scripts: {\n            build: \"tsc -d\"\n        }\n    };\n});\nvar xi = ne((rn)=>{\n    \"use strict\";\n    Object.defineProperty(rn, \"__esModule\", {\n        value: !0\n    });\n    rn.enginesVersion = void 0;\n    rn.enginesVersion = wi().prisma.enginesVersion;\n});\nvar ys = ne((gh, hs)=>{\n    \"use strict\";\n    hs.exports = (e)=>{\n        let r = e.match(/^[ \\t]*(?=\\S)/gm);\n        return r ? r.reduce((t, n)=>Math.min(t, n.length), 1 / 0) : 0;\n    };\n});\nvar Ci = ne((bh, ws)=>{\n    \"use strict\";\n    ws.exports = (e, r = 1, t)=>{\n        if (t = {\n            indent: \" \",\n            includeEmptyLines: !1,\n            ...t\n        }, typeof e != \"string\") throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof e}\\``);\n        if (typeof r != \"number\") throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof r}\\``);\n        if (typeof t.indent != \"string\") throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof t.indent}\\``);\n        if (r === 0) return e;\n        let n = t.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n        return e.replace(n, t.indent.repeat(r));\n    };\n});\nvar Ts = ne((xh, vs)=>{\n    \"use strict\";\n    vs.exports = ({ onlyFirst: e = !1 } = {})=>{\n        let r = [\n            \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n            \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"\n        ].join(\"|\");\n        return new RegExp(r, e ? void 0 : \"g\");\n    };\n});\nvar Oi = ne((Ph, Ss)=>{\n    \"use strict\";\n    var ep = Ts();\n    Ss.exports = (e)=>typeof e == \"string\" ? e.replace(ep(), \"\") : e;\n});\nvar Rs = ne((Rh, rp)=>{\n    rp.exports = {\n        name: \"dotenv\",\n        version: \"16.5.0\",\n        description: \"Loads environment variables from .env file\",\n        main: \"lib/main.js\",\n        types: \"lib/main.d.ts\",\n        exports: {\n            \".\": {\n                types: \"./lib/main.d.ts\",\n                require: \"./lib/main.js\",\n                default: \"./lib/main.js\"\n            },\n            \"./config\": \"./config.js\",\n            \"./config.js\": \"./config.js\",\n            \"./lib/env-options\": \"./lib/env-options.js\",\n            \"./lib/env-options.js\": \"./lib/env-options.js\",\n            \"./lib/cli-options\": \"./lib/cli-options.js\",\n            \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n            \"./package.json\": \"./package.json\"\n        },\n        scripts: {\n            \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n            lint: \"standard\",\n            pretest: \"npm run lint && npm run dts-check\",\n            test: \"tap run --allow-empty-coverage --disable-coverage --timeout=60000\",\n            \"test:coverage\": \"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov\",\n            prerelease: \"npm test\",\n            release: \"standard-version\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/motdotla/dotenv.git\"\n        },\n        homepage: \"https://github.com/motdotla/dotenv#readme\",\n        funding: \"https://dotenvx.com\",\n        keywords: [\n            \"dotenv\",\n            \"env\",\n            \".env\",\n            \"environment\",\n            \"variables\",\n            \"config\",\n            \"settings\"\n        ],\n        readmeFilename: \"README.md\",\n        license: \"BSD-2-Clause\",\n        devDependencies: {\n            \"@types/node\": \"^18.11.3\",\n            decache: \"^4.6.2\",\n            sinon: \"^14.0.1\",\n            standard: \"^17.0.0\",\n            \"standard-version\": \"^9.5.0\",\n            tap: \"^19.2.0\",\n            typescript: \"^4.8.4\"\n        },\n        engines: {\n            node: \">=12\"\n        },\n        browser: {\n            fs: !1\n        }\n    };\n});\nvar Os = ne((Ch, Ne)=>{\n    \"use strict\";\n    var _i = __webpack_require__(/*! node:fs */ \"node:fs\"), Ni = __webpack_require__(/*! node:path */ \"node:path\"), tp = __webpack_require__(/*! node:os */ \"node:os\"), np = __webpack_require__(/*! node:crypto */ \"node:crypto\"), ip = Rs(), As = ip.version, op = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n    function sp(e) {\n        let r = {}, t = e.toString();\n        t = t.replace(/\\r\\n?/mg, `\n`);\n        let n;\n        for(; (n = op.exec(t)) != null;){\n            let i = n[1], o = n[2] || \"\";\n            o = o.trim();\n            let s = o[0];\n            o = o.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, \"$2\"), s === '\"' && (o = o.replace(/\\\\n/g, `\n`), o = o.replace(/\\\\r/g, \"\\r\")), r[i] = o;\n        }\n        return r;\n    }\n    function ap(e) {\n        let r = ks(e), t = B.configDotenv({\n            path: r\n        });\n        if (!t.parsed) {\n            let s = new Error(`MISSING_DATA: Cannot parse ${r} for an unknown reason`);\n            throw s.code = \"MISSING_DATA\", s;\n        }\n        let n = Is(e).split(\",\"), i = n.length, o;\n        for(let s = 0; s < i; s++)try {\n            let a = n[s].trim(), l = up(t, a);\n            o = B.decrypt(l.ciphertext, l.key);\n            break;\n        } catch (a) {\n            if (s + 1 >= i) throw a;\n        }\n        return B.parse(o);\n    }\n    function lp(e) {\n        console.log(`[dotenv@${As}][WARN] ${e}`);\n    }\n    function it(e) {\n        console.log(`[dotenv@${As}][DEBUG] ${e}`);\n    }\n    function Is(e) {\n        return e && e.DOTENV_KEY && e.DOTENV_KEY.length > 0 ? e.DOTENV_KEY : process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0 ? process.env.DOTENV_KEY : \"\";\n    }\n    function up(e, r) {\n        let t;\n        try {\n            t = new URL(r);\n        } catch (a) {\n            if (a.code === \"ERR_INVALID_URL\") {\n                let l = new Error(\"INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development\");\n                throw l.code = \"INVALID_DOTENV_KEY\", l;\n            }\n            throw a;\n        }\n        let n = t.password;\n        if (!n) {\n            let a = new Error(\"INVALID_DOTENV_KEY: Missing key part\");\n            throw a.code = \"INVALID_DOTENV_KEY\", a;\n        }\n        let i = t.searchParams.get(\"environment\");\n        if (!i) {\n            let a = new Error(\"INVALID_DOTENV_KEY: Missing environment part\");\n            throw a.code = \"INVALID_DOTENV_KEY\", a;\n        }\n        let o = `DOTENV_VAULT_${i.toUpperCase()}`, s = e.parsed[o];\n        if (!s) {\n            let a = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${o} in your .env.vault file.`);\n            throw a.code = \"NOT_FOUND_DOTENV_ENVIRONMENT\", a;\n        }\n        return {\n            ciphertext: s,\n            key: n\n        };\n    }\n    function ks(e) {\n        let r = null;\n        if (e && e.path && e.path.length > 0) if (Array.isArray(e.path)) for (let t of e.path)_i.existsSync(t) && (r = t.endsWith(\".vault\") ? t : `${t}.vault`);\n        else r = e.path.endsWith(\".vault\") ? e.path : `${e.path}.vault`;\n        else r = Ni.resolve(process.cwd(), \".env.vault\");\n        return _i.existsSync(r) ? r : null;\n    }\n    function Cs(e) {\n        return e[0] === \"~\" ? Ni.join(tp.homedir(), e.slice(1)) : e;\n    }\n    function cp(e) {\n        !!(e && e.debug) && it(\"Loading env from encrypted .env.vault\");\n        let t = B._parseVault(e), n = process.env;\n        return e && e.processEnv != null && (n = e.processEnv), B.populate(n, t, e), {\n            parsed: t\n        };\n    }\n    function pp(e) {\n        let r = Ni.resolve(process.cwd(), \".env\"), t = \"utf8\", n = !!(e && e.debug);\n        e && e.encoding ? t = e.encoding : n && it(\"No encoding is specified. UTF-8 is used by default\");\n        let i = [\n            r\n        ];\n        if (e && e.path) if (!Array.isArray(e.path)) i = [\n            Cs(e.path)\n        ];\n        else {\n            i = [];\n            for (let l of e.path)i.push(Cs(l));\n        }\n        let o, s = {};\n        for (let l of i)try {\n            let u = B.parse(_i.readFileSync(l, {\n                encoding: t\n            }));\n            B.populate(s, u, e);\n        } catch (u) {\n            n && it(`Failed to load ${l} ${u.message}`), o = u;\n        }\n        let a = process.env;\n        return e && e.processEnv != null && (a = e.processEnv), B.populate(a, s, e), o ? {\n            parsed: s,\n            error: o\n        } : {\n            parsed: s\n        };\n    }\n    function dp(e) {\n        if (Is(e).length === 0) return B.configDotenv(e);\n        let r = ks(e);\n        return r ? B._configVault(e) : (lp(`You set DOTENV_KEY but you are missing a .env.vault file at ${r}. Did you forget to build it?`), B.configDotenv(e));\n    }\n    function mp(e, r) {\n        let t = Buffer.from(r.slice(-64), \"hex\"), n = Buffer.from(e, \"base64\"), i = n.subarray(0, 12), o = n.subarray(-16);\n        n = n.subarray(12, -16);\n        try {\n            let s = np.createDecipheriv(\"aes-256-gcm\", t, i);\n            return s.setAuthTag(o), `${s.update(n)}${s.final()}`;\n        } catch (s) {\n            let a = s instanceof RangeError, l = s.message === \"Invalid key length\", u = s.message === \"Unsupported state or unable to authenticate data\";\n            if (a || l) {\n                let c = new Error(\"INVALID_DOTENV_KEY: It must be 64 characters long (or more)\");\n                throw c.code = \"INVALID_DOTENV_KEY\", c;\n            } else if (u) {\n                let c = new Error(\"DECRYPTION_FAILED: Please check your DOTENV_KEY\");\n                throw c.code = \"DECRYPTION_FAILED\", c;\n            } else throw s;\n        }\n    }\n    function fp(e, r, t = {}) {\n        let n = !!(t && t.debug), i = !!(t && t.override);\n        if (typeof r != \"object\") {\n            let o = new Error(\"OBJECT_REQUIRED: Please check the processEnv argument being passed to populate\");\n            throw o.code = \"OBJECT_REQUIRED\", o;\n        }\n        for (let o of Object.keys(r))Object.prototype.hasOwnProperty.call(e, o) ? (i === !0 && (e[o] = r[o]), n && it(i === !0 ? `\"${o}\" is already defined and WAS overwritten` : `\"${o}\" is already defined and was NOT overwritten`)) : e[o] = r[o];\n    }\n    var B = {\n        configDotenv: pp,\n        _configVault: cp,\n        _parseVault: ap,\n        config: dp,\n        decrypt: mp,\n        parse: sp,\n        populate: fp\n    };\n    Ne.exports.configDotenv = B.configDotenv;\n    Ne.exports._configVault = B._configVault;\n    Ne.exports._parseVault = B._parseVault;\n    Ne.exports.config = B.config;\n    Ne.exports.decrypt = B.decrypt;\n    Ne.exports.parse = B.parse;\n    Ne.exports.populate = B.populate;\n    Ne.exports = B;\n});\nvar Ls = ne((_h, an)=>{\n    \"use strict\";\n    an.exports = (e = {})=>{\n        let r;\n        if (e.repoUrl) r = e.repoUrl;\n        else if (e.user && e.repo) r = `https://github.com/${e.user}/${e.repo}`;\n        else throw new Error(\"You need to specify either the `repoUrl` option or both the `user` and `repo` options\");\n        let t = new URL(`${r}/issues/new`), n = [\n            \"body\",\n            \"title\",\n            \"labels\",\n            \"template\",\n            \"milestone\",\n            \"assignee\",\n            \"projects\"\n        ];\n        for (let i of n){\n            let o = e[i];\n            if (o !== void 0) {\n                if (i === \"labels\" || i === \"projects\") {\n                    if (!Array.isArray(o)) throw new TypeError(`The \\`${i}\\` option should be an array`);\n                    o = o.join(\",\");\n                }\n                t.searchParams.set(i, o);\n            }\n        }\n        return t.toString();\n    };\n    an.exports.default = an.exports;\n});\nvar Qi = ne((cb, ia)=>{\n    \"use strict\";\n    ia.exports = function() {\n        function e(r, t, n, i, o) {\n            return r < t || n < t ? r > n ? n + 1 : r + 1 : i === o ? t : t + 1;\n        }\n        return function(r, t) {\n            if (r === t) return 0;\n            if (r.length > t.length) {\n                var n = r;\n                r = t, t = n;\n            }\n            for(var i = r.length, o = t.length; i > 0 && r.charCodeAt(i - 1) === t.charCodeAt(o - 1);)i--, o--;\n            for(var s = 0; s < i && r.charCodeAt(s) === t.charCodeAt(s);)s++;\n            if (i -= s, o -= s, i === 0 || o < 3) return o;\n            var a = 0, l, u, c, p, d, f, g, h, I, v, S, b, O = [];\n            for(l = 0; l < i; l++)O.push(l + 1), O.push(r.charCodeAt(s + l));\n            for(var me = O.length - 1; a < o - 3;)for(I = t.charCodeAt(s + (u = a)), v = t.charCodeAt(s + (c = a + 1)), S = t.charCodeAt(s + (p = a + 2)), b = t.charCodeAt(s + (d = a + 3)), f = a += 4, l = 0; l < me; l += 2)g = O[l], h = O[l + 1], u = e(g, u, c, I, h), c = e(u, c, p, v, h), p = e(c, p, d, S, h), f = e(p, d, f, b, h), O[l] = f, d = p, p = c, c = u, u = g;\n            for(; a < o;)for(I = t.charCodeAt(s + (u = a)), f = ++a, l = 0; l < me; l += 2)g = O[l], O[l] = f = e(g, u, f, I, O[l + 1]), u = g;\n            return f;\n        };\n    }();\n});\nvar ua = Do(()=>{\n    \"use strict\";\n});\nvar ca = Do(()=>{\n    \"use strict\";\n});\nvar Vf = {};\ntr(Vf, {\n    DMMF: ()=>ut,\n    Debug: ()=>N,\n    Decimal: ()=>Pe,\n    Extensions: ()=>ri,\n    MetricsClient: ()=>Lr,\n    PrismaClientInitializationError: ()=>T,\n    PrismaClientKnownRequestError: ()=>z,\n    PrismaClientRustPanicError: ()=>le,\n    PrismaClientUnknownRequestError: ()=>j,\n    PrismaClientValidationError: ()=>Z,\n    Public: ()=>ti,\n    Sql: ()=>oe,\n    createParam: ()=>Ra,\n    defineDmmfProperty: ()=>Da,\n    deserializeJsonResponse: ()=>Tr,\n    deserializeRawResult: ()=>zn,\n    dmmfToRuntimeDataModel: ()=>Zs,\n    empty: ()=>La,\n    getPrismaClient: ()=>gu,\n    getRuntime: ()=>Vn,\n    join: ()=>Na,\n    makeStrictEnum: ()=>hu,\n    makeTypedQueryFactory: ()=>_a,\n    objectEnumValues: ()=>Cn,\n    raw: ()=>eo,\n    serializeJsonQuery: ()=>Nn,\n    skip: ()=>_n,\n    sqltag: ()=>ro,\n    warnEnvConflicts: ()=>yu,\n    warnOnce: ()=>st\n});\nmodule.exports = vu(Vf);\nvar ri = {};\ntr(ri, {\n    defineExtension: ()=>No,\n    getExtensionContext: ()=>Lo\n});\nfunction No(e) {\n    return typeof e == \"function\" ? e : (r)=>r.$extends(e);\n}\nfunction Lo(e) {\n    return e;\n}\nvar ti = {};\ntr(ti, {\n    validator: ()=>Fo\n});\nfunction Fo(...e) {\n    return (r)=>r;\n}\nvar Bt = {};\ntr(Bt, {\n    $: ()=>Vo,\n    bgBlack: ()=>_u,\n    bgBlue: ()=>Mu,\n    bgCyan: ()=>qu,\n    bgGreen: ()=>Lu,\n    bgMagenta: ()=>$u,\n    bgRed: ()=>Nu,\n    bgWhite: ()=>ju,\n    bgYellow: ()=>Fu,\n    black: ()=>Iu,\n    blue: ()=>nr,\n    bold: ()=>W,\n    cyan: ()=>Oe,\n    dim: ()=>Ie,\n    gray: ()=>Hr,\n    green: ()=>qe,\n    grey: ()=>Du,\n    hidden: ()=>Cu,\n    inverse: ()=>Ru,\n    italic: ()=>Su,\n    magenta: ()=>ku,\n    red: ()=>ce,\n    reset: ()=>Tu,\n    strikethrough: ()=>Au,\n    underline: ()=>Y,\n    white: ()=>Ou,\n    yellow: ()=>ke\n});\nvar ni, Mo, $o, qo, jo = !0;\ntypeof process < \"u\" && ({ FORCE_COLOR: ni, NODE_DISABLE_COLORS: Mo, NO_COLOR: $o, TERM: qo } = process.env || {}, jo = process.stdout && process.stdout.isTTY);\nvar Vo = {\n    enabled: !Mo && $o == null && qo !== \"dumb\" && (ni != null && ni !== \"0\" || jo)\n};\nfunction F(e, r) {\n    let t = new RegExp(`\\\\x1b\\\\[${r}m`, \"g\"), n = `\\x1B[${e}m`, i = `\\x1B[${r}m`;\n    return function(o) {\n        return !Vo.enabled || o == null ? o : n + (~(\"\" + o).indexOf(i) ? o.replace(t, i + n) : o) + i;\n    };\n}\nvar Tu = F(0, 0), W = F(1, 22), Ie = F(2, 22), Su = F(3, 23), Y = F(4, 24), Ru = F(7, 27), Cu = F(8, 28), Au = F(9, 29), Iu = F(30, 39), ce = F(31, 39), qe = F(32, 39), ke = F(33, 39), nr = F(34, 39), ku = F(35, 39), Oe = F(36, 39), Ou = F(37, 39), Hr = F(90, 39), Du = F(90, 39), _u = F(40, 49), Nu = F(41, 49), Lu = F(42, 49), Fu = F(43, 49), Mu = F(44, 49), $u = F(45, 49), qu = F(46, 49), ju = F(47, 49);\nvar Vu = 100, Bo = [\n    \"green\",\n    \"yellow\",\n    \"blue\",\n    \"magenta\",\n    \"cyan\",\n    \"red\"\n], Kr = [], Uo = Date.now(), Bu = 0, ii = typeof process < \"u\" ? process.env : {};\nglobalThis.DEBUG ??= ii.DEBUG ?? \"\";\nglobalThis.DEBUG_COLORS ??= ii.DEBUG_COLORS ? ii.DEBUG_COLORS === \"true\" : !0;\nvar Yr = {\n    enable (e) {\n        typeof e == \"string\" && (globalThis.DEBUG = e);\n    },\n    disable () {\n        let e = globalThis.DEBUG;\n        return globalThis.DEBUG = \"\", e;\n    },\n    enabled (e) {\n        let r = globalThis.DEBUG.split(\",\").map((i)=>i.replace(/[.+?^${}()|[\\]\\\\]/g, \"\\\\$&\")), t = r.some((i)=>i === \"\" || i[0] === \"-\" ? !1 : e.match(RegExp(i.split(\"*\").join(\".*\") + \"$\"))), n = r.some((i)=>i === \"\" || i[0] !== \"-\" ? !1 : e.match(RegExp(i.slice(1).split(\"*\").join(\".*\") + \"$\")));\n        return t && !n;\n    },\n    log: (...e)=>{\n        let [r, t, ...n] = e;\n        (console.warn ?? console.log)(`${r} ${t}`, ...n);\n    },\n    formatters: {}\n};\nfunction Uu(e) {\n    let r = {\n        color: Bo[Bu++ % Bo.length],\n        enabled: Yr.enabled(e),\n        namespace: e,\n        log: Yr.log,\n        extend: ()=>{}\n    }, t = (...n)=>{\n        let { enabled: i, namespace: o, color: s, log: a } = r;\n        if (n.length !== 0 && Kr.push([\n            o,\n            ...n\n        ]), Kr.length > Vu && Kr.shift(), Yr.enabled(o) || i) {\n            let l = n.map((c)=>typeof c == \"string\" ? c : Gu(c)), u = `+${Date.now() - Uo}ms`;\n            Uo = Date.now(), globalThis.DEBUG_COLORS ? a(Bt[s](W(o)), ...l, Bt[s](u)) : a(o, ...l, u);\n        }\n    };\n    return new Proxy(t, {\n        get: (n, i)=>r[i],\n        set: (n, i, o)=>r[i] = o\n    });\n}\nvar N = new Proxy(Uu, {\n    get: (e, r)=>Yr[r],\n    set: (e, r, t)=>Yr[r] = t\n});\nfunction Gu(e, r = 2) {\n    let t = new Set;\n    return JSON.stringify(e, (n, i)=>{\n        if (typeof i == \"object\" && i !== null) {\n            if (t.has(i)) return \"[Circular *]\";\n            t.add(i);\n        } else if (typeof i == \"bigint\") return i.toString();\n        return i;\n    }, r);\n}\nfunction Go(e = 7500) {\n    let r = Kr.map(([t, ...n])=>`${t} ${n.map((i)=>typeof i == \"string\" ? i : JSON.stringify(i)).join(\" \")}`).join(`\n`);\n    return r.length < e ? r : r.slice(-e);\n}\nfunction Qo() {\n    Kr.length = 0;\n}\nvar gr = N;\nvar Wo = k(__webpack_require__(/*! node:fs */ \"node:fs\"));\nfunction oi() {\n    let e = process.env.PRISMA_QUERY_ENGINE_LIBRARY;\n    if (!(e && Wo.default.existsSync(e)) && process.arch === \"ia32\") throw new Error('The default query engine type (Node-API, \"library\") is currently not supported for 32bit Node. Please set `engineType = \"binary\"` in the \"generator\" block of your \"schema.prisma\" file (or use the environment variables \"PRISMA_CLIENT_ENGINE_TYPE=binary\" and/or \"PRISMA_CLI_QUERY_ENGINE_TYPE=binary\".)');\n}\nvar si = [\n    \"darwin\",\n    \"darwin-arm64\",\n    \"debian-openssl-1.0.x\",\n    \"debian-openssl-1.1.x\",\n    \"debian-openssl-3.0.x\",\n    \"rhel-openssl-1.0.x\",\n    \"rhel-openssl-1.1.x\",\n    \"rhel-openssl-3.0.x\",\n    \"linux-arm64-openssl-1.1.x\",\n    \"linux-arm64-openssl-1.0.x\",\n    \"linux-arm64-openssl-3.0.x\",\n    \"linux-arm-openssl-1.1.x\",\n    \"linux-arm-openssl-1.0.x\",\n    \"linux-arm-openssl-3.0.x\",\n    \"linux-musl\",\n    \"linux-musl-openssl-3.0.x\",\n    \"linux-musl-arm64-openssl-1.1.x\",\n    \"linux-musl-arm64-openssl-3.0.x\",\n    \"linux-nixos\",\n    \"linux-static-x64\",\n    \"linux-static-arm64\",\n    \"windows\",\n    \"freebsd11\",\n    \"freebsd12\",\n    \"freebsd13\",\n    \"freebsd14\",\n    \"freebsd15\",\n    \"openbsd\",\n    \"netbsd\",\n    \"arm\"\n];\nvar Ut = \"libquery_engine\";\nfunction Gt(e, r) {\n    let t = r === \"url\";\n    return e.includes(\"windows\") ? t ? \"query_engine.dll.node\" : `query_engine-${e}.dll.node` : e.includes(\"darwin\") ? t ? `${Ut}.dylib.node` : `${Ut}-${e}.dylib.node` : t ? `${Ut}.so.node` : `${Ut}-${e}.so.node`;\n}\nvar Yo = k(__webpack_require__(/*! node:child_process */ \"node:child_process\")), pi = k(__webpack_require__(/*! node:fs/promises */ \"node:fs/promises\")), Kt = k(__webpack_require__(/*! node:os */ \"node:os\"));\nvar De = Symbol.for(\"@ts-pattern/matcher\"), Qu = Symbol.for(\"@ts-pattern/isVariadic\"), Wt = \"@ts-pattern/anonymous-select-key\", ai = (e)=>!!(e && typeof e == \"object\"), Qt = (e)=>e && !!e[De], Ee = (e, r, t)=>{\n    if (Qt(e)) {\n        let n = e[De](), { matched: i, selections: o } = n.match(r);\n        return i && o && Object.keys(o).forEach((s)=>t(s, o[s])), i;\n    }\n    if (ai(e)) {\n        if (!ai(r)) return !1;\n        if (Array.isArray(e)) {\n            if (!Array.isArray(r)) return !1;\n            let n = [], i = [], o = [];\n            for (let s of e.keys()){\n                let a = e[s];\n                Qt(a) && a[Qu] ? o.push(a) : o.length ? i.push(a) : n.push(a);\n            }\n            if (o.length) {\n                if (o.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (r.length < n.length + i.length) return !1;\n                let s = r.slice(0, n.length), a = i.length === 0 ? [] : r.slice(-i.length), l = r.slice(n.length, i.length === 0 ? 1 / 0 : -i.length);\n                return n.every((u, c)=>Ee(u, s[c], t)) && i.every((u, c)=>Ee(u, a[c], t)) && (o.length === 0 || Ee(o[0], l, t));\n            }\n            return e.length === r.length && e.every((s, a)=>Ee(s, r[a], t));\n        }\n        return Reflect.ownKeys(e).every((n)=>{\n            let i = e[n];\n            return (n in r || Qt(o = i) && o[De]().matcherType === \"optional\") && Ee(i, r[n], t);\n            var o;\n        });\n    }\n    return Object.is(r, e);\n}, Ge = (e)=>{\n    var r, t, n;\n    return ai(e) ? Qt(e) ? (r = (t = (n = e[De]()).getSelectionKeys) == null ? void 0 : t.call(n)) != null ? r : [] : Array.isArray(e) ? zr(e, Ge) : zr(Object.values(e), Ge) : [];\n}, zr = (e, r)=>e.reduce((t, n)=>t.concat(r(n)), []);\nfunction pe(e) {\n    return Object.assign(e, {\n        optional: ()=>Wu(e),\n        and: (r)=>q(e, r),\n        or: (r)=>Ju(e, r),\n        select: (r)=>r === void 0 ? Jo(e) : Jo(r, e)\n    });\n}\nfunction Wu(e) {\n    return pe({\n        [De]: ()=>({\n                match: (r)=>{\n                    let t = {}, n = (i, o)=>{\n                        t[i] = o;\n                    };\n                    return r === void 0 ? (Ge(e).forEach((i)=>n(i, void 0)), {\n                        matched: !0,\n                        selections: t\n                    }) : {\n                        matched: Ee(e, r, n),\n                        selections: t\n                    };\n                },\n                getSelectionKeys: ()=>Ge(e),\n                matcherType: \"optional\"\n            })\n    });\n}\nfunction q(...e) {\n    return pe({\n        [De]: ()=>({\n                match: (r)=>{\n                    let t = {}, n = (i, o)=>{\n                        t[i] = o;\n                    };\n                    return {\n                        matched: e.every((i)=>Ee(i, r, n)),\n                        selections: t\n                    };\n                },\n                getSelectionKeys: ()=>zr(e, Ge),\n                matcherType: \"and\"\n            })\n    });\n}\nfunction Ju(...e) {\n    return pe({\n        [De]: ()=>({\n                match: (r)=>{\n                    let t = {}, n = (i, o)=>{\n                        t[i] = o;\n                    };\n                    return zr(e, Ge).forEach((i)=>n(i, void 0)), {\n                        matched: e.some((i)=>Ee(i, r, n)),\n                        selections: t\n                    };\n                },\n                getSelectionKeys: ()=>zr(e, Ge),\n                matcherType: \"or\"\n            })\n    });\n}\nfunction C(e) {\n    return {\n        [De]: ()=>({\n                match: (r)=>({\n                        matched: !!e(r)\n                    })\n            })\n    };\n}\nfunction Jo(...e) {\n    let r = typeof e[0] == \"string\" ? e[0] : void 0, t = e.length === 2 ? e[1] : typeof e[0] == \"string\" ? void 0 : e[0];\n    return pe({\n        [De]: ()=>({\n                match: (n)=>{\n                    let i = {\n                        [r ?? Wt]: n\n                    };\n                    return {\n                        matched: t === void 0 || Ee(t, n, (o, s)=>{\n                            i[o] = s;\n                        }),\n                        selections: i\n                    };\n                },\n                getSelectionKeys: ()=>[\n                        r ?? Wt\n                    ].concat(t === void 0 ? [] : Ge(t))\n            })\n    });\n}\nfunction ye(e) {\n    return typeof e == \"number\";\n}\nfunction je(e) {\n    return typeof e == \"string\";\n}\nfunction Ve(e) {\n    return typeof e == \"bigint\";\n}\nvar eg = pe(C(function(e) {\n    return !0;\n}));\nvar Be = (e)=>Object.assign(pe(e), {\n        startsWith: (r)=>{\n            return Be(q(e, (t = r, C((n)=>je(n) && n.startsWith(t)))));\n            var t;\n        },\n        endsWith: (r)=>{\n            return Be(q(e, (t = r, C((n)=>je(n) && n.endsWith(t)))));\n            var t;\n        },\n        minLength: (r)=>Be(q(e, ((t)=>C((n)=>je(n) && n.length >= t))(r))),\n        length: (r)=>Be(q(e, ((t)=>C((n)=>je(n) && n.length === t))(r))),\n        maxLength: (r)=>Be(q(e, ((t)=>C((n)=>je(n) && n.length <= t))(r))),\n        includes: (r)=>{\n            return Be(q(e, (t = r, C((n)=>je(n) && n.includes(t)))));\n            var t;\n        },\n        regex: (r)=>{\n            return Be(q(e, (t = r, C((n)=>je(n) && !!n.match(t)))));\n            var t;\n        }\n    }), rg = Be(C(je)), be = (e)=>Object.assign(pe(e), {\n        between: (r, t)=>be(q(e, ((n, i)=>C((o)=>ye(o) && n <= o && i >= o))(r, t))),\n        lt: (r)=>be(q(e, ((t)=>C((n)=>ye(n) && n < t))(r))),\n        gt: (r)=>be(q(e, ((t)=>C((n)=>ye(n) && n > t))(r))),\n        lte: (r)=>be(q(e, ((t)=>C((n)=>ye(n) && n <= t))(r))),\n        gte: (r)=>be(q(e, ((t)=>C((n)=>ye(n) && n >= t))(r))),\n        int: ()=>be(q(e, C((r)=>ye(r) && Number.isInteger(r)))),\n        finite: ()=>be(q(e, C((r)=>ye(r) && Number.isFinite(r)))),\n        positive: ()=>be(q(e, C((r)=>ye(r) && r > 0))),\n        negative: ()=>be(q(e, C((r)=>ye(r) && r < 0)))\n    }), tg = be(C(ye)), Ue = (e)=>Object.assign(pe(e), {\n        between: (r, t)=>Ue(q(e, ((n, i)=>C((o)=>Ve(o) && n <= o && i >= o))(r, t))),\n        lt: (r)=>Ue(q(e, ((t)=>C((n)=>Ve(n) && n < t))(r))),\n        gt: (r)=>Ue(q(e, ((t)=>C((n)=>Ve(n) && n > t))(r))),\n        lte: (r)=>Ue(q(e, ((t)=>C((n)=>Ve(n) && n <= t))(r))),\n        gte: (r)=>Ue(q(e, ((t)=>C((n)=>Ve(n) && n >= t))(r))),\n        positive: ()=>Ue(q(e, C((r)=>Ve(r) && r > 0))),\n        negative: ()=>Ue(q(e, C((r)=>Ve(r) && r < 0)))\n    }), ng = Ue(C(Ve)), ig = pe(C(function(e) {\n    return typeof e == \"boolean\";\n})), og = pe(C(function(e) {\n    return typeof e == \"symbol\";\n})), sg = pe(C(function(e) {\n    return e == null;\n})), ag = pe(C(function(e) {\n    return e != null;\n}));\nvar li = class extends Error {\n    constructor(r){\n        let t;\n        try {\n            t = JSON.stringify(r);\n        } catch  {\n            t = r;\n        }\n        super(`Pattern matching error: no pattern matches value ${t}`), this.input = void 0, this.input = r;\n    }\n}, ui = {\n    matched: !1,\n    value: void 0\n};\nfunction hr(e) {\n    return new ci(e, ui);\n}\nvar ci = class e {\n    constructor(r, t){\n        this.input = void 0, this.state = void 0, this.input = r, this.state = t;\n    }\n    with(...r) {\n        if (this.state.matched) return this;\n        let t = r[r.length - 1], n = [\n            r[0]\n        ], i;\n        r.length === 3 && typeof r[1] == \"function\" ? i = r[1] : r.length > 2 && n.push(...r.slice(1, r.length - 1));\n        let o = !1, s = {}, a = (u, c)=>{\n            o = !0, s[u] = c;\n        }, l = !n.some((u)=>Ee(u, this.input, a)) || i && !i(this.input) ? ui : {\n            matched: !0,\n            value: t(o ? Wt in s ? s[Wt] : s : this.input, this.input)\n        };\n        return new e(this.input, l);\n    }\n    when(r, t) {\n        if (this.state.matched) return this;\n        let n = !!r(this.input);\n        return new e(this.input, n ? {\n            matched: !0,\n            value: t(this.input, this.input)\n        } : ui);\n    }\n    otherwise(r) {\n        return this.state.matched ? this.state.value : r(this.input);\n    }\n    exhaustive() {\n        if (this.state.matched) return this.state.value;\n        throw new li(this.input);\n    }\n    run() {\n        return this.exhaustive();\n    }\n    returnType() {\n        return this;\n    }\n};\nvar zo = __webpack_require__(/*! node:util */ \"node:util\");\nvar Hu = {\n    warn: ke(\"prisma:warn\")\n}, Ku = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction Jt(e, ...r) {\n    Ku.warn() && console.warn(`${Hu.warn} ${e}`, ...r);\n}\nvar Yu = (0, zo.promisify)(Yo.default.exec), ee = gr(\"prisma:get-platform\"), zu = [\n    \"1.0.x\",\n    \"1.1.x\",\n    \"3.0.x\"\n];\nasync function Zo() {\n    let e = Kt.default.platform(), r = process.arch;\n    if (e === \"freebsd\") {\n        let s = await Yt(\"freebsd-version\");\n        if (s && s.trim().length > 0) {\n            let l = /^(\\d+)\\.?/.exec(s);\n            if (l) return {\n                platform: \"freebsd\",\n                targetDistro: `freebsd${l[1]}`,\n                arch: r\n            };\n        }\n    }\n    if (e !== \"linux\") return {\n        platform: e,\n        arch: r\n    };\n    let t = await Xu(), n = await ac(), i = rc({\n        arch: r,\n        archFromUname: n,\n        familyDistro: t.familyDistro\n    }), { libssl: o } = await tc(i);\n    return {\n        platform: \"linux\",\n        libssl: o,\n        arch: r,\n        archFromUname: n,\n        ...t\n    };\n}\nfunction Zu(e) {\n    let r = /^ID=\"?([^\"\\n]*)\"?$/im, t = /^ID_LIKE=\"?([^\"\\n]*)\"?$/im, n = r.exec(e), i = n && n[1] && n[1].toLowerCase() || \"\", o = t.exec(e), s = o && o[1] && o[1].toLowerCase() || \"\", a = hr({\n        id: i,\n        idLike: s\n    }).with({\n        id: \"alpine\"\n    }, ({ id: l })=>({\n            targetDistro: \"musl\",\n            familyDistro: l,\n            originalDistro: l\n        })).with({\n        id: \"raspbian\"\n    }, ({ id: l })=>({\n            targetDistro: \"arm\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"nixos\"\n    }, ({ id: l })=>({\n            targetDistro: \"nixos\",\n            originalDistro: l,\n            familyDistro: \"nixos\"\n        })).with({\n        id: \"debian\"\n    }, {\n        id: \"ubuntu\"\n    }, ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"rhel\"\n    }, {\n        id: \"centos\"\n    }, {\n        id: \"fedora\"\n    }, ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"debian\") || l.includes(\"ubuntu\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).when(({ idLike: l })=>i === \"arch\" || l.includes(\"arch\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"arch\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"centos\") || l.includes(\"fedora\") || l.includes(\"rhel\") || l.includes(\"suse\"), ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).otherwise(({ id: l })=>({\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: l\n        }));\n    return ee(`Found distro info:\n${JSON.stringify(a, null, 2)}`), a;\n}\nasync function Xu() {\n    let e = \"/etc/os-release\";\n    try {\n        let r = await pi.default.readFile(e, {\n            encoding: \"utf-8\"\n        });\n        return Zu(r);\n    } catch  {\n        return {\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: void 0\n        };\n    }\n}\nfunction ec(e) {\n    let r = /^OpenSSL\\s(\\d+\\.\\d+)\\.\\d+/.exec(e);\n    if (r) {\n        let t = `${r[1]}.x`;\n        return Xo(t);\n    }\n}\nfunction Ho(e) {\n    let r = /libssl\\.so\\.(\\d)(\\.\\d)?/.exec(e);\n    if (r) {\n        let t = `${r[1]}${r[2] ?? \".0\"}.x`;\n        return Xo(t);\n    }\n}\nfunction Xo(e) {\n    let r = (()=>{\n        if (rs(e)) return e;\n        let t = e.split(\".\");\n        return t[1] = \"0\", t.join(\".\");\n    })();\n    if (zu.includes(r)) return r;\n}\nfunction rc(e) {\n    return hr(e).with({\n        familyDistro: \"musl\"\n    }, ()=>(ee('Trying platform-specific paths for \"alpine\"'), [\n            \"/lib\",\n            \"/usr/lib\"\n        ])).with({\n        familyDistro: \"debian\"\n    }, ({ archFromUname: r })=>(ee('Trying platform-specific paths for \"debian\" (and \"ubuntu\")'), [\n            `/usr/lib/${r}-linux-gnu`,\n            `/lib/${r}-linux-gnu`\n        ])).with({\n        familyDistro: \"rhel\"\n    }, ()=>(ee('Trying platform-specific paths for \"rhel\"'), [\n            \"/lib64\",\n            \"/usr/lib64\"\n        ])).otherwise(({ familyDistro: r, arch: t, archFromUname: n })=>(ee(`Don't know any platform-specific paths for \"${r}\" on ${t} (${n})`), []));\n}\nasync function tc(e) {\n    let r = 'grep -v \"libssl.so.0\"', t = await Ko(e);\n    if (t) {\n        ee(`Found libssl.so file using platform-specific paths: ${t}`);\n        let o = Ho(t);\n        if (ee(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"libssl-specific-path\"\n        };\n    }\n    ee('Falling back to \"ldconfig\" and other generic paths');\n    let n = await Yt(`ldconfig -p | sed \"s/.*=>s*//\" | sed \"s|.*/||\" | grep libssl | sort | ${r}`);\n    if (n || (n = await Ko([\n        \"/lib64\",\n        \"/usr/lib64\",\n        \"/lib\",\n        \"/usr/lib\"\n    ])), n) {\n        ee(`Found libssl.so file using \"ldconfig\" or other generic paths: ${n}`);\n        let o = Ho(n);\n        if (ee(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"ldconfig\"\n        };\n    }\n    let i = await Yt(\"openssl version -v\");\n    if (i) {\n        ee(`Found openssl binary with version: ${i}`);\n        let o = ec(i);\n        if (ee(`The parsed openssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"openssl-binary\"\n        };\n    }\n    return ee(\"Couldn't find any version of libssl or OpenSSL in the system\"), {};\n}\nasync function Ko(e) {\n    for (let r of e){\n        let t = await nc(r);\n        if (t) return t;\n    }\n}\nasync function nc(e) {\n    try {\n        return (await pi.default.readdir(e)).find((t)=>t.startsWith(\"libssl.so.\") && !t.startsWith(\"libssl.so.0\"));\n    } catch (r) {\n        if (r.code === \"ENOENT\") return;\n        throw r;\n    }\n}\nasync function ir() {\n    let { binaryTarget: e } = await es();\n    return e;\n}\nfunction ic(e) {\n    return e.binaryTarget !== void 0;\n}\nasync function di() {\n    let { memoized: e, ...r } = await es();\n    return r;\n}\nvar Ht = {};\nasync function es() {\n    if (ic(Ht)) return Promise.resolve({\n        ...Ht,\n        memoized: !0\n    });\n    let e = await Zo(), r = oc(e);\n    return Ht = {\n        ...e,\n        binaryTarget: r\n    }, {\n        ...Ht,\n        memoized: !1\n    };\n}\nfunction oc(e) {\n    let { platform: r, arch: t, archFromUname: n, libssl: i, targetDistro: o, familyDistro: s, originalDistro: a } = e;\n    r === \"linux\" && ![\n        \"x64\",\n        \"arm64\"\n    ].includes(t) && Jt(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures (detected \"${t}\" instead). If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture \"${n}\".`);\n    let l = \"1.1.x\";\n    if (r === \"linux\" && i === void 0) {\n        let c = hr({\n            familyDistro: s\n        }).with({\n            familyDistro: \"debian\"\n        }, ()=>\"Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.\").otherwise(()=>\"Please manually install OpenSSL and try installing Prisma again.\");\n        Jt(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to \"openssl-${l}\".\n${c}`);\n    }\n    let u = \"debian\";\n    if (r === \"linux\" && o === void 0 && ee(`Distro is \"${a}\". Falling back to Prisma engines built for \"${u}\".`), r === \"darwin\" && t === \"arm64\") return \"darwin-arm64\";\n    if (r === \"darwin\") return \"darwin\";\n    if (r === \"win32\") return \"windows\";\n    if (r === \"freebsd\") return o;\n    if (r === \"openbsd\") return \"openbsd\";\n    if (r === \"netbsd\") return \"netbsd\";\n    if (r === \"linux\" && o === \"nixos\") return \"linux-nixos\";\n    if (r === \"linux\" && t === \"arm64\") return `${o === \"musl\" ? \"linux-musl-arm64\" : \"linux-arm64\"}-openssl-${i || l}`;\n    if (r === \"linux\" && t === \"arm\") return `linux-arm-openssl-${i || l}`;\n    if (r === \"linux\" && o === \"musl\") {\n        let c = \"linux-musl\";\n        return !i || rs(i) ? c : `${c}-openssl-${i}`;\n    }\n    return r === \"linux\" && o && i ? `${o}-openssl-${i}` : (r !== \"linux\" && Jt(`Prisma detected unknown OS \"${r}\" and may not work as expected. Defaulting to \"linux\".`), i ? `${u}-openssl-${i}` : o ? `${o}-openssl-${l}` : `${u}-openssl-${l}`);\n}\nasync function sc(e) {\n    try {\n        return await e();\n    } catch  {\n        return;\n    }\n}\nfunction Yt(e) {\n    return sc(async ()=>{\n        let r = await Yu(e);\n        return ee(`Command \"${e}\" successfully returned \"${r.stdout}\"`), r.stdout;\n    });\n}\nasync function ac() {\n    return typeof Kt.default.machine == \"function\" ? Kt.default.machine() : (await Yt(\"uname -m\"))?.trim();\n}\nfunction rs(e) {\n    return e.startsWith(\"1.\");\n}\nvar Xt = {};\ntr(Xt, {\n    beep: ()=>_c,\n    clearScreen: ()=>Ic,\n    clearTerminal: ()=>kc,\n    cursorBackward: ()=>fc,\n    cursorDown: ()=>dc,\n    cursorForward: ()=>mc,\n    cursorGetPosition: ()=>yc,\n    cursorHide: ()=>wc,\n    cursorLeft: ()=>is,\n    cursorMove: ()=>pc,\n    cursorNextLine: ()=>bc,\n    cursorPrevLine: ()=>Ec,\n    cursorRestorePosition: ()=>hc,\n    cursorSavePosition: ()=>gc,\n    cursorShow: ()=>xc,\n    cursorTo: ()=>cc,\n    cursorUp: ()=>ns,\n    enterAlternativeScreen: ()=>Oc,\n    eraseDown: ()=>Sc,\n    eraseEndLine: ()=>vc,\n    eraseLine: ()=>os,\n    eraseLines: ()=>Pc,\n    eraseScreen: ()=>mi,\n    eraseStartLine: ()=>Tc,\n    eraseUp: ()=>Rc,\n    exitAlternativeScreen: ()=>Dc,\n    iTerm: ()=>Fc,\n    image: ()=>Lc,\n    link: ()=>Nc,\n    scrollDown: ()=>Ac,\n    scrollUp: ()=>Cc\n});\nvar Zt = k(__webpack_require__(/*! node:process */ \"node:process\"), 1);\nvar zt = globalThis.window?.document !== void 0, gg = globalThis.process?.versions?.node !== void 0, hg = globalThis.process?.versions?.bun !== void 0, yg = globalThis.Deno?.version?.deno !== void 0, bg = globalThis.process?.versions?.electron !== void 0, Eg = globalThis.navigator?.userAgent?.includes(\"jsdom\") === !0, wg = typeof WorkerGlobalScope < \"u\" && globalThis instanceof WorkerGlobalScope, xg = typeof DedicatedWorkerGlobalScope < \"u\" && globalThis instanceof DedicatedWorkerGlobalScope, Pg = typeof SharedWorkerGlobalScope < \"u\" && globalThis instanceof SharedWorkerGlobalScope, vg = typeof ServiceWorkerGlobalScope < \"u\" && globalThis instanceof ServiceWorkerGlobalScope, Zr = globalThis.navigator?.userAgentData?.platform, Tg = Zr === \"macOS\" || globalThis.navigator?.platform === \"MacIntel\" || globalThis.navigator?.userAgent?.includes(\" Mac \") === !0 || globalThis.process?.platform === \"darwin\", Sg = Zr === \"Windows\" || globalThis.navigator?.platform === \"Win32\" || globalThis.process?.platform === \"win32\", Rg = Zr === \"Linux\" || globalThis.navigator?.platform?.startsWith(\"Linux\") === !0 || globalThis.navigator?.userAgent?.includes(\" Linux \") === !0 || globalThis.process?.platform === \"linux\", Cg = Zr === \"iOS\" || globalThis.navigator?.platform === \"MacIntel\" && globalThis.navigator?.maxTouchPoints > 1 || /iPad|iPhone|iPod/.test(globalThis.navigator?.platform), Ag = Zr === \"Android\" || globalThis.navigator?.platform === \"Android\" || globalThis.navigator?.userAgent?.includes(\" Android \") === !0 || globalThis.process?.platform === \"android\";\nvar A = \"\\x1B[\", et = \"\\x1B]\", yr = \"\\x07\", Xr = \";\", ts = !zt && Zt.default.env.TERM_PROGRAM === \"Apple_Terminal\", lc = !zt && Zt.default.platform === \"win32\", uc = zt ? ()=>{\n    throw new Error(\"`process.cwd()` only works in Node.js, not the browser.\");\n} : Zt.default.cwd, cc = (e, r)=>{\n    if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n    return typeof r != \"number\" ? A + (e + 1) + \"G\" : A + (r + 1) + Xr + (e + 1) + \"H\";\n}, pc = (e, r)=>{\n    if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n    let t = \"\";\n    return e < 0 ? t += A + -e + \"D\" : e > 0 && (t += A + e + \"C\"), r < 0 ? t += A + -r + \"A\" : r > 0 && (t += A + r + \"B\"), t;\n}, ns = (e = 1)=>A + e + \"A\", dc = (e = 1)=>A + e + \"B\", mc = (e = 1)=>A + e + \"C\", fc = (e = 1)=>A + e + \"D\", is = A + \"G\", gc = ts ? \"\\x1B7\" : A + \"s\", hc = ts ? \"\\x1B8\" : A + \"u\", yc = A + \"6n\", bc = A + \"E\", Ec = A + \"F\", wc = A + \"?25l\", xc = A + \"?25h\", Pc = (e)=>{\n    let r = \"\";\n    for(let t = 0; t < e; t++)r += os + (t < e - 1 ? ns() : \"\");\n    return e && (r += is), r;\n}, vc = A + \"K\", Tc = A + \"1K\", os = A + \"2K\", Sc = A + \"J\", Rc = A + \"1J\", mi = A + \"2J\", Cc = A + \"S\", Ac = A + \"T\", Ic = \"\\x1Bc\", kc = lc ? `${mi}${A}0f` : `${mi}${A}3J${A}H`, Oc = A + \"?1049h\", Dc = A + \"?1049l\", _c = yr, Nc = (e, r)=>[\n        et,\n        \"8\",\n        Xr,\n        Xr,\n        r,\n        yr,\n        e,\n        et,\n        \"8\",\n        Xr,\n        Xr,\n        yr\n    ].join(\"\"), Lc = (e, r = {})=>{\n    let t = `${et}1337;File=inline=1`;\n    return r.width && (t += `;width=${r.width}`), r.height && (t += `;height=${r.height}`), r.preserveAspectRatio === !1 && (t += \";preserveAspectRatio=0\"), t + \":\" + Buffer.from(e).toString(\"base64\") + yr;\n}, Fc = {\n    setCwd: (e = uc())=>`${et}50;CurrentDir=${e}${yr}`,\n    annotation (e, r = {}) {\n        let t = `${et}1337;`, n = r.x !== void 0, i = r.y !== void 0;\n        if ((n || i) && !(n && i && r.length !== void 0)) throw new Error(\"`x`, `y` and `length` must be defined when `x` or `y` is defined\");\n        return e = e.replaceAll(\"|\", \"\"), t += r.isHidden ? \"AddHiddenAnnotation=\" : \"AddAnnotation=\", r.length > 0 ? t += (n ? [\n            e,\n            r.length,\n            r.x,\n            r.y\n        ] : [\n            r.length,\n            e\n        ]).join(\"|\") : t += e, t + yr;\n    }\n};\nvar en = k(ds(), 1);\nfunction or(e, r, { target: t = \"stdout\", ...n } = {}) {\n    return en.default[t] ? Xt.link(e, r) : n.fallback === !1 ? e : typeof n.fallback == \"function\" ? n.fallback(e, r) : `${e} (\\u200B${r}\\u200B)`;\n}\nor.isSupported = en.default.stdout;\nor.stderr = (e, r, t = {})=>or(e, r, {\n        target: \"stderr\",\n        ...t\n    });\nor.stderr.isSupported = en.default.stderr;\nfunction bi(e) {\n    return or(e, e, {\n        fallback: Y\n    });\n}\nvar Vc = ms(), Ei = Vc.version;\nfunction Er(e) {\n    let r = Bc();\n    return r || (e?.config.engineType === \"library\" ? \"library\" : e?.config.engineType === \"binary\" ? \"binary\" : e?.config.engineType === \"client\" ? \"client\" : Uc(e));\n}\nfunction Bc() {\n    let e = process.env.PRISMA_CLIENT_ENGINE_TYPE;\n    return e === \"library\" ? \"library\" : e === \"binary\" ? \"binary\" : e === \"client\" ? \"client\" : void 0;\n}\nfunction Uc(e) {\n    return e?.previewFeatures.includes(\"queryCompiler\") ? \"client\" : \"library\";\n}\nvar Qc = k(xi());\nvar M = k(__webpack_require__(/*! node:path */ \"node:path\")), Wc = k(xi()), sh = N(\"prisma:engines\");\nfunction fs() {\n    return M.default.join(__dirname, \"../\");\n}\nvar ah = \"libquery-engine\";\nM.default.join(__dirname, \"../query-engine-darwin\");\nM.default.join(__dirname, \"../query-engine-darwin-arm64\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-1.0.x\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-1.1.x\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-3.0.x\");\nM.default.join(__dirname, \"../query-engine-linux-static-x64\");\nM.default.join(__dirname, \"../query-engine-linux-static-arm64\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-1.0.x\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-1.1.x\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-3.0.x\");\nM.default.join(__dirname, \"../libquery_engine-darwin.dylib.node\");\nM.default.join(__dirname, \"../libquery_engine-darwin-arm64.dylib.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-musl.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-musl-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../query_engine-windows.dll.node\");\nvar Pi = k(__webpack_require__(/*! node:fs */ \"node:fs\")), gs = gr(\"chmodPlusX\");\nfunction vi(e) {\n    if (process.platform === \"win32\") return;\n    let r = Pi.default.statSync(e), t = r.mode | 64 | 8 | 1;\n    if (r.mode === t) {\n        gs(`Execution permissions of ${e} are fine`);\n        return;\n    }\n    let n = t.toString(8).slice(-3);\n    gs(`Have to call chmodPlusX on ${e}`), Pi.default.chmodSync(e, n);\n}\nfunction Ti(e) {\n    let r = e.e, t = (a)=>`Prisma cannot find the required \\`${a}\\` system library in your system`, n = r.message.includes(\"cannot open shared object file\"), i = `Please refer to the documentation about Prisma's system requirements: ${bi(\"https://pris.ly/d/system-requirements\")}`, o = `Unable to require(\\`${Ie(e.id)}\\`).`, s = hr({\n        message: r.message,\n        code: r.code\n    }).with({\n        code: \"ENOENT\"\n    }, ()=>\"File does not exist.\").when(({ message: a })=>n && a.includes(\"libz\"), ()=>`${t(\"libz\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libgcc_s\"), ()=>`${t(\"libgcc_s\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libssl\"), ()=>{\n        let a = e.platformInfo.libssl ? `openssl-${e.platformInfo.libssl}` : \"openssl\";\n        return `${t(\"libssl\")}. Please install ${a} and try again.`;\n    }).when(({ message: a })=>a.includes(\"GLIBC\"), ()=>`Prisma has detected an incompatible version of the \\`glibc\\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i}`).when(({ message: a })=>e.platformInfo.platform === \"linux\" && a.includes(\"symbol not found\"), ()=>`The Prisma engines are not compatible with your system ${e.platformInfo.originalDistro} on (${e.platformInfo.archFromUname}) which uses the \\`${e.platformInfo.binaryTarget}\\` binaryTarget by default. ${i}`).otherwise(()=>`The Prisma engines do not seem to be compatible with your system. ${i}`);\n    return `${o}\n${s}\n\nDetails: ${r.message}`;\n}\nvar bs = k(ys(), 1);\nfunction Si(e) {\n    let r = (0, bs.default)(e);\n    if (r === 0) return e;\n    let t = new RegExp(`^[ \\\\t]{${r}}`, \"gm\");\n    return e.replace(t, \"\");\n}\nvar Es = \"prisma+postgres\", tn = `${Es}:`;\nfunction nn(e) {\n    return e?.toString().startsWith(`${tn}//`) ?? !1;\n}\nfunction Ri(e) {\n    if (!nn(e)) return !1;\n    let { host: r } = new URL(e);\n    return r.includes(\"localhost\") || r.includes(\"127.0.0.1\");\n}\nvar xs = k(Ci());\nfunction Ii(e) {\n    return String(new Ai(e));\n}\nvar Ai = class {\n    constructor(r){\n        this.config = r;\n    }\n    toString() {\n        let { config: r } = this, t = r.provider.fromEnvVar ? `env(\"${r.provider.fromEnvVar}\")` : r.provider.value, n = JSON.parse(JSON.stringify({\n            provider: t,\n            binaryTargets: Jc(r.binaryTargets)\n        }));\n        return `generator ${r.name} {\n${(0, xs.default)(Hc(n), 2)}\n}`;\n    }\n};\nfunction Jc(e) {\n    let r;\n    if (e.length > 0) {\n        let t = e.find((n)=>n.fromEnvVar !== null);\n        t ? r = `env(\"${t.fromEnvVar}\")` : r = e.map((n)=>n.native ? \"native\" : n.value);\n    } else r = void 0;\n    return r;\n}\nfunction Hc(e) {\n    let r = Object.keys(e).reduce((t, n)=>Math.max(t, n.length), 0);\n    return Object.entries(e).map(([t, n])=>`${t.padEnd(r)} = ${Kc(n)}`).join(`\n`);\n}\nfunction Kc(e) {\n    return JSON.parse(JSON.stringify(e, (r, t)=>Array.isArray(t) ? `[${t.map((n)=>JSON.stringify(n)).join(\", \")}]` : JSON.stringify(t)));\n}\nvar tt = {};\ntr(tt, {\n    error: ()=>Zc,\n    info: ()=>zc,\n    log: ()=>Yc,\n    query: ()=>Xc,\n    should: ()=>Ps,\n    tags: ()=>rt,\n    warn: ()=>ki\n});\nvar rt = {\n    error: ce(\"prisma:error\"),\n    warn: ke(\"prisma:warn\"),\n    info: Oe(\"prisma:info\"),\n    query: nr(\"prisma:query\")\n}, Ps = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction Yc(...e) {\n    console.log(...e);\n}\nfunction ki(e, ...r) {\n    Ps.warn() && console.warn(`${rt.warn} ${e}`, ...r);\n}\nfunction zc(e, ...r) {\n    console.info(`${rt.info} ${e}`, ...r);\n}\nfunction Zc(e, ...r) {\n    console.error(`${rt.error} ${e}`, ...r);\n}\nfunction Xc(e, ...r) {\n    console.log(`${rt.query} ${e}`, ...r);\n}\nfunction on(e, r) {\n    if (!e) throw new Error(`${r}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`);\n}\nfunction _e(e, r) {\n    throw new Error(r);\n}\nvar nt = k(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction Di(e) {\n    return nt.default.sep === nt.default.posix.sep ? e : e.split(nt.default.sep).join(nt.default.posix.sep);\n}\nvar Fi = k(Os()), sn = k(__webpack_require__(/*! node:fs */ \"node:fs\"));\nvar wr = k(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction Ds(e) {\n    let r = e.ignoreProcessEnv ? {} : process.env, t = (n)=>n.match(/(.?\\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(o, s) {\n            let a = /(.?)\\${([a-zA-Z0-9_]+)?}/g.exec(s);\n            if (!a) return o;\n            let l = a[1], u, c;\n            if (l === \"\\\\\") c = a[0], u = c.replace(\"\\\\$\", \"$\");\n            else {\n                let p = a[2];\n                c = a[0].substring(l.length), u = Object.hasOwnProperty.call(r, p) ? r[p] : e.parsed[p] || \"\", u = t(u);\n            }\n            return o.replace(c, u);\n        }, n) ?? n;\n    for(let n in e.parsed){\n        let i = Object.hasOwnProperty.call(r, n) ? r[n] : e.parsed[n];\n        e.parsed[n] = t(i);\n    }\n    for(let n in e.parsed)r[n] = e.parsed[n];\n    return e;\n}\nvar Li = gr(\"prisma:tryLoadEnv\");\nfunction ot({ rootEnvPath: e, schemaEnvPath: r }, t = {\n    conflictCheck: \"none\"\n}) {\n    let n = _s(e);\n    t.conflictCheck !== \"none\" && gp(n, r, t.conflictCheck);\n    let i = null;\n    return Ns(n?.path, r) || (i = _s(r)), !n && !i && Li(\"No Environment variables loaded\"), i?.dotenvResult.error ? console.error(ce(W(\"Schema Env Error: \")) + i.dotenvResult.error) : {\n        message: [\n            n?.message,\n            i?.message\n        ].filter(Boolean).join(`\n`),\n        parsed: {\n            ...n?.dotenvResult?.parsed,\n            ...i?.dotenvResult?.parsed\n        }\n    };\n}\nfunction gp(e, r, t) {\n    let n = e?.dotenvResult.parsed, i = !Ns(e?.path, r);\n    if (n && r && i && sn.default.existsSync(r)) {\n        let o = Fi.default.parse(sn.default.readFileSync(r)), s = [];\n        for(let a in o)n[a] === o[a] && s.push(a);\n        if (s.length > 0) {\n            let a = wr.default.relative(process.cwd(), e.path), l = wr.default.relative(process.cwd(), r);\n            if (t === \"error\") {\n                let u = `There is a conflict between env var${s.length > 1 ? \"s\" : \"\"} in ${Y(a)} and ${Y(l)}\nConflicting env vars:\n${s.map((c)=>`  ${W(c)}`).join(`\n`)}\n\nWe suggest to move the contents of ${Y(l)} to ${Y(a)} to consolidate your env vars.\n`;\n                throw new Error(u);\n            } else if (t === \"warn\") {\n                let u = `Conflict for env var${s.length > 1 ? \"s\" : \"\"} ${s.map((c)=>W(c)).join(\", \")} in ${Y(a)} and ${Y(l)}\nEnv vars from ${Y(l)} overwrite the ones from ${Y(a)}\n      `;\n                console.warn(`${ke(\"warn(prisma)\")} ${u}`);\n            }\n        }\n    }\n}\nfunction _s(e) {\n    if (hp(e)) {\n        Li(`Environment variables loaded from ${e}`);\n        let r = Fi.default.config({\n            path: e,\n            debug: process.env.DOTENV_CONFIG_DEBUG ? !0 : void 0\n        });\n        return {\n            dotenvResult: Ds(r),\n            message: Ie(`Environment variables loaded from ${wr.default.relative(process.cwd(), e)}`),\n            path: e\n        };\n    } else Li(`Environment variables not found at ${e}`);\n    return null;\n}\nfunction Ns(e, r) {\n    return e && r && wr.default.resolve(e) === wr.default.resolve(r);\n}\nfunction hp(e) {\n    return !!(e && sn.default.existsSync(e));\n}\nfunction Mi(e, r) {\n    return Object.prototype.hasOwnProperty.call(e, r);\n}\nfunction xr(e, r) {\n    let t = {};\n    for (let n of Object.keys(e))t[n] = r(e[n], n);\n    return t;\n}\nfunction $i(e, r) {\n    if (e.length === 0) return;\n    let t = e[0];\n    for(let n = 1; n < e.length; n++)r(t, e[n]) < 0 && (t = e[n]);\n    return t;\n}\nfunction x(e, r) {\n    Object.defineProperty(e, \"name\", {\n        value: r,\n        configurable: !0\n    });\n}\nvar Fs = new Set, st = (e, r, ...t)=>{\n    Fs.has(e) || (Fs.add(e), ki(r, ...t));\n};\nvar T = class e extends Error {\n    constructor(r, t, n){\n        super(r), this.name = \"PrismaClientInitializationError\", this.clientVersion = t, this.errorCode = n, Error.captureStackTrace(e);\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientInitializationError\";\n    }\n};\nx(T, \"PrismaClientInitializationError\");\nvar z = class extends Error {\n    constructor(r, { code: t, clientVersion: n, meta: i, batchRequestIdx: o }){\n        super(r), this.name = \"PrismaClientKnownRequestError\", this.code = t, this.clientVersion = n, this.meta = i, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: o,\n            enumerable: !1,\n            writable: !0\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientKnownRequestError\";\n    }\n};\nx(z, \"PrismaClientKnownRequestError\");\nvar le = class extends Error {\n    constructor(r, t){\n        super(r), this.name = \"PrismaClientRustPanicError\", this.clientVersion = t;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientRustPanicError\";\n    }\n};\nx(le, \"PrismaClientRustPanicError\");\nvar j = class extends Error {\n    constructor(r, { clientVersion: t, batchRequestIdx: n }){\n        super(r), this.name = \"PrismaClientUnknownRequestError\", this.clientVersion = t, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: n,\n            writable: !0,\n            enumerable: !1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientUnknownRequestError\";\n    }\n};\nx(j, \"PrismaClientUnknownRequestError\");\nvar Z = class extends Error {\n    constructor(r, { clientVersion: t }){\n        super(r), this.name = \"PrismaClientValidationError\", this.clientVersion = t;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientValidationError\";\n    }\n};\nx(Z, \"PrismaClientValidationError\");\nvar Pr = 9e15, Ke = 1e9, qi = \"0123456789abcdef\", pn = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", dn = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", ji = {\n    precision: 20,\n    rounding: 4,\n    modulo: 1,\n    toExpNeg: -7,\n    toExpPos: 21,\n    minE: -Pr,\n    maxE: Pr,\n    crypto: !1\n}, js, Le, w = !0, fn = \"[DecimalError] \", He = fn + \"Invalid argument: \", Vs = fn + \"Precision limit exceeded\", Bs = fn + \"crypto unavailable\", Us = \"[object Decimal]\", X = Math.floor, U = Math.pow, yp = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, bp = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, Ep = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, Gs = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, fe = 1e7, E = 7, wp = 9007199254740991, xp = pn.length - 1, Vi = dn.length - 1, m = {\n    toStringTag: Us\n};\nm.absoluteValue = m.abs = function() {\n    var e = new this.constructor(this);\n    return e.s < 0 && (e.s = 1), y(e);\n};\nm.ceil = function() {\n    return y(new this.constructor(this), this.e + 1, 2);\n};\nm.clampedTo = m.clamp = function(e, r) {\n    var t, n = this, i = n.constructor;\n    if (e = new i(e), r = new i(r), !e.s || !r.s) return new i(NaN);\n    if (e.gt(r)) throw Error(He + r);\n    return t = n.cmp(e), t < 0 ? e : n.cmp(r) > 0 ? r : new i(n);\n};\nm.comparedTo = m.cmp = function(e) {\n    var r, t, n, i, o = this, s = o.d, a = (e = new o.constructor(e)).d, l = o.s, u = e.s;\n    if (!s || !a) return !l || !u ? NaN : l !== u ? l : s === a ? 0 : !s ^ l < 0 ? 1 : -1;\n    if (!s[0] || !a[0]) return s[0] ? l : a[0] ? -u : 0;\n    if (l !== u) return l;\n    if (o.e !== e.e) return o.e > e.e ^ l < 0 ? 1 : -1;\n    for(n = s.length, i = a.length, r = 0, t = n < i ? n : i; r < t; ++r)if (s[r] !== a[r]) return s[r] > a[r] ^ l < 0 ? 1 : -1;\n    return n === i ? 0 : n > i ^ l < 0 ? 1 : -1;\n};\nm.cosine = m.cos = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.d ? t.d[0] ? (e = n.precision, r = n.rounding, n.precision = e + Math.max(t.e, t.sd()) + E, n.rounding = 1, t = Pp(n, Ks(n, t)), n.precision = e, n.rounding = r, y(Le == 2 || Le == 3 ? t.neg() : t, e, r, !0)) : new n(1) : new n(NaN);\n};\nm.cubeRoot = m.cbrt = function() {\n    var e, r, t, n, i, o, s, a, l, u, c = this, p = c.constructor;\n    if (!c.isFinite() || c.isZero()) return new p(c);\n    for(w = !1, o = c.s * U(c.s * c, 1 / 3), !o || Math.abs(o) == 1 / 0 ? (t = J(c.d), e = c.e, (o = (e - t.length + 1) % 3) && (t += o == 1 || o == -2 ? \"0\" : \"00\"), o = U(t, 1 / 3), e = X((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2)), o == 1 / 0 ? t = \"5e\" + e : (t = o.toExponential(), t = t.slice(0, t.indexOf(\"e\") + 1) + e), n = new p(t), n.s = c.s) : n = new p(o.toString()), s = (e = p.precision) + 3;;)if (a = n, l = a.times(a).times(a), u = l.plus(c), n = L(u.plus(c).times(a), u.plus(l), s + 2, 1), J(a.d).slice(0, s) === (t = J(n.d)).slice(0, s)) if (t = t.slice(s - 3, s + 1), t == \"9999\" || !i && t == \"4999\") {\n        if (!i && (y(a, e + 1, 0), a.times(a).times(a).eq(c))) {\n            n = a;\n            break;\n        }\n        s += 4, i = 1;\n    } else {\n        (!+t || !+t.slice(1) && t.charAt(0) == \"5\") && (y(n, e + 1, 1), r = !n.times(n).times(n).eq(c));\n        break;\n    }\n    return w = !0, y(n, e, p.rounding, r);\n};\nm.decimalPlaces = m.dp = function() {\n    var e, r = this.d, t = NaN;\n    if (r) {\n        if (e = r.length - 1, t = (e - X(this.e / E)) * E, e = r[e], e) for(; e % 10 == 0; e /= 10)t--;\n        t < 0 && (t = 0);\n    }\n    return t;\n};\nm.dividedBy = m.div = function(e) {\n    return L(this, new this.constructor(e));\n};\nm.dividedToIntegerBy = m.divToInt = function(e) {\n    var r = this, t = r.constructor;\n    return y(L(r, new t(e), 0, 1, 1), t.precision, t.rounding);\n};\nm.equals = m.eq = function(e) {\n    return this.cmp(e) === 0;\n};\nm.floor = function() {\n    return y(new this.constructor(this), this.e + 1, 3);\n};\nm.greaterThan = m.gt = function(e) {\n    return this.cmp(e) > 0;\n};\nm.greaterThanOrEqualTo = m.gte = function(e) {\n    var r = this.cmp(e);\n    return r == 1 || r === 0;\n};\nm.hyperbolicCosine = m.cosh = function() {\n    var e, r, t, n, i, o = this, s = o.constructor, a = new s(1);\n    if (!o.isFinite()) return new s(o.s ? 1 / 0 : NaN);\n    if (o.isZero()) return a;\n    t = s.precision, n = s.rounding, s.precision = t + Math.max(o.e, o.sd()) + 4, s.rounding = 1, i = o.d.length, i < 32 ? (e = Math.ceil(i / 3), r = (1 / hn(4, e)).toString()) : (e = 16, r = \"2.3283064365386962890625e-10\"), o = vr(s, 1, o.times(r), new s(1), !0);\n    for(var l, u = e, c = new s(8); u--;)l = o.times(o), o = a.minus(l.times(c.minus(l.times(c))));\n    return y(o, s.precision = t, s.rounding = n, !0);\n};\nm.hyperbolicSine = m.sinh = function() {\n    var e, r, t, n, i = this, o = i.constructor;\n    if (!i.isFinite() || i.isZero()) return new o(i);\n    if (r = o.precision, t = o.rounding, o.precision = r + Math.max(i.e, i.sd()) + 4, o.rounding = 1, n = i.d.length, n < 3) i = vr(o, 2, i, i, !0);\n    else {\n        e = 1.4 * Math.sqrt(n), e = e > 16 ? 16 : e | 0, i = i.times(1 / hn(5, e)), i = vr(o, 2, i, i, !0);\n        for(var s, a = new o(5), l = new o(16), u = new o(20); e--;)s = i.times(i), i = i.times(a.plus(s.times(l.times(s).plus(u))));\n    }\n    return o.precision = r, o.rounding = t, y(i, r, t, !0);\n};\nm.hyperbolicTangent = m.tanh = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.isFinite() ? t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + 7, n.rounding = 1, L(t.sinh(), t.cosh(), n.precision = e, n.rounding = r)) : new n(t.s);\n};\nm.inverseCosine = m.acos = function() {\n    var e = this, r = e.constructor, t = e.abs().cmp(1), n = r.precision, i = r.rounding;\n    return t !== -1 ? t === 0 ? e.isNeg() ? we(r, n, i) : new r(0) : new r(NaN) : e.isZero() ? we(r, n + 4, i).times(.5) : (r.precision = n + 6, r.rounding = 1, e = new r(1).minus(e).div(e.plus(1)).sqrt().atan(), r.precision = n, r.rounding = i, e.times(2));\n};\nm.inverseHyperbolicCosine = m.acosh = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.lte(1) ? new n(t.eq(1) ? 0 : NaN) : t.isFinite() ? (e = n.precision, r = n.rounding, n.precision = e + Math.max(Math.abs(t.e), t.sd()) + 4, n.rounding = 1, w = !1, t = t.times(t).minus(1).sqrt().plus(t), w = !0, n.precision = e, n.rounding = r, t.ln()) : new n(t);\n};\nm.inverseHyperbolicSine = m.asinh = function() {\n    var e, r, t = this, n = t.constructor;\n    return !t.isFinite() || t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + 2 * Math.max(Math.abs(t.e), t.sd()) + 6, n.rounding = 1, w = !1, t = t.times(t).plus(1).sqrt().plus(t), w = !0, n.precision = e, n.rounding = r, t.ln());\n};\nm.inverseHyperbolicTangent = m.atanh = function() {\n    var e, r, t, n, i = this, o = i.constructor;\n    return i.isFinite() ? i.e >= 0 ? new o(i.abs().eq(1) ? i.s / 0 : i.isZero() ? i : NaN) : (e = o.precision, r = o.rounding, n = i.sd(), Math.max(n, e) < 2 * -i.e - 1 ? y(new o(i), e, r, !0) : (o.precision = t = n - i.e, i = L(i.plus(1), new o(1).minus(i), t + e, 1), o.precision = e + 4, o.rounding = 1, i = i.ln(), o.precision = e, o.rounding = r, i.times(.5))) : new o(NaN);\n};\nm.inverseSine = m.asin = function() {\n    var e, r, t, n, i = this, o = i.constructor;\n    return i.isZero() ? new o(i) : (r = i.abs().cmp(1), t = o.precision, n = o.rounding, r !== -1 ? r === 0 ? (e = we(o, t + 4, n).times(.5), e.s = i.s, e) : new o(NaN) : (o.precision = t + 6, o.rounding = 1, i = i.div(new o(1).minus(i.times(i)).sqrt().plus(1)).atan(), o.precision = t, o.rounding = n, i.times(2)));\n};\nm.inverseTangent = m.atan = function() {\n    var e, r, t, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding;\n    if (u.isFinite()) {\n        if (u.isZero()) return new c(u);\n        if (u.abs().eq(1) && p + 4 <= Vi) return s = we(c, p + 4, d).times(.25), s.s = u.s, s;\n    } else {\n        if (!u.s) return new c(NaN);\n        if (p + 4 <= Vi) return s = we(c, p + 4, d).times(.5), s.s = u.s, s;\n    }\n    for(c.precision = a = p + 10, c.rounding = 1, t = Math.min(28, a / E + 2 | 0), e = t; e; --e)u = u.div(u.times(u).plus(1).sqrt().plus(1));\n    for(w = !1, r = Math.ceil(a / E), n = 1, l = u.times(u), s = new c(u), i = u; e !== -1;)if (i = i.times(l), o = s.minus(i.div(n += 2)), i = i.times(l), s = o.plus(i.div(n += 2)), s.d[r] !== void 0) for(e = r; s.d[e] === o.d[e] && e--;);\n    return t && (s = s.times(2 << t - 1)), w = !0, y(s, c.precision = p, c.rounding = d, !0);\n};\nm.isFinite = function() {\n    return !!this.d;\n};\nm.isInteger = m.isInt = function() {\n    return !!this.d && X(this.e / E) > this.d.length - 2;\n};\nm.isNaN = function() {\n    return !this.s;\n};\nm.isNegative = m.isNeg = function() {\n    return this.s < 0;\n};\nm.isPositive = m.isPos = function() {\n    return this.s > 0;\n};\nm.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\nm.lessThan = m.lt = function(e) {\n    return this.cmp(e) < 0;\n};\nm.lessThanOrEqualTo = m.lte = function(e) {\n    return this.cmp(e) < 1;\n};\nm.logarithm = m.log = function(e) {\n    var r, t, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding, f = 5;\n    if (e == null) e = new c(10), r = !0;\n    else {\n        if (e = new c(e), t = e.d, e.s < 0 || !t || !t[0] || e.eq(1)) return new c(NaN);\n        r = e.eq(10);\n    }\n    if (t = u.d, u.s < 0 || !t || !t[0] || u.eq(1)) return new c(t && !t[0] ? -1 / 0 : u.s != 1 ? NaN : t ? 0 : 1 / 0);\n    if (r) if (t.length > 1) o = !0;\n    else {\n        for(i = t[0]; i % 10 === 0;)i /= 10;\n        o = i !== 1;\n    }\n    if (w = !1, a = p + f, s = Je(u, a), n = r ? mn(c, a + 10) : Je(e, a), l = L(s, n, a, 1), at(l.d, i = p, d)) do if (a += 10, s = Je(u, a), n = r ? mn(c, a + 10) : Je(e, a), l = L(s, n, a, 1), !o) {\n        +J(l.d).slice(i + 1, i + 15) + 1 == 1e14 && (l = y(l, p + 1, 0));\n        break;\n    }\n    while (at(l.d, i += 10, d));\n    return w = !0, y(l, p, d);\n};\nm.minus = m.sub = function(e) {\n    var r, t, n, i, o, s, a, l, u, c, p, d, f = this, g = f.constructor;\n    if (e = new g(e), !f.d || !e.d) return !f.s || !e.s ? e = new g(NaN) : f.d ? e.s = -e.s : e = new g(e.d || f.s !== e.s ? f : NaN), e;\n    if (f.s != e.s) return e.s = -e.s, f.plus(e);\n    if (u = f.d, d = e.d, a = g.precision, l = g.rounding, !u[0] || !d[0]) {\n        if (d[0]) e.s = -e.s;\n        else if (u[0]) e = new g(f);\n        else return new g(l === 3 ? -0 : 0);\n        return w ? y(e, a, l) : e;\n    }\n    if (t = X(e.e / E), c = X(f.e / E), u = u.slice(), o = c - t, o) {\n        for(p = o < 0, p ? (r = u, o = -o, s = d.length) : (r = d, t = c, s = u.length), n = Math.max(Math.ceil(a / E), s) + 2, o > n && (o = n, r.length = 1), r.reverse(), n = o; n--;)r.push(0);\n        r.reverse();\n    } else {\n        for(n = u.length, s = d.length, p = n < s, p && (s = n), n = 0; n < s; n++)if (u[n] != d[n]) {\n            p = u[n] < d[n];\n            break;\n        }\n        o = 0;\n    }\n    for(p && (r = u, u = d, d = r, e.s = -e.s), s = u.length, n = d.length - s; n > 0; --n)u[s++] = 0;\n    for(n = d.length; n > o;){\n        if (u[--n] < d[n]) {\n            for(i = n; i && u[--i] === 0;)u[i] = fe - 1;\n            --u[i], u[n] += fe;\n        }\n        u[n] -= d[n];\n    }\n    for(; u[--s] === 0;)u.pop();\n    for(; u[0] === 0; u.shift())--t;\n    return u[0] ? (e.d = u, e.e = gn(u, t), w ? y(e, a, l) : e) : new g(l === 3 ? -0 : 0);\n};\nm.modulo = m.mod = function(e) {\n    var r, t = this, n = t.constructor;\n    return e = new n(e), !t.d || !e.s || e.d && !e.d[0] ? new n(NaN) : !e.d || t.d && !t.d[0] ? y(new n(t), n.precision, n.rounding) : (w = !1, n.modulo == 9 ? (r = L(t, e.abs(), 0, 3, 1), r.s *= e.s) : r = L(t, e, 0, n.modulo, 1), r = r.times(e), w = !0, t.minus(r));\n};\nm.naturalExponential = m.exp = function() {\n    return Bi(this);\n};\nm.naturalLogarithm = m.ln = function() {\n    return Je(this);\n};\nm.negated = m.neg = function() {\n    var e = new this.constructor(this);\n    return e.s = -e.s, y(e);\n};\nm.plus = m.add = function(e) {\n    var r, t, n, i, o, s, a, l, u, c, p = this, d = p.constructor;\n    if (e = new d(e), !p.d || !e.d) return !p.s || !e.s ? e = new d(NaN) : p.d || (e = new d(e.d || p.s === e.s ? p : NaN)), e;\n    if (p.s != e.s) return e.s = -e.s, p.minus(e);\n    if (u = p.d, c = e.d, a = d.precision, l = d.rounding, !u[0] || !c[0]) return c[0] || (e = new d(p)), w ? y(e, a, l) : e;\n    if (o = X(p.e / E), n = X(e.e / E), u = u.slice(), i = o - n, i) {\n        for(i < 0 ? (t = u, i = -i, s = c.length) : (t = c, n = o, s = u.length), o = Math.ceil(a / E), s = o > s ? o + 1 : s + 1, i > s && (i = s, t.length = 1), t.reverse(); i--;)t.push(0);\n        t.reverse();\n    }\n    for(s = u.length, i = c.length, s - i < 0 && (i = s, t = c, c = u, u = t), r = 0; i;)r = (u[--i] = u[i] + c[i] + r) / fe | 0, u[i] %= fe;\n    for(r && (u.unshift(r), ++n), s = u.length; u[--s] == 0;)u.pop();\n    return e.d = u, e.e = gn(u, n), w ? y(e, a, l) : e;\n};\nm.precision = m.sd = function(e) {\n    var r, t = this;\n    if (e !== void 0 && e !== !!e && e !== 1 && e !== 0) throw Error(He + e);\n    return t.d ? (r = Qs(t.d), e && t.e + 1 > r && (r = t.e + 1)) : r = NaN, r;\n};\nm.round = function() {\n    var e = this, r = e.constructor;\n    return y(new r(e), e.e + 1, r.rounding);\n};\nm.sine = m.sin = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.isFinite() ? t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + Math.max(t.e, t.sd()) + E, n.rounding = 1, t = Tp(n, Ks(n, t)), n.precision = e, n.rounding = r, y(Le > 2 ? t.neg() : t, e, r, !0)) : new n(NaN);\n};\nm.squareRoot = m.sqrt = function() {\n    var e, r, t, n, i, o, s = this, a = s.d, l = s.e, u = s.s, c = s.constructor;\n    if (u !== 1 || !a || !a[0]) return new c(!u || u < 0 && (!a || a[0]) ? NaN : a ? s : 1 / 0);\n    for(w = !1, u = Math.sqrt(+s), u == 0 || u == 1 / 0 ? (r = J(a), (r.length + l) % 2 == 0 && (r += \"0\"), u = Math.sqrt(r), l = X((l + 1) / 2) - (l < 0 || l % 2), u == 1 / 0 ? r = \"5e\" + l : (r = u.toExponential(), r = r.slice(0, r.indexOf(\"e\") + 1) + l), n = new c(r)) : n = new c(u.toString()), t = (l = c.precision) + 3;;)if (o = n, n = o.plus(L(s, o, t + 2, 1)).times(.5), J(o.d).slice(0, t) === (r = J(n.d)).slice(0, t)) if (r = r.slice(t - 3, t + 1), r == \"9999\" || !i && r == \"4999\") {\n        if (!i && (y(o, l + 1, 0), o.times(o).eq(s))) {\n            n = o;\n            break;\n        }\n        t += 4, i = 1;\n    } else {\n        (!+r || !+r.slice(1) && r.charAt(0) == \"5\") && (y(n, l + 1, 1), e = !n.times(n).eq(s));\n        break;\n    }\n    return w = !0, y(n, l, c.rounding, e);\n};\nm.tangent = m.tan = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.isFinite() ? t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + 10, n.rounding = 1, t = t.sin(), t.s = 1, t = L(t, new n(1).minus(t.times(t)).sqrt(), e + 10, 0), n.precision = e, n.rounding = r, y(Le == 2 || Le == 4 ? t.neg() : t, e, r, !0)) : new n(NaN);\n};\nm.times = m.mul = function(e) {\n    var r, t, n, i, o, s, a, l, u, c = this, p = c.constructor, d = c.d, f = (e = new p(e)).d;\n    if (e.s *= c.s, !d || !d[0] || !f || !f[0]) return new p(!e.s || d && !d[0] && !f || f && !f[0] && !d ? NaN : !d || !f ? e.s / 0 : e.s * 0);\n    for(t = X(c.e / E) + X(e.e / E), l = d.length, u = f.length, l < u && (o = d, d = f, f = o, s = l, l = u, u = s), o = [], s = l + u, n = s; n--;)o.push(0);\n    for(n = u; --n >= 0;){\n        for(r = 0, i = l + n; i > n;)a = o[i] + f[n] * d[i - n - 1] + r, o[i--] = a % fe | 0, r = a / fe | 0;\n        o[i] = (o[i] + r) % fe | 0;\n    }\n    for(; !o[--s];)o.pop();\n    return r ? ++t : o.shift(), e.d = o, e.e = gn(o, t), w ? y(e, p.precision, p.rounding) : e;\n};\nm.toBinary = function(e, r) {\n    return Ui(this, 2, e, r);\n};\nm.toDecimalPlaces = m.toDP = function(e, r) {\n    var t = this, n = t.constructor;\n    return t = new n(t), e === void 0 ? t : (ie(e, 0, Ke), r === void 0 ? r = n.rounding : ie(r, 0, 8), y(t, e + t.e + 1, r));\n};\nm.toExponential = function(e, r) {\n    var t, n = this, i = n.constructor;\n    return e === void 0 ? t = xe(n, !0) : (ie(e, 0, Ke), r === void 0 ? r = i.rounding : ie(r, 0, 8), n = y(new i(n), e + 1, r), t = xe(n, !0, e + 1)), n.isNeg() && !n.isZero() ? \"-\" + t : t;\n};\nm.toFixed = function(e, r) {\n    var t, n, i = this, o = i.constructor;\n    return e === void 0 ? t = xe(i) : (ie(e, 0, Ke), r === void 0 ? r = o.rounding : ie(r, 0, 8), n = y(new o(i), e + i.e + 1, r), t = xe(n, !1, e + n.e + 1)), i.isNeg() && !i.isZero() ? \"-\" + t : t;\n};\nm.toFraction = function(e) {\n    var r, t, n, i, o, s, a, l, u, c, p, d, f = this, g = f.d, h = f.constructor;\n    if (!g) return new h(f);\n    if (u = t = new h(1), n = l = new h(0), r = new h(n), o = r.e = Qs(g) - f.e - 1, s = o % E, r.d[0] = U(10, s < 0 ? E + s : s), e == null) e = o > 0 ? r : u;\n    else {\n        if (a = new h(e), !a.isInt() || a.lt(u)) throw Error(He + a);\n        e = a.gt(r) ? o > 0 ? r : u : a;\n    }\n    for(w = !1, a = new h(J(g)), c = h.precision, h.precision = o = g.length * E * 2; p = L(a, r, 0, 1, 1), i = t.plus(p.times(n)), i.cmp(e) != 1;)t = n, n = i, i = u, u = l.plus(p.times(i)), l = i, i = r, r = a.minus(p.times(i)), a = i;\n    return i = L(e.minus(t), n, 0, 1, 1), l = l.plus(i.times(u)), t = t.plus(i.times(n)), l.s = u.s = f.s, d = L(u, n, o, 1).minus(f).abs().cmp(L(l, t, o, 1).minus(f).abs()) < 1 ? [\n        u,\n        n\n    ] : [\n        l,\n        t\n    ], h.precision = c, w = !0, d;\n};\nm.toHexadecimal = m.toHex = function(e, r) {\n    return Ui(this, 16, e, r);\n};\nm.toNearest = function(e, r) {\n    var t = this, n = t.constructor;\n    if (t = new n(t), e == null) {\n        if (!t.d) return t;\n        e = new n(1), r = n.rounding;\n    } else {\n        if (e = new n(e), r === void 0 ? r = n.rounding : ie(r, 0, 8), !t.d) return e.s ? t : e;\n        if (!e.d) return e.s && (e.s = t.s), e;\n    }\n    return e.d[0] ? (w = !1, t = L(t, e, 0, r, 1).times(e), w = !0, y(t)) : (e.s = t.s, t = e), t;\n};\nm.toNumber = function() {\n    return +this;\n};\nm.toOctal = function(e, r) {\n    return Ui(this, 8, e, r);\n};\nm.toPower = m.pow = function(e) {\n    var r, t, n, i, o, s, a = this, l = a.constructor, u = +(e = new l(e));\n    if (!a.d || !e.d || !a.d[0] || !e.d[0]) return new l(U(+a, u));\n    if (a = new l(a), a.eq(1)) return a;\n    if (n = l.precision, o = l.rounding, e.eq(1)) return y(a, n, o);\n    if (r = X(e.e / E), r >= e.d.length - 1 && (t = u < 0 ? -u : u) <= wp) return i = Ws(l, a, t, n), e.s < 0 ? new l(1).div(i) : y(i, n, o);\n    if (s = a.s, s < 0) {\n        if (r < e.d.length - 1) return new l(NaN);\n        if ((e.d[r] & 1) == 0 && (s = 1), a.e == 0 && a.d[0] == 1 && a.d.length == 1) return a.s = s, a;\n    }\n    return t = U(+a, u), r = t == 0 || !isFinite(t) ? X(u * (Math.log(\"0.\" + J(a.d)) / Math.LN10 + a.e + 1)) : new l(t + \"\").e, r > l.maxE + 1 || r < l.minE - 1 ? new l(r > 0 ? s / 0 : 0) : (w = !1, l.rounding = a.s = 1, t = Math.min(12, (r + \"\").length), i = Bi(e.times(Je(a, n + t)), n), i.d && (i = y(i, n + 5, 1), at(i.d, n, o) && (r = n + 10, i = y(Bi(e.times(Je(a, r + t)), r), r + 5, 1), +J(i.d).slice(n + 1, n + 15) + 1 == 1e14 && (i = y(i, n + 1, 0)))), i.s = s, w = !0, l.rounding = o, y(i, n, o));\n};\nm.toPrecision = function(e, r) {\n    var t, n = this, i = n.constructor;\n    return e === void 0 ? t = xe(n, n.e <= i.toExpNeg || n.e >= i.toExpPos) : (ie(e, 1, Ke), r === void 0 ? r = i.rounding : ie(r, 0, 8), n = y(new i(n), e, r), t = xe(n, e <= n.e || n.e <= i.toExpNeg, e)), n.isNeg() && !n.isZero() ? \"-\" + t : t;\n};\nm.toSignificantDigits = m.toSD = function(e, r) {\n    var t = this, n = t.constructor;\n    return e === void 0 ? (e = n.precision, r = n.rounding) : (ie(e, 1, Ke), r === void 0 ? r = n.rounding : ie(r, 0, 8)), y(new n(t), e, r);\n};\nm.toString = function() {\n    var e = this, r = e.constructor, t = xe(e, e.e <= r.toExpNeg || e.e >= r.toExpPos);\n    return e.isNeg() && !e.isZero() ? \"-\" + t : t;\n};\nm.truncated = m.trunc = function() {\n    return y(new this.constructor(this), this.e + 1, 1);\n};\nm.valueOf = m.toJSON = function() {\n    var e = this, r = e.constructor, t = xe(e, e.e <= r.toExpNeg || e.e >= r.toExpPos);\n    return e.isNeg() ? \"-\" + t : t;\n};\nfunction J(e) {\n    var r, t, n, i = e.length - 1, o = \"\", s = e[0];\n    if (i > 0) {\n        for(o += s, r = 1; r < i; r++)n = e[r] + \"\", t = E - n.length, t && (o += We(t)), o += n;\n        s = e[r], n = s + \"\", t = E - n.length, t && (o += We(t));\n    } else if (s === 0) return \"0\";\n    for(; s % 10 === 0;)s /= 10;\n    return o + s;\n}\nfunction ie(e, r, t) {\n    if (e !== ~~e || e < r || e > t) throw Error(He + e);\n}\nfunction at(e, r, t, n) {\n    var i, o, s, a;\n    for(o = e[0]; o >= 10; o /= 10)--r;\n    return --r < 0 ? (r += E, i = 0) : (i = Math.ceil((r + 1) / E), r %= E), o = U(10, E - r), a = e[i] % o | 0, n == null ? r < 3 ? (r == 0 ? a = a / 100 | 0 : r == 1 && (a = a / 10 | 0), s = t < 4 && a == 99999 || t > 3 && a == 49999 || a == 5e4 || a == 0) : s = (t < 4 && a + 1 == o || t > 3 && a + 1 == o / 2) && (e[i + 1] / o / 100 | 0) == U(10, r - 2) - 1 || (a == o / 2 || a == 0) && (e[i + 1] / o / 100 | 0) == 0 : r < 4 ? (r == 0 ? a = a / 1e3 | 0 : r == 1 ? a = a / 100 | 0 : r == 2 && (a = a / 10 | 0), s = (n || t < 4) && a == 9999 || !n && t > 3 && a == 4999) : s = ((n || t < 4) && a + 1 == o || !n && t > 3 && a + 1 == o / 2) && (e[i + 1] / o / 1e3 | 0) == U(10, r - 3) - 1, s;\n}\nfunction un(e, r, t) {\n    for(var n, i = [\n        0\n    ], o, s = 0, a = e.length; s < a;){\n        for(o = i.length; o--;)i[o] *= r;\n        for(i[0] += qi.indexOf(e.charAt(s++)), n = 0; n < i.length; n++)i[n] > t - 1 && (i[n + 1] === void 0 && (i[n + 1] = 0), i[n + 1] += i[n] / t | 0, i[n] %= t);\n    }\n    return i.reverse();\n}\nfunction Pp(e, r) {\n    var t, n, i;\n    if (r.isZero()) return r;\n    n = r.d.length, n < 32 ? (t = Math.ceil(n / 3), i = (1 / hn(4, t)).toString()) : (t = 16, i = \"2.3283064365386962890625e-10\"), e.precision += t, r = vr(e, 1, r.times(i), new e(1));\n    for(var o = t; o--;){\n        var s = r.times(r);\n        r = s.times(s).minus(s).times(8).plus(1);\n    }\n    return e.precision -= t, r;\n}\nvar L = function() {\n    function e(n, i, o) {\n        var s, a = 0, l = n.length;\n        for(n = n.slice(); l--;)s = n[l] * i + a, n[l] = s % o | 0, a = s / o | 0;\n        return a && n.unshift(a), n;\n    }\n    function r(n, i, o, s) {\n        var a, l;\n        if (o != s) l = o > s ? 1 : -1;\n        else for(a = l = 0; a < o; a++)if (n[a] != i[a]) {\n            l = n[a] > i[a] ? 1 : -1;\n            break;\n        }\n        return l;\n    }\n    function t(n, i, o, s) {\n        for(var a = 0; o--;)n[o] -= a, a = n[o] < i[o] ? 1 : 0, n[o] = a * s + n[o] - i[o];\n        for(; !n[0] && n.length > 1;)n.shift();\n    }\n    return function(n, i, o, s, a, l) {\n        var u, c, p, d, f, g, h, I, v, S, b, O, me, ae, Jr, V, te, Ae, H, fr, jt = n.constructor, ei = n.s == i.s ? 1 : -1, K = n.d, _ = i.d;\n        if (!K || !K[0] || !_ || !_[0]) return new jt(!n.s || !i.s || (K ? _ && K[0] == _[0] : !_) ? NaN : K && K[0] == 0 || !_ ? ei * 0 : ei / 0);\n        for(l ? (f = 1, c = n.e - i.e) : (l = fe, f = E, c = X(n.e / f) - X(i.e / f)), H = _.length, te = K.length, v = new jt(ei), S = v.d = [], p = 0; _[p] == (K[p] || 0); p++);\n        if (_[p] > (K[p] || 0) && c--, o == null ? (ae = o = jt.precision, s = jt.rounding) : a ? ae = o + (n.e - i.e) + 1 : ae = o, ae < 0) S.push(1), g = !0;\n        else {\n            if (ae = ae / f + 2 | 0, p = 0, H == 1) {\n                for(d = 0, _ = _[0], ae++; (p < te || d) && ae--; p++)Jr = d * l + (K[p] || 0), S[p] = Jr / _ | 0, d = Jr % _ | 0;\n                g = d || p < te;\n            } else {\n                for(d = l / (_[0] + 1) | 0, d > 1 && (_ = e(_, d, l), K = e(K, d, l), H = _.length, te = K.length), V = H, b = K.slice(0, H), O = b.length; O < H;)b[O++] = 0;\n                fr = _.slice(), fr.unshift(0), Ae = _[0], _[1] >= l / 2 && ++Ae;\n                do d = 0, u = r(_, b, H, O), u < 0 ? (me = b[0], H != O && (me = me * l + (b[1] || 0)), d = me / Ae | 0, d > 1 ? (d >= l && (d = l - 1), h = e(_, d, l), I = h.length, O = b.length, u = r(h, b, I, O), u == 1 && (d--, t(h, H < I ? fr : _, I, l))) : (d == 0 && (u = d = 1), h = _.slice()), I = h.length, I < O && h.unshift(0), t(b, h, O, l), u == -1 && (O = b.length, u = r(_, b, H, O), u < 1 && (d++, t(b, H < O ? fr : _, O, l))), O = b.length) : u === 0 && (d++, b = [\n                    0\n                ]), S[p++] = d, u && b[0] ? b[O++] = K[V] || 0 : (b = [\n                    K[V]\n                ], O = 1);\n                while ((V++ < te || b[0] !== void 0) && ae--);\n                g = b[0] !== void 0;\n            }\n            S[0] || S.shift();\n        }\n        if (f == 1) v.e = c, js = g;\n        else {\n            for(p = 1, d = S[0]; d >= 10; d /= 10)p++;\n            v.e = p + c * f - 1, y(v, a ? o + v.e + 1 : o, s, g);\n        }\n        return v;\n    };\n}();\nfunction y(e, r, t, n) {\n    var i, o, s, a, l, u, c, p, d, f = e.constructor;\n    e: if (r != null) {\n        if (p = e.d, !p) return e;\n        for(i = 1, a = p[0]; a >= 10; a /= 10)i++;\n        if (o = r - i, o < 0) o += E, s = r, c = p[d = 0], l = c / U(10, i - s - 1) % 10 | 0;\n        else if (d = Math.ceil((o + 1) / E), a = p.length, d >= a) if (n) {\n            for(; a++ <= d;)p.push(0);\n            c = l = 0, i = 1, o %= E, s = o - E + 1;\n        } else break e;\n        else {\n            for(c = a = p[d], i = 1; a >= 10; a /= 10)i++;\n            o %= E, s = o - E + i, l = s < 0 ? 0 : c / U(10, i - s - 1) % 10 | 0;\n        }\n        if (n = n || r < 0 || p[d + 1] !== void 0 || (s < 0 ? c : c % U(10, i - s - 1)), u = t < 4 ? (l || n) && (t == 0 || t == (e.s < 0 ? 3 : 2)) : l > 5 || l == 5 && (t == 4 || n || t == 6 && (o > 0 ? s > 0 ? c / U(10, i - s) : 0 : p[d - 1]) % 10 & 1 || t == (e.s < 0 ? 8 : 7)), r < 1 || !p[0]) return p.length = 0, u ? (r -= e.e + 1, p[0] = U(10, (E - r % E) % E), e.e = -r || 0) : p[0] = e.e = 0, e;\n        if (o == 0 ? (p.length = d, a = 1, d--) : (p.length = d + 1, a = U(10, E - o), p[d] = s > 0 ? (c / U(10, i - s) % U(10, s) | 0) * a : 0), u) for(;;)if (d == 0) {\n            for(o = 1, s = p[0]; s >= 10; s /= 10)o++;\n            for(s = p[0] += a, a = 1; s >= 10; s /= 10)a++;\n            o != a && (e.e++, p[0] == fe && (p[0] = 1));\n            break;\n        } else {\n            if (p[d] += a, p[d] != fe) break;\n            p[d--] = 0, a = 1;\n        }\n        for(o = p.length; p[--o] === 0;)p.pop();\n    }\n    return w && (e.e > f.maxE ? (e.d = null, e.e = NaN) : e.e < f.minE && (e.e = 0, e.d = [\n        0\n    ])), e;\n}\nfunction xe(e, r, t) {\n    if (!e.isFinite()) return Hs(e);\n    var n, i = e.e, o = J(e.d), s = o.length;\n    return r ? (t && (n = t - s) > 0 ? o = o.charAt(0) + \".\" + o.slice(1) + We(n) : s > 1 && (o = o.charAt(0) + \".\" + o.slice(1)), o = o + (e.e < 0 ? \"e\" : \"e+\") + e.e) : i < 0 ? (o = \"0.\" + We(-i - 1) + o, t && (n = t - s) > 0 && (o += We(n))) : i >= s ? (o += We(i + 1 - s), t && (n = t - i - 1) > 0 && (o = o + \".\" + We(n))) : ((n = i + 1) < s && (o = o.slice(0, n) + \".\" + o.slice(n)), t && (n = t - s) > 0 && (i + 1 === s && (o += \".\"), o += We(n))), o;\n}\nfunction gn(e, r) {\n    var t = e[0];\n    for(r *= E; t >= 10; t /= 10)r++;\n    return r;\n}\nfunction mn(e, r, t) {\n    if (r > xp) throw w = !0, t && (e.precision = t), Error(Vs);\n    return y(new e(pn), r, 1, !0);\n}\nfunction we(e, r, t) {\n    if (r > Vi) throw Error(Vs);\n    return y(new e(dn), r, t, !0);\n}\nfunction Qs(e) {\n    var r = e.length - 1, t = r * E + 1;\n    if (r = e[r], r) {\n        for(; r % 10 == 0; r /= 10)t--;\n        for(r = e[0]; r >= 10; r /= 10)t++;\n    }\n    return t;\n}\nfunction We(e) {\n    for(var r = \"\"; e--;)r += \"0\";\n    return r;\n}\nfunction Ws(e, r, t, n) {\n    var i, o = new e(1), s = Math.ceil(n / E + 4);\n    for(w = !1;;){\n        if (t % 2 && (o = o.times(r), $s(o.d, s) && (i = !0)), t = X(t / 2), t === 0) {\n            t = o.d.length - 1, i && o.d[t] === 0 && ++o.d[t];\n            break;\n        }\n        r = r.times(r), $s(r.d, s);\n    }\n    return w = !0, o;\n}\nfunction Ms(e) {\n    return e.d[e.d.length - 1] & 1;\n}\nfunction Js(e, r, t) {\n    for(var n, i, o = new e(r[0]), s = 0; ++s < r.length;){\n        if (i = new e(r[s]), !i.s) {\n            o = i;\n            break;\n        }\n        n = o.cmp(i), (n === t || n === 0 && o.s === t) && (o = i);\n    }\n    return o;\n}\nfunction Bi(e, r) {\n    var t, n, i, o, s, a, l, u = 0, c = 0, p = 0, d = e.constructor, f = d.rounding, g = d.precision;\n    if (!e.d || !e.d[0] || e.e > 17) return new d(e.d ? e.d[0] ? e.s < 0 ? 0 : 1 / 0 : 1 : e.s ? e.s < 0 ? 0 : e : NaN);\n    for(r == null ? (w = !1, l = g) : l = r, a = new d(.03125); e.e > -2;)e = e.times(a), p += 5;\n    for(n = Math.log(U(2, p)) / Math.LN10 * 2 + 5 | 0, l += n, t = o = s = new d(1), d.precision = l;;){\n        if (o = y(o.times(e), l, 1), t = t.times(++c), a = s.plus(L(o, t, l, 1)), J(a.d).slice(0, l) === J(s.d).slice(0, l)) {\n            for(i = p; i--;)s = y(s.times(s), l, 1);\n            if (r == null) if (u < 3 && at(s.d, l - n, f, u)) d.precision = l += 10, t = o = a = new d(1), c = 0, u++;\n            else return y(s, d.precision = g, f, w = !0);\n            else return d.precision = g, s;\n        }\n        s = a;\n    }\n}\nfunction Je(e, r) {\n    var t, n, i, o, s, a, l, u, c, p, d, f = 1, g = 10, h = e, I = h.d, v = h.constructor, S = v.rounding, b = v.precision;\n    if (h.s < 0 || !I || !I[0] || !h.e && I[0] == 1 && I.length == 1) return new v(I && !I[0] ? -1 / 0 : h.s != 1 ? NaN : I ? 0 : h);\n    if (r == null ? (w = !1, c = b) : c = r, v.precision = c += g, t = J(I), n = t.charAt(0), Math.abs(o = h.e) < 15e14) {\n        for(; n < 7 && n != 1 || n == 1 && t.charAt(1) > 3;)h = h.times(e), t = J(h.d), n = t.charAt(0), f++;\n        o = h.e, n > 1 ? (h = new v(\"0.\" + t), o++) : h = new v(n + \".\" + t.slice(1));\n    } else return u = mn(v, c + 2, b).times(o + \"\"), h = Je(new v(n + \".\" + t.slice(1)), c - g).plus(u), v.precision = b, r == null ? y(h, b, S, w = !0) : h;\n    for(p = h, l = s = h = L(h.minus(1), h.plus(1), c, 1), d = y(h.times(h), c, 1), i = 3;;){\n        if (s = y(s.times(d), c, 1), u = l.plus(L(s, new v(i), c, 1)), J(u.d).slice(0, c) === J(l.d).slice(0, c)) if (l = l.times(2), o !== 0 && (l = l.plus(mn(v, c + 2, b).times(o + \"\"))), l = L(l, new v(f), c, 1), r == null) if (at(l.d, c - g, S, a)) v.precision = c += g, u = s = h = L(p.minus(1), p.plus(1), c, 1), d = y(h.times(h), c, 1), i = a = 1;\n        else return y(l, v.precision = b, S, w = !0);\n        else return v.precision = b, l;\n        l = u, i += 2;\n    }\n}\nfunction Hs(e) {\n    return String(e.s * e.s / 0);\n}\nfunction cn(e, r) {\n    var t, n, i;\n    for((t = r.indexOf(\".\")) > -1 && (r = r.replace(\".\", \"\")), (n = r.search(/e/i)) > 0 ? (t < 0 && (t = n), t += +r.slice(n + 1), r = r.substring(0, n)) : t < 0 && (t = r.length), n = 0; r.charCodeAt(n) === 48; n++);\n    for(i = r.length; r.charCodeAt(i - 1) === 48; --i);\n    if (r = r.slice(n, i), r) {\n        if (i -= n, e.e = t = t - n - 1, e.d = [], n = (t + 1) % E, t < 0 && (n += E), n < i) {\n            for(n && e.d.push(+r.slice(0, n)), i -= E; n < i;)e.d.push(+r.slice(n, n += E));\n            r = r.slice(n), n = E - r.length;\n        } else n -= i;\n        for(; n--;)r += \"0\";\n        e.d.push(+r), w && (e.e > e.constructor.maxE ? (e.d = null, e.e = NaN) : e.e < e.constructor.minE && (e.e = 0, e.d = [\n            0\n        ]));\n    } else e.e = 0, e.d = [\n        0\n    ];\n    return e;\n}\nfunction vp(e, r) {\n    var t, n, i, o, s, a, l, u, c;\n    if (r.indexOf(\"_\") > -1) {\n        if (r = r.replace(/(\\d)_(?=\\d)/g, \"$1\"), Gs.test(r)) return cn(e, r);\n    } else if (r === \"Infinity\" || r === \"NaN\") return +r || (e.s = NaN), e.e = NaN, e.d = null, e;\n    if (bp.test(r)) t = 16, r = r.toLowerCase();\n    else if (yp.test(r)) t = 2;\n    else if (Ep.test(r)) t = 8;\n    else throw Error(He + r);\n    for(o = r.search(/p/i), o > 0 ? (l = +r.slice(o + 1), r = r.substring(2, o)) : r = r.slice(2), o = r.indexOf(\".\"), s = o >= 0, n = e.constructor, s && (r = r.replace(\".\", \"\"), a = r.length, o = a - o, i = Ws(n, new n(t), o, o * 2)), u = un(r, t, fe), c = u.length - 1, o = c; u[o] === 0; --o)u.pop();\n    return o < 0 ? new n(e.s * 0) : (e.e = gn(u, c), e.d = u, w = !1, s && (e = L(e, i, a * 4)), l && (e = e.times(Math.abs(l) < 54 ? U(2, l) : sr.pow(2, l))), w = !0, e);\n}\nfunction Tp(e, r) {\n    var t, n = r.d.length;\n    if (n < 3) return r.isZero() ? r : vr(e, 2, r, r);\n    t = 1.4 * Math.sqrt(n), t = t > 16 ? 16 : t | 0, r = r.times(1 / hn(5, t)), r = vr(e, 2, r, r);\n    for(var i, o = new e(5), s = new e(16), a = new e(20); t--;)i = r.times(r), r = r.times(o.plus(i.times(s.times(i).minus(a))));\n    return r;\n}\nfunction vr(e, r, t, n, i) {\n    var o, s, a, l, u = 1, c = e.precision, p = Math.ceil(c / E);\n    for(w = !1, l = t.times(t), a = new e(n);;){\n        if (s = L(a.times(l), new e(r++ * r++), c, 1), a = i ? n.plus(s) : n.minus(s), n = L(s.times(l), new e(r++ * r++), c, 1), s = a.plus(n), s.d[p] !== void 0) {\n            for(o = p; s.d[o] === a.d[o] && o--;);\n            if (o == -1) break;\n        }\n        o = a, a = n, n = s, s = o, u++;\n    }\n    return w = !0, s.d.length = p + 1, s;\n}\nfunction hn(e, r) {\n    for(var t = e; --r;)t *= e;\n    return t;\n}\nfunction Ks(e, r) {\n    var t, n = r.s < 0, i = we(e, e.precision, 1), o = i.times(.5);\n    if (r = r.abs(), r.lte(o)) return Le = n ? 4 : 1, r;\n    if (t = r.divToInt(i), t.isZero()) Le = n ? 3 : 2;\n    else {\n        if (r = r.minus(t.times(i)), r.lte(o)) return Le = Ms(t) ? n ? 2 : 3 : n ? 4 : 1, r;\n        Le = Ms(t) ? n ? 1 : 4 : n ? 3 : 2;\n    }\n    return r.minus(i).abs();\n}\nfunction Ui(e, r, t, n) {\n    var i, o, s, a, l, u, c, p, d, f = e.constructor, g = t !== void 0;\n    if (g ? (ie(t, 1, Ke), n === void 0 ? n = f.rounding : ie(n, 0, 8)) : (t = f.precision, n = f.rounding), !e.isFinite()) c = Hs(e);\n    else {\n        for(c = xe(e), s = c.indexOf(\".\"), g ? (i = 2, r == 16 ? t = t * 4 - 3 : r == 8 && (t = t * 3 - 2)) : i = r, s >= 0 && (c = c.replace(\".\", \"\"), d = new f(1), d.e = c.length - s, d.d = un(xe(d), 10, i), d.e = d.d.length), p = un(c, 10, i), o = l = p.length; p[--l] == 0;)p.pop();\n        if (!p[0]) c = g ? \"0p+0\" : \"0\";\n        else {\n            if (s < 0 ? o-- : (e = new f(e), e.d = p, e.e = o, e = L(e, d, t, n, 0, i), p = e.d, o = e.e, u = js), s = p[t], a = i / 2, u = u || p[t + 1] !== void 0, u = n < 4 ? (s !== void 0 || u) && (n === 0 || n === (e.s < 0 ? 3 : 2)) : s > a || s === a && (n === 4 || u || n === 6 && p[t - 1] & 1 || n === (e.s < 0 ? 8 : 7)), p.length = t, u) for(; ++p[--t] > i - 1;)p[t] = 0, t || (++o, p.unshift(1));\n            for(l = p.length; !p[l - 1]; --l);\n            for(s = 0, c = \"\"; s < l; s++)c += qi.charAt(p[s]);\n            if (g) {\n                if (l > 1) if (r == 16 || r == 8) {\n                    for(s = r == 16 ? 4 : 3, --l; l % s; l++)c += \"0\";\n                    for(p = un(c, i, r), l = p.length; !p[l - 1]; --l);\n                    for(s = 1, c = \"1.\"; s < l; s++)c += qi.charAt(p[s]);\n                } else c = c.charAt(0) + \".\" + c.slice(1);\n                c = c + (o < 0 ? \"p\" : \"p+\") + o;\n            } else if (o < 0) {\n                for(; ++o;)c = \"0\" + c;\n                c = \"0.\" + c;\n            } else if (++o > l) for(o -= l; o--;)c += \"0\";\n            else o < l && (c = c.slice(0, o) + \".\" + c.slice(o));\n        }\n        c = (r == 16 ? \"0x\" : r == 2 ? \"0b\" : r == 8 ? \"0o\" : \"\") + c;\n    }\n    return e.s < 0 ? \"-\" + c : c;\n}\nfunction $s(e, r) {\n    if (e.length > r) return e.length = r, !0;\n}\nfunction Sp(e) {\n    return new this(e).abs();\n}\nfunction Rp(e) {\n    return new this(e).acos();\n}\nfunction Cp(e) {\n    return new this(e).acosh();\n}\nfunction Ap(e, r) {\n    return new this(e).plus(r);\n}\nfunction Ip(e) {\n    return new this(e).asin();\n}\nfunction kp(e) {\n    return new this(e).asinh();\n}\nfunction Op(e) {\n    return new this(e).atan();\n}\nfunction Dp(e) {\n    return new this(e).atanh();\n}\nfunction _p(e, r) {\n    e = new this(e), r = new this(r);\n    var t, n = this.precision, i = this.rounding, o = n + 4;\n    return !e.s || !r.s ? t = new this(NaN) : !e.d && !r.d ? (t = we(this, o, 1).times(r.s > 0 ? .25 : .75), t.s = e.s) : !r.d || e.isZero() ? (t = r.s < 0 ? we(this, n, i) : new this(0), t.s = e.s) : !e.d || r.isZero() ? (t = we(this, o, 1).times(.5), t.s = e.s) : r.s < 0 ? (this.precision = o, this.rounding = 1, t = this.atan(L(e, r, o, 1)), r = we(this, o, 1), this.precision = n, this.rounding = i, t = e.s < 0 ? t.minus(r) : t.plus(r)) : t = this.atan(L(e, r, o, 1)), t;\n}\nfunction Np(e) {\n    return new this(e).cbrt();\n}\nfunction Lp(e) {\n    return y(e = new this(e), e.e + 1, 2);\n}\nfunction Fp(e, r, t) {\n    return new this(e).clamp(r, t);\n}\nfunction Mp(e) {\n    if (!e || typeof e != \"object\") throw Error(fn + \"Object expected\");\n    var r, t, n, i = e.defaults === !0, o = [\n        \"precision\",\n        1,\n        Ke,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -Pr,\n        0,\n        \"toExpPos\",\n        0,\n        Pr,\n        \"maxE\",\n        0,\n        Pr,\n        \"minE\",\n        -Pr,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(r = 0; r < o.length; r += 3)if (t = o[r], i && (this[t] = ji[t]), (n = e[t]) !== void 0) if (X(n) === n && n >= o[r + 1] && n <= o[r + 2]) this[t] = n;\n    else throw Error(He + t + \": \" + n);\n    if (t = \"crypto\", i && (this[t] = ji[t]), (n = e[t]) !== void 0) if (n === !0 || n === !1 || n === 0 || n === 1) if (n) if (typeof crypto < \"u\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[t] = !0;\n    else throw Error(Bs);\n    else this[t] = !1;\n    else throw Error(He + t + \": \" + n);\n    return this;\n}\nfunction $p(e) {\n    return new this(e).cos();\n}\nfunction qp(e) {\n    return new this(e).cosh();\n}\nfunction Ys(e) {\n    var r, t, n;\n    function i(o) {\n        var s, a, l, u = this;\n        if (!(u instanceof i)) return new i(o);\n        if (u.constructor = i, qs(o)) {\n            u.s = o.s, w ? !o.d || o.e > i.maxE ? (u.e = NaN, u.d = null) : o.e < i.minE ? (u.e = 0, u.d = [\n                0\n            ]) : (u.e = o.e, u.d = o.d.slice()) : (u.e = o.e, u.d = o.d ? o.d.slice() : o.d);\n            return;\n        }\n        if (l = typeof o, l === \"number\") {\n            if (o === 0) {\n                u.s = 1 / o < 0 ? -1 : 1, u.e = 0, u.d = [\n                    0\n                ];\n                return;\n            }\n            if (o < 0 ? (o = -o, u.s = -1) : u.s = 1, o === ~~o && o < 1e7) {\n                for(s = 0, a = o; a >= 10; a /= 10)s++;\n                w ? s > i.maxE ? (u.e = NaN, u.d = null) : s < i.minE ? (u.e = 0, u.d = [\n                    0\n                ]) : (u.e = s, u.d = [\n                    o\n                ]) : (u.e = s, u.d = [\n                    o\n                ]);\n                return;\n            }\n            if (o * 0 !== 0) {\n                o || (u.s = NaN), u.e = NaN, u.d = null;\n                return;\n            }\n            return cn(u, o.toString());\n        }\n        if (l === \"string\") return (a = o.charCodeAt(0)) === 45 ? (o = o.slice(1), u.s = -1) : (a === 43 && (o = o.slice(1)), u.s = 1), Gs.test(o) ? cn(u, o) : vp(u, o);\n        if (l === \"bigint\") return o < 0 ? (o = -o, u.s = -1) : u.s = 1, cn(u, o.toString());\n        throw Error(He + o);\n    }\n    if (i.prototype = m, i.ROUND_UP = 0, i.ROUND_DOWN = 1, i.ROUND_CEIL = 2, i.ROUND_FLOOR = 3, i.ROUND_HALF_UP = 4, i.ROUND_HALF_DOWN = 5, i.ROUND_HALF_EVEN = 6, i.ROUND_HALF_CEIL = 7, i.ROUND_HALF_FLOOR = 8, i.EUCLID = 9, i.config = i.set = Mp, i.clone = Ys, i.isDecimal = qs, i.abs = Sp, i.acos = Rp, i.acosh = Cp, i.add = Ap, i.asin = Ip, i.asinh = kp, i.atan = Op, i.atanh = Dp, i.atan2 = _p, i.cbrt = Np, i.ceil = Lp, i.clamp = Fp, i.cos = $p, i.cosh = qp, i.div = jp, i.exp = Vp, i.floor = Bp, i.hypot = Up, i.ln = Gp, i.log = Qp, i.log10 = Jp, i.log2 = Wp, i.max = Hp, i.min = Kp, i.mod = Yp, i.mul = zp, i.pow = Zp, i.random = Xp, i.round = ed, i.sign = rd, i.sin = td, i.sinh = nd, i.sqrt = id, i.sub = od, i.sum = sd, i.tan = ad, i.tanh = ld, i.trunc = ud, e === void 0 && (e = {}), e && e.defaults !== !0) for(n = [\n        \"precision\",\n        \"rounding\",\n        \"toExpNeg\",\n        \"toExpPos\",\n        \"maxE\",\n        \"minE\",\n        \"modulo\",\n        \"crypto\"\n    ], r = 0; r < n.length;)e.hasOwnProperty(t = n[r++]) || (e[t] = this[t]);\n    return i.config(e), i;\n}\nfunction jp(e, r) {\n    return new this(e).div(r);\n}\nfunction Vp(e) {\n    return new this(e).exp();\n}\nfunction Bp(e) {\n    return y(e = new this(e), e.e + 1, 3);\n}\nfunction Up() {\n    var e, r, t = new this(0);\n    for(w = !1, e = 0; e < arguments.length;)if (r = new this(arguments[e++]), r.d) t.d && (t = t.plus(r.times(r)));\n    else {\n        if (r.s) return w = !0, new this(1 / 0);\n        t = r;\n    }\n    return w = !0, t.sqrt();\n}\nfunction qs(e) {\n    return e instanceof sr || e && e.toStringTag === Us || !1;\n}\nfunction Gp(e) {\n    return new this(e).ln();\n}\nfunction Qp(e, r) {\n    return new this(e).log(r);\n}\nfunction Wp(e) {\n    return new this(e).log(2);\n}\nfunction Jp(e) {\n    return new this(e).log(10);\n}\nfunction Hp() {\n    return Js(this, arguments, -1);\n}\nfunction Kp() {\n    return Js(this, arguments, 1);\n}\nfunction Yp(e, r) {\n    return new this(e).mod(r);\n}\nfunction zp(e, r) {\n    return new this(e).mul(r);\n}\nfunction Zp(e, r) {\n    return new this(e).pow(r);\n}\nfunction Xp(e) {\n    var r, t, n, i, o = 0, s = new this(1), a = [];\n    if (e === void 0 ? e = this.precision : ie(e, 1, Ke), n = Math.ceil(e / E), this.crypto) if (crypto.getRandomValues) for(r = crypto.getRandomValues(new Uint32Array(n)); o < n;)i = r[o], i >= 429e7 ? r[o] = crypto.getRandomValues(new Uint32Array(1))[0] : a[o++] = i % 1e7;\n    else if (crypto.randomBytes) {\n        for(r = crypto.randomBytes(n *= 4); o < n;)i = r[o] + (r[o + 1] << 8) + (r[o + 2] << 16) + ((r[o + 3] & 127) << 24), i >= 214e7 ? crypto.randomBytes(4).copy(r, o) : (a.push(i % 1e7), o += 4);\n        o = n / 4;\n    } else throw Error(Bs);\n    else for(; o < n;)a[o++] = Math.random() * 1e7 | 0;\n    for(n = a[--o], e %= E, n && e && (i = U(10, E - e), a[o] = (n / i | 0) * i); a[o] === 0; o--)a.pop();\n    if (o < 0) t = 0, a = [\n        0\n    ];\n    else {\n        for(t = -1; a[0] === 0; t -= E)a.shift();\n        for(n = 1, i = a[0]; i >= 10; i /= 10)n++;\n        n < E && (t -= E - n);\n    }\n    return s.e = t, s.d = a, s;\n}\nfunction ed(e) {\n    return y(e = new this(e), e.e + 1, this.rounding);\n}\nfunction rd(e) {\n    return e = new this(e), e.d ? e.d[0] ? e.s : 0 * e.s : e.s || NaN;\n}\nfunction td(e) {\n    return new this(e).sin();\n}\nfunction nd(e) {\n    return new this(e).sinh();\n}\nfunction id(e) {\n    return new this(e).sqrt();\n}\nfunction od(e, r) {\n    return new this(e).sub(r);\n}\nfunction sd() {\n    var e = 0, r = arguments, t = new this(r[e]);\n    for(w = !1; t.s && ++e < r.length;)t = t.plus(r[e]);\n    return w = !0, y(t, this.precision, this.rounding);\n}\nfunction ad(e) {\n    return new this(e).tan();\n}\nfunction ld(e) {\n    return new this(e).tanh();\n}\nfunction ud(e) {\n    return y(e = new this(e), e.e + 1, 1);\n}\nm[Symbol.for(\"nodejs.util.inspect.custom\")] = m.toString;\nm[Symbol.toStringTag] = \"Decimal\";\nvar sr = m.constructor = Ys(ji);\npn = new sr(pn);\ndn = new sr(dn);\nvar Pe = sr;\nfunction Tr(e) {\n    return e === null ? e : Array.isArray(e) ? e.map(Tr) : typeof e == \"object\" ? cd(e) ? pd(e) : e.constructor !== null && e.constructor.name !== \"Object\" ? e : xr(e, Tr) : e;\n}\nfunction cd(e) {\n    return e !== null && typeof e == \"object\" && typeof e.$type == \"string\";\n}\nfunction pd({ $type: e, value: r }) {\n    switch(e){\n        case \"BigInt\":\n            return BigInt(r);\n        case \"Bytes\":\n            {\n                let { buffer: t, byteOffset: n, byteLength: i } = Buffer.from(r, \"base64\");\n                return new Uint8Array(t, n, i);\n            }\n        case \"DateTime\":\n            return new Date(r);\n        case \"Decimal\":\n            return new Pe(r);\n        case \"Json\":\n            return JSON.parse(r);\n        default:\n            _e(r, \"Unknown tagged value\");\n    }\n}\nvar ve = class {\n    get(r) {\n        return this._map.get(r)?.value;\n    }\n    set(r, t) {\n        this._map.set(r, {\n            value: t\n        });\n    }\n    getOrCreate(r, t) {\n        let n = this._map.get(r);\n        if (n) return n.value;\n        let i = t();\n        return this.set(r, i), i;\n    }\n    constructor(){\n        this._map = new Map;\n    }\n};\nfunction Ye(e) {\n    return e.substring(0, 1).toLowerCase() + e.substring(1);\n}\nfunction zs(e, r) {\n    let t = {};\n    for (let n of e){\n        let i = n[r];\n        t[i] = n;\n    }\n    return t;\n}\nfunction lt(e) {\n    let r;\n    return {\n        get () {\n            return r || (r = {\n                value: e()\n            }), r.value;\n        }\n    };\n}\nfunction Zs(e) {\n    return {\n        models: Gi(e.models),\n        enums: Gi(e.enums),\n        types: Gi(e.types)\n    };\n}\nfunction Gi(e) {\n    let r = {};\n    for (let { name: t, ...n } of e)r[t] = n;\n    return r;\n}\nfunction Sr(e) {\n    return e instanceof Date || Object.prototype.toString.call(e) === \"[object Date]\";\n}\nfunction yn(e) {\n    return e.toString() !== \"Invalid Date\";\n}\nfunction Rr(e) {\n    return sr.isDecimal(e) ? !0 : e !== null && typeof e == \"object\" && typeof e.s == \"number\" && typeof e.e == \"number\" && typeof e.toFixed == \"function\" && Array.isArray(e.d);\n}\nvar ut = {};\ntr(ut, {\n    ModelAction: ()=>Cr,\n    datamodelEnumToSchemaEnum: ()=>dd\n});\nfunction dd(e) {\n    return {\n        name: e.name,\n        values: e.values.map((r)=>r.name)\n    };\n}\nvar Cr = ((b)=>(b.findUnique = \"findUnique\", b.findUniqueOrThrow = \"findUniqueOrThrow\", b.findFirst = \"findFirst\", b.findFirstOrThrow = \"findFirstOrThrow\", b.findMany = \"findMany\", b.create = \"create\", b.createMany = \"createMany\", b.createManyAndReturn = \"createManyAndReturn\", b.update = \"update\", b.updateMany = \"updateMany\", b.updateManyAndReturn = \"updateManyAndReturn\", b.upsert = \"upsert\", b.delete = \"delete\", b.deleteMany = \"deleteMany\", b.groupBy = \"groupBy\", b.count = \"count\", b.aggregate = \"aggregate\", b.findRaw = \"findRaw\", b.aggregateRaw = \"aggregateRaw\", b))(Cr || {});\nvar na = k(Ci());\nvar ta = k(__webpack_require__(/*! node:fs */ \"node:fs\"));\nvar Xs = {\n    keyword: Oe,\n    entity: Oe,\n    value: (e)=>W(nr(e)),\n    punctuation: nr,\n    directive: Oe,\n    function: Oe,\n    variable: (e)=>W(nr(e)),\n    string: (e)=>W(qe(e)),\n    boolean: ke,\n    number: Oe,\n    comment: Hr\n};\nvar md = (e)=>e, bn = {}, fd = 0, P = {\n    manual: bn.Prism && bn.Prism.manual,\n    disableWorkerMessageHandler: bn.Prism && bn.Prism.disableWorkerMessageHandler,\n    util: {\n        encode: function(e) {\n            if (e instanceof ge) {\n                let r = e;\n                return new ge(r.type, P.util.encode(r.content), r.alias);\n            } else return Array.isArray(e) ? e.map(P.util.encode) : e.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        },\n        type: function(e) {\n            return Object.prototype.toString.call(e).slice(8, -1);\n        },\n        objId: function(e) {\n            return e.__id || Object.defineProperty(e, \"__id\", {\n                value: ++fd\n            }), e.__id;\n        },\n        clone: function e(r, t) {\n            let n, i, o = P.util.type(r);\n            switch(t = t || {}, o){\n                case \"Object\":\n                    if (i = P.util.objId(r), t[i]) return t[i];\n                    n = {}, t[i] = n;\n                    for(let s in r)r.hasOwnProperty(s) && (n[s] = e(r[s], t));\n                    return n;\n                case \"Array\":\n                    return i = P.util.objId(r), t[i] ? t[i] : (n = [], t[i] = n, r.forEach(function(s, a) {\n                        n[a] = e(s, t);\n                    }), n);\n                default:\n                    return r;\n            }\n        }\n    },\n    languages: {\n        extend: function(e, r) {\n            let t = P.util.clone(P.languages[e]);\n            for(let n in r)t[n] = r[n];\n            return t;\n        },\n        insertBefore: function(e, r, t, n) {\n            n = n || P.languages;\n            let i = n[e], o = {};\n            for(let a in i)if (i.hasOwnProperty(a)) {\n                if (a == r) for(let l in t)t.hasOwnProperty(l) && (o[l] = t[l]);\n                t.hasOwnProperty(a) || (o[a] = i[a]);\n            }\n            let s = n[e];\n            return n[e] = o, P.languages.DFS(P.languages, function(a, l) {\n                l === s && a != e && (this[a] = o);\n            }), o;\n        },\n        DFS: function e(r, t, n, i) {\n            i = i || {};\n            let o = P.util.objId;\n            for(let s in r)if (r.hasOwnProperty(s)) {\n                t.call(r, s, r[s], n || s);\n                let a = r[s], l = P.util.type(a);\n                l === \"Object\" && !i[o(a)] ? (i[o(a)] = !0, e(a, t, null, i)) : l === \"Array\" && !i[o(a)] && (i[o(a)] = !0, e(a, t, s, i));\n            }\n        }\n    },\n    plugins: {},\n    highlight: function(e, r, t) {\n        let n = {\n            code: e,\n            grammar: r,\n            language: t\n        };\n        return P.hooks.run(\"before-tokenize\", n), n.tokens = P.tokenize(n.code, n.grammar), P.hooks.run(\"after-tokenize\", n), ge.stringify(P.util.encode(n.tokens), n.language);\n    },\n    matchGrammar: function(e, r, t, n, i, o, s) {\n        for(let h in t){\n            if (!t.hasOwnProperty(h) || !t[h]) continue;\n            if (h == s) return;\n            let I = t[h];\n            I = P.util.type(I) === \"Array\" ? I : [\n                I\n            ];\n            for(let v = 0; v < I.length; ++v){\n                let S = I[v], b = S.inside, O = !!S.lookbehind, me = !!S.greedy, ae = 0, Jr = S.alias;\n                if (me && !S.pattern.global) {\n                    let V = S.pattern.toString().match(/[imuy]*$/)[0];\n                    S.pattern = RegExp(S.pattern.source, V + \"g\");\n                }\n                S = S.pattern || S;\n                for(let V = n, te = i; V < r.length; te += r[V].length, ++V){\n                    let Ae = r[V];\n                    if (r.length > e.length) return;\n                    if (Ae instanceof ge) continue;\n                    if (me && V != r.length - 1) {\n                        S.lastIndex = te;\n                        var p = S.exec(e);\n                        if (!p) break;\n                        var c = p.index + (O ? p[1].length : 0), d = p.index + p[0].length, a = V, l = te;\n                        for(let _ = r.length; a < _ && (l < d || !r[a].type && !r[a - 1].greedy); ++a)l += r[a].length, c >= l && (++V, te = l);\n                        if (r[V] instanceof ge) continue;\n                        u = a - V, Ae = e.slice(te, l), p.index -= te;\n                    } else {\n                        S.lastIndex = 0;\n                        var p = S.exec(Ae), u = 1;\n                    }\n                    if (!p) {\n                        if (o) break;\n                        continue;\n                    }\n                    O && (ae = p[1] ? p[1].length : 0);\n                    var c = p.index + ae, p = p[0].slice(ae), d = c + p.length, f = Ae.slice(0, c), g = Ae.slice(d);\n                    let H = [\n                        V,\n                        u\n                    ];\n                    f && (++V, te += f.length, H.push(f));\n                    let fr = new ge(h, b ? P.tokenize(p, b) : p, Jr, p, me);\n                    if (H.push(fr), g && H.push(g), Array.prototype.splice.apply(r, H), u != 1 && P.matchGrammar(e, r, t, V, te, !0, h), o) break;\n                }\n            }\n        }\n    },\n    tokenize: function(e, r) {\n        let t = [\n            e\n        ], n = r.rest;\n        if (n) {\n            for(let i in n)r[i] = n[i];\n            delete r.rest;\n        }\n        return P.matchGrammar(e, t, r, 0, 0, !1), t;\n    },\n    hooks: {\n        all: {},\n        add: function(e, r) {\n            let t = P.hooks.all;\n            t[e] = t[e] || [], t[e].push(r);\n        },\n        run: function(e, r) {\n            let t = P.hooks.all[e];\n            if (!(!t || !t.length)) for(var n = 0, i; i = t[n++];)i(r);\n        }\n    },\n    Token: ge\n};\nP.languages.clike = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n        lookbehind: !0,\n        inside: {\n            punctuation: /[.\\\\]/\n        }\n    },\n    keyword: /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    function: /\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n    punctuation: /[{}[\\];(),.:]/\n};\nP.languages.javascript = P.languages.extend(\"clike\", {\n    \"class-name\": [\n        P.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n            lookbehind: !0\n        }\n    ],\n    keyword: [\n        {\n            pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: !0\n        }\n    ],\n    number: /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n    function: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    operator: /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nP.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nP.languages.insertBefore(\"javascript\", \"keyword\", {\n    regex: {\n        pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"function-variable\": {\n        pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n        alias: \"function\"\n    },\n    parameter: [\n        {\n            pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n            lookbehind: !0,\n            inside: P.languages.javascript\n        },\n        {\n            pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n            inside: P.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n            lookbehind: !0,\n            inside: P.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n            lookbehind: !0,\n            inside: P.languages.javascript\n        }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nP.languages.markup && P.languages.markup.tag.addInlined(\"script\", \"javascript\");\nP.languages.js = P.languages.javascript;\nP.languages.typescript = P.languages.extend(\"javascript\", {\n    keyword: /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n    builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nP.languages.ts = P.languages.typescript;\nfunction ge(e, r, t, n, i) {\n    this.type = e, this.content = r, this.alias = t, this.length = (n || \"\").length | 0, this.greedy = !!i;\n}\nge.stringify = function(e, r) {\n    return typeof e == \"string\" ? e : Array.isArray(e) ? e.map(function(t) {\n        return ge.stringify(t, r);\n    }).join(\"\") : gd(e.type)(e.content);\n};\nfunction gd(e) {\n    return Xs[e] || md;\n}\nfunction ea(e) {\n    return hd(e, P.languages.javascript);\n}\nfunction hd(e, r) {\n    return P.tokenize(e, r).map((n)=>ge.stringify(n)).join(\"\");\n}\nfunction ra(e) {\n    return Si(e);\n}\nvar En = class e {\n    static read(r) {\n        let t;\n        try {\n            t = ta.default.readFileSync(r, \"utf-8\");\n        } catch  {\n            return null;\n        }\n        return e.fromContent(t);\n    }\n    static fromContent(r) {\n        let t = r.split(/\\r?\\n/);\n        return new e(1, t);\n    }\n    constructor(r, t){\n        this.firstLineNumber = r, this.lines = t;\n    }\n    get lastLineNumber() {\n        return this.firstLineNumber + this.lines.length - 1;\n    }\n    mapLineAt(r, t) {\n        if (r < this.firstLineNumber || r > this.lines.length + this.firstLineNumber) return this;\n        let n = r - this.firstLineNumber, i = [\n            ...this.lines\n        ];\n        return i[n] = t(i[n]), new e(this.firstLineNumber, i);\n    }\n    mapLines(r) {\n        return new e(this.firstLineNumber, this.lines.map((t, n)=>r(t, this.firstLineNumber + n)));\n    }\n    lineAt(r) {\n        return this.lines[r - this.firstLineNumber];\n    }\n    prependSymbolAt(r, t) {\n        return this.mapLines((n, i)=>i === r ? `${t} ${n}` : `  ${n}`);\n    }\n    slice(r, t) {\n        let n = this.lines.slice(r - 1, t).join(`\n`);\n        return new e(r, ra(n).split(`\n`));\n    }\n    highlight() {\n        let r = ea(this.toString());\n        return new e(this.firstLineNumber, r.split(`\n`));\n    }\n    toString() {\n        return this.lines.join(`\n`);\n    }\n};\nvar yd = {\n    red: ce,\n    gray: Hr,\n    dim: Ie,\n    bold: W,\n    underline: Y,\n    highlightSource: (e)=>e.highlight()\n}, bd = {\n    red: (e)=>e,\n    gray: (e)=>e,\n    dim: (e)=>e,\n    bold: (e)=>e,\n    underline: (e)=>e,\n    highlightSource: (e)=>e\n};\nfunction Ed({ message: e, originalMethod: r, isPanic: t, callArguments: n }) {\n    return {\n        functionName: `prisma.${r}()`,\n        message: e,\n        isPanic: t ?? !1,\n        callArguments: n\n    };\n}\nfunction wd({ callsite: e, message: r, originalMethod: t, isPanic: n, callArguments: i }, o) {\n    let s = Ed({\n        message: r,\n        originalMethod: t,\n        isPanic: n,\n        callArguments: i\n    });\n    if (!e || \"undefined\" < \"u\" || \"development\" === \"production\") return s;\n    let a = e.getLocation();\n    if (!a || !a.lineNumber || !a.columnNumber) return s;\n    let l = Math.max(1, a.lineNumber - 3), u = En.read(a.fileName)?.slice(l, a.lineNumber), c = u?.lineAt(a.lineNumber);\n    if (u && c) {\n        let p = Pd(c), d = xd(c);\n        if (!d) return s;\n        s.functionName = `${d.code})`, s.location = a, n || (u = u.mapLineAt(a.lineNumber, (g)=>g.slice(0, d.openingBraceIndex))), u = o.highlightSource(u);\n        let f = String(u.lastLineNumber).length;\n        if (s.contextLines = u.mapLines((g, h)=>o.gray(String(h).padStart(f)) + \" \" + g).mapLines((g)=>o.dim(g)).prependSymbolAt(a.lineNumber, o.bold(o.red(\"\\u2192\"))), i) {\n            let g = p + f + 1;\n            g += 2, s.callArguments = (0, na.default)(i, g).slice(g);\n        }\n    }\n    return s;\n}\nfunction xd(e) {\n    let r = Object.keys(Cr).join(\"|\"), n = new RegExp(String.raw`\\.(${r})\\(`).exec(e);\n    if (n) {\n        let i = n.index + n[0].length, o = e.lastIndexOf(\" \", n.index) + 1;\n        return {\n            code: e.slice(o, i),\n            openingBraceIndex: i\n        };\n    }\n    return null;\n}\nfunction Pd(e) {\n    let r = 0;\n    for(let t = 0; t < e.length; t++){\n        if (e.charAt(t) !== \" \") return r;\n        r++;\n    }\n    return r;\n}\nfunction vd({ functionName: e, location: r, message: t, isPanic: n, contextLines: i, callArguments: o }, s) {\n    let a = [\n        \"\"\n    ], l = r ? \" in\" : \":\";\n    if (n ? (a.push(s.red(`Oops, an unknown error occurred! This is ${s.bold(\"on us\")}, you did nothing wrong.`)), a.push(s.red(`It occurred in the ${s.bold(`\\`${e}\\``)} invocation${l}`))) : a.push(s.red(`Invalid ${s.bold(`\\`${e}\\``)} invocation${l}`)), r && a.push(s.underline(Td(r))), i) {\n        a.push(\"\");\n        let u = [\n            i.toString()\n        ];\n        o && (u.push(o), u.push(s.dim(\")\"))), a.push(u.join(\"\")), o && a.push(\"\");\n    } else a.push(\"\"), o && a.push(o), a.push(\"\");\n    return a.push(t), a.join(`\n`);\n}\nfunction Td(e) {\n    let r = [\n        e.fileName\n    ];\n    return e.lineNumber && r.push(String(e.lineNumber)), e.columnNumber && r.push(String(e.columnNumber)), r.join(\":\");\n}\nfunction wn(e) {\n    let r = e.showColors ? yd : bd, t;\n    return t = wd(e, r), vd(t, r);\n}\nvar da = k(Qi());\nfunction aa(e, r, t) {\n    let n = la(e), i = Sd(n), o = Cd(i);\n    o ? xn(o, r, t) : r.addErrorMessage(()=>\"Unknown error\");\n}\nfunction la(e) {\n    return e.errors.flatMap((r)=>r.kind === \"Union\" ? la(r) : [\n            r\n        ]);\n}\nfunction Sd(e) {\n    let r = new Map, t = [];\n    for (let n of e){\n        if (n.kind !== \"InvalidArgumentType\") {\n            t.push(n);\n            continue;\n        }\n        let i = `${n.selectionPath.join(\".\")}:${n.argumentPath.join(\".\")}`, o = r.get(i);\n        o ? r.set(i, {\n            ...n,\n            argument: {\n                ...n.argument,\n                typeNames: Rd(o.argument.typeNames, n.argument.typeNames)\n            }\n        }) : r.set(i, n);\n    }\n    return t.push(...r.values()), t;\n}\nfunction Rd(e, r) {\n    return [\n        ...new Set(e.concat(r))\n    ];\n}\nfunction Cd(e) {\n    return $i(e, (r, t)=>{\n        let n = oa(r), i = oa(t);\n        return n !== i ? n - i : sa(r) - sa(t);\n    });\n}\nfunction oa(e) {\n    let r = 0;\n    return Array.isArray(e.selectionPath) && (r += e.selectionPath.length), Array.isArray(e.argumentPath) && (r += e.argumentPath.length), r;\n}\nfunction sa(e) {\n    switch(e.kind){\n        case \"InvalidArgumentValue\":\n        case \"ValueTooLarge\":\n            return 20;\n        case \"InvalidArgumentType\":\n            return 10;\n        case \"RequiredArgumentMissing\":\n            return -10;\n        default:\n            return 0;\n    }\n}\nvar ue = class {\n    constructor(r, t){\n        this.isRequired = !1;\n        this.name = r;\n        this.value = t;\n    }\n    makeRequired() {\n        return this.isRequired = !0, this;\n    }\n    write(r) {\n        let { colors: { green: t } } = r.context;\n        r.addMarginSymbol(t(this.isRequired ? \"+\" : \"?\")), r.write(t(this.name)), this.isRequired || r.write(t(\"?\")), r.write(t(\": \")), typeof this.value == \"string\" ? r.write(t(this.value)) : r.write(this.value);\n    }\n};\nca();\nvar Ar = class {\n    constructor(r = 0, t){\n        this.lines = [];\n        this.currentLine = \"\";\n        this.currentIndent = 0;\n        this.context = t;\n        this.currentIndent = r;\n    }\n    write(r) {\n        return typeof r == \"string\" ? this.currentLine += r : r.write(this), this;\n    }\n    writeJoined(r, t, n = (i, o)=>o.write(i)) {\n        let i = t.length - 1;\n        for(let o = 0; o < t.length; o++)n(t[o], this), o !== i && this.write(r);\n        return this;\n    }\n    writeLine(r) {\n        return this.write(r).newLine();\n    }\n    newLine() {\n        this.lines.push(this.indentedCurrentLine()), this.currentLine = \"\", this.marginSymbol = void 0;\n        let r = this.afterNextNewLineCallback;\n        return this.afterNextNewLineCallback = void 0, r?.(), this;\n    }\n    withIndent(r) {\n        return this.indent(), r(this), this.unindent(), this;\n    }\n    afterNextNewline(r) {\n        return this.afterNextNewLineCallback = r, this;\n    }\n    indent() {\n        return this.currentIndent++, this;\n    }\n    unindent() {\n        return this.currentIndent > 0 && this.currentIndent--, this;\n    }\n    addMarginSymbol(r) {\n        return this.marginSymbol = r, this;\n    }\n    toString() {\n        return this.lines.concat(this.indentedCurrentLine()).join(`\n`);\n    }\n    getCurrentLineLength() {\n        return this.currentLine.length;\n    }\n    indentedCurrentLine() {\n        let r = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);\n        return this.marginSymbol ? this.marginSymbol + r.slice(1) : r;\n    }\n};\nua();\nvar Pn = class {\n    constructor(r){\n        this.value = r;\n    }\n    write(r) {\n        r.write(this.value);\n    }\n    markAsError() {\n        this.value.markAsError();\n    }\n};\nvar vn = (e)=>e, Tn = {\n    bold: vn,\n    red: vn,\n    green: vn,\n    dim: vn,\n    enabled: !1\n}, pa = {\n    bold: W,\n    red: ce,\n    green: qe,\n    dim: Ie,\n    enabled: !0\n}, Ir = {\n    write (e) {\n        e.writeLine(\",\");\n    }\n};\nvar Te = class {\n    constructor(r){\n        this.isUnderlined = !1;\n        this.color = (r)=>r;\n        this.contents = r;\n    }\n    underline() {\n        return this.isUnderlined = !0, this;\n    }\n    setColor(r) {\n        return this.color = r, this;\n    }\n    write(r) {\n        let t = r.getCurrentLineLength();\n        r.write(this.color(this.contents)), this.isUnderlined && r.afterNextNewline(()=>{\n            r.write(\" \".repeat(t)).writeLine(this.color(\"~\".repeat(this.contents.length)));\n        });\n    }\n};\nvar ze = class {\n    markAsError() {\n        return this.hasError = !0, this;\n    }\n    constructor(){\n        this.hasError = !1;\n    }\n};\nvar kr = class extends ze {\n    addItem(r) {\n        return this.items.push(new Pn(r)), this;\n    }\n    getField(r) {\n        return this.items[r];\n    }\n    getPrintWidth() {\n        return this.items.length === 0 ? 2 : Math.max(...this.items.map((t)=>t.value.getPrintWidth())) + 2;\n    }\n    write(r) {\n        if (this.items.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithItems(r);\n    }\n    writeEmpty(r) {\n        let t = new Te(\"[]\");\n        this.hasError && t.setColor(r.context.colors.red).underline(), r.write(t);\n    }\n    writeWithItems(r) {\n        let { colors: t } = r.context;\n        r.writeLine(\"[\").withIndent(()=>r.writeJoined(Ir, this.items).newLine()).write(\"]\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(t.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n    asObject() {}\n    constructor(...args){\n        super(...args), this.items = [];\n    }\n};\nvar Or = class e extends ze {\n    addField(r) {\n        this.fields[r.name] = r;\n    }\n    addSuggestion(r) {\n        this.suggestions.push(r);\n    }\n    getField(r) {\n        return this.fields[r];\n    }\n    getDeepField(r) {\n        let [t, ...n] = r, i = this.getField(t);\n        if (!i) return;\n        let o = i;\n        for (let s of n){\n            let a;\n            if (o.value instanceof e ? a = o.value.getField(s) : o.value instanceof kr && (a = o.value.getField(Number(s))), !a) return;\n            o = a;\n        }\n        return o;\n    }\n    getDeepFieldValue(r) {\n        return r.length === 0 ? this : this.getDeepField(r)?.value;\n    }\n    hasField(r) {\n        return !!this.getField(r);\n    }\n    removeAllFields() {\n        this.fields = {};\n    }\n    removeField(r) {\n        delete this.fields[r];\n    }\n    getFields() {\n        return this.fields;\n    }\n    isEmpty() {\n        return Object.keys(this.fields).length === 0;\n    }\n    getFieldValue(r) {\n        return this.getField(r)?.value;\n    }\n    getDeepSubSelectionValue(r) {\n        let t = this;\n        for (let n of r){\n            if (!(t instanceof e)) return;\n            let i = t.getSubSelectionValue(n);\n            if (!i) return;\n            t = i;\n        }\n        return t;\n    }\n    getDeepSelectionParent(r) {\n        let t = this.getSelectionParent();\n        if (!t) return;\n        let n = t;\n        for (let i of r){\n            let o = n.value.getFieldValue(i);\n            if (!o || !(o instanceof e)) return;\n            let s = o.getSelectionParent();\n            if (!s) return;\n            n = s;\n        }\n        return n;\n    }\n    getSelectionParent() {\n        let r = this.getField(\"select\")?.value.asObject();\n        if (r) return {\n            kind: \"select\",\n            value: r\n        };\n        let t = this.getField(\"include\")?.value.asObject();\n        if (t) return {\n            kind: \"include\",\n            value: t\n        };\n    }\n    getSubSelectionValue(r) {\n        return this.getSelectionParent()?.value.fields[r].value;\n    }\n    getPrintWidth() {\n        let r = Object.values(this.fields);\n        return r.length == 0 ? 2 : Math.max(...r.map((n)=>n.getPrintWidth())) + 2;\n    }\n    write(r) {\n        let t = Object.values(this.fields);\n        if (t.length === 0 && this.suggestions.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithContents(r, t);\n    }\n    asObject() {\n        return this;\n    }\n    writeEmpty(r) {\n        let t = new Te(\"{}\");\n        this.hasError && t.setColor(r.context.colors.red).underline(), r.write(t);\n    }\n    writeWithContents(r, t) {\n        r.writeLine(\"{\").withIndent(()=>{\n            r.writeJoined(Ir, [\n                ...t,\n                ...this.suggestions\n            ]).newLine();\n        }), r.write(\"}\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(r.context.colors.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n    constructor(...args){\n        super(...args), this.fields = {}, this.suggestions = [];\n    }\n};\nvar Q = class extends ze {\n    constructor(t){\n        super();\n        this.text = t;\n    }\n    getPrintWidth() {\n        return this.text.length;\n    }\n    write(t) {\n        let n = new Te(this.text);\n        this.hasError && n.underline().setColor(t.context.colors.red), t.write(n);\n    }\n    asObject() {}\n};\nvar ct = class {\n    addField(r, t) {\n        return this.fields.push({\n            write (n) {\n                let { green: i, dim: o } = n.context.colors;\n                n.write(i(o(`${r}: ${t}`))).addMarginSymbol(i(o(\"+\")));\n            }\n        }), this;\n    }\n    write(r) {\n        let { colors: { green: t } } = r.context;\n        r.writeLine(t(\"{\")).withIndent(()=>{\n            r.writeJoined(Ir, this.fields).newLine();\n        }).write(t(\"}\")).addMarginSymbol(t(\"+\"));\n    }\n    constructor(){\n        this.fields = [];\n    }\n};\nfunction xn(e, r, t) {\n    switch(e.kind){\n        case \"MutuallyExclusiveFields\":\n            Ad(e, r);\n            break;\n        case \"IncludeOnScalar\":\n            Id(e, r);\n            break;\n        case \"EmptySelection\":\n            kd(e, r, t);\n            break;\n        case \"UnknownSelectionField\":\n            Nd(e, r);\n            break;\n        case \"InvalidSelectionValue\":\n            Ld(e, r);\n            break;\n        case \"UnknownArgument\":\n            Fd(e, r);\n            break;\n        case \"UnknownInputField\":\n            Md(e, r);\n            break;\n        case \"RequiredArgumentMissing\":\n            $d(e, r);\n            break;\n        case \"InvalidArgumentType\":\n            qd(e, r);\n            break;\n        case \"InvalidArgumentValue\":\n            jd(e, r);\n            break;\n        case \"ValueTooLarge\":\n            Vd(e, r);\n            break;\n        case \"SomeFieldsMissing\":\n            Bd(e, r);\n            break;\n        case \"TooManyFieldsGiven\":\n            Ud(e, r);\n            break;\n        case \"Union\":\n            aa(e, r, t);\n            break;\n        default:\n            throw new Error(\"not implemented: \" + e.kind);\n    }\n}\nfunction Ad(e, r) {\n    let t = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    t && (t.getField(e.firstField)?.markAsError(), t.getField(e.secondField)?.markAsError()), r.addErrorMessage((n)=>`Please ${n.bold(\"either\")} use ${n.green(`\\`${e.firstField}\\``)} or ${n.green(`\\`${e.secondField}\\``)}, but ${n.red(\"not both\")} at the same time.`);\n}\nfunction Id(e, r) {\n    let [t, n] = pt(e.selectionPath), i = e.outputType, o = r.arguments.getDeepSelectionParent(t)?.value;\n    if (o && (o.getField(n)?.markAsError(), i)) for (let s of i.fields)s.isRelation && o.addSuggestion(new ue(s.name, \"true\"));\n    r.addErrorMessage((s)=>{\n        let a = `Invalid scalar field ${s.red(`\\`${n}\\``)} for ${s.bold(\"include\")} statement`;\n        return i ? a += ` on model ${s.bold(i.name)}. ${dt(s)}` : a += \".\", a += `\nNote that ${s.bold(\"include\")} statements only accept relation fields.`, a;\n    });\n}\nfunction kd(e, r, t) {\n    let n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (n) {\n        let i = n.getField(\"omit\")?.value.asObject();\n        if (i) {\n            Od(e, r, i);\n            return;\n        }\n        if (n.hasField(\"select\")) {\n            Dd(e, r);\n            return;\n        }\n    }\n    if (t?.[Ye(e.outputType.name)]) {\n        _d(e, r);\n        return;\n    }\n    r.addErrorMessage(()=>`Unknown field at \"${e.selectionPath.join(\".\")} selection\"`);\n}\nfunction Od(e, r, t) {\n    t.removeAllFields();\n    for (let n of e.outputType.fields)t.addSuggestion(new ue(n.name, \"false\"));\n    r.addErrorMessage((n)=>`The ${n.red(\"omit\")} statement includes every field of the model ${n.bold(e.outputType.name)}. At least one field must be included in the result`);\n}\nfunction Dd(e, r) {\n    let t = e.outputType, n = r.arguments.getDeepSelectionParent(e.selectionPath)?.value, i = n?.isEmpty() ?? !1;\n    n && (n.removeAllFields(), ga(n, t)), r.addErrorMessage((o)=>i ? `The ${o.red(\"`select`\")} statement for type ${o.bold(t.name)} must not be empty. ${dt(o)}` : `The ${o.red(\"`select`\")} statement for type ${o.bold(t.name)} needs ${o.bold(\"at least one truthy value\")}.`);\n}\nfunction _d(e, r) {\n    let t = new ct;\n    for (let i of e.outputType.fields)i.isRelation || t.addField(i.name, \"false\");\n    let n = new ue(\"omit\", t).makeRequired();\n    if (e.selectionPath.length === 0) r.arguments.addSuggestion(n);\n    else {\n        let [i, o] = pt(e.selectionPath), a = r.arguments.getDeepSelectionParent(i)?.value.asObject()?.getField(o);\n        if (a) {\n            let l = a?.value.asObject() ?? new Or;\n            l.addSuggestion(n), a.value = l;\n        }\n    }\n    r.addErrorMessage((i)=>`The global ${i.red(\"omit\")} configuration excludes every field of the model ${i.bold(e.outputType.name)}. At least one field must be included in the result`);\n}\nfunction Nd(e, r) {\n    let t = ha(e.selectionPath, r);\n    if (t.parentKind !== \"unknown\") {\n        t.field.markAsError();\n        let n = t.parent;\n        switch(t.parentKind){\n            case \"select\":\n                ga(n, e.outputType);\n                break;\n            case \"include\":\n                Gd(n, e.outputType);\n                break;\n            case \"omit\":\n                Qd(n, e.outputType);\n                break;\n        }\n    }\n    r.addErrorMessage((n)=>{\n        let i = [\n            `Unknown field ${n.red(`\\`${t.fieldName}\\``)}`\n        ];\n        return t.parentKind !== \"unknown\" && i.push(`for ${n.bold(t.parentKind)} statement`), i.push(`on model ${n.bold(`\\`${e.outputType.name}\\``)}.`), i.push(dt(n)), i.join(\" \");\n    });\n}\nfunction Ld(e, r) {\n    let t = ha(e.selectionPath, r);\n    t.parentKind !== \"unknown\" && t.field.value.markAsError(), r.addErrorMessage((n)=>`Invalid value for selection field \\`${n.red(t.fieldName)}\\`: ${e.underlyingError}`);\n}\nfunction Fd(e, r) {\n    let t = e.argumentPath[0], n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && (n.getField(t)?.markAsError(), Wd(n, e.arguments)), r.addErrorMessage((i)=>ma(i, t, e.arguments.map((o)=>o.name)));\n}\nfunction Md(e, r) {\n    let [t, n] = pt(e.argumentPath), i = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (i) {\n        i.getDeepField(e.argumentPath)?.markAsError();\n        let o = i.getDeepFieldValue(t)?.asObject();\n        o && ya(o, e.inputType);\n    }\n    r.addErrorMessage((o)=>ma(o, n, e.inputType.fields.map((s)=>s.name)));\n}\nfunction ma(e, r, t) {\n    let n = [\n        `Unknown argument \\`${e.red(r)}\\`.`\n    ], i = Hd(r, t);\n    return i && n.push(`Did you mean \\`${e.green(i)}\\`?`), t.length > 0 && n.push(dt(e)), n.join(\" \");\n}\nfunction $d(e, r) {\n    let t;\n    r.addErrorMessage((l)=>t?.value instanceof Q && t.value.text === \"null\" ? `Argument \\`${l.green(o)}\\` must not be ${l.red(\"null\")}.` : `Argument \\`${l.green(o)}\\` is missing.`);\n    let n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (!n) return;\n    let [i, o] = pt(e.argumentPath), s = new ct, a = n.getDeepFieldValue(i)?.asObject();\n    if (a) if (t = a.getField(o), t && a.removeField(o), e.inputTypes.length === 1 && e.inputTypes[0].kind === \"object\") {\n        for (let l of e.inputTypes[0].fields)s.addField(l.name, l.typeNames.join(\" | \"));\n        a.addSuggestion(new ue(o, s).makeRequired());\n    } else {\n        let l = e.inputTypes.map(fa).join(\" | \");\n        a.addSuggestion(new ue(o, l).makeRequired());\n    }\n}\nfunction fa(e) {\n    return e.kind === \"list\" ? `${fa(e.elementType)}[]` : e.name;\n}\nfunction qd(e, r) {\n    let t = e.argument.name, n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), r.addErrorMessage((i)=>{\n        let o = Sn(\"or\", e.argument.typeNames.map((s)=>i.green(s)));\n        return `Argument \\`${i.bold(t)}\\`: Invalid value provided. Expected ${o}, provided ${i.red(e.inferredType)}.`;\n    });\n}\nfunction jd(e, r) {\n    let t = e.argument.name, n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), r.addErrorMessage((i)=>{\n        let o = [\n            `Invalid value for argument \\`${i.bold(t)}\\``\n        ];\n        if (e.underlyingError && o.push(`: ${e.underlyingError}`), o.push(\".\"), e.argument.typeNames.length > 0) {\n            let s = Sn(\"or\", e.argument.typeNames.map((a)=>i.green(a)));\n            o.push(` Expected ${s}.`);\n        }\n        return o.join(\"\");\n    });\n}\nfunction Vd(e, r) {\n    let t = e.argument.name, n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i;\n    if (n) {\n        let s = n.getDeepField(e.argumentPath)?.value;\n        s?.markAsError(), s instanceof Q && (i = s.text);\n    }\n    r.addErrorMessage((o)=>{\n        let s = [\n            \"Unable to fit value\"\n        ];\n        return i && s.push(o.red(i)), s.push(`into a 64-bit signed integer for field \\`${o.bold(t)}\\``), s.join(\" \");\n    });\n}\nfunction Bd(e, r) {\n    let t = e.argumentPath[e.argumentPath.length - 1], n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (n) {\n        let i = n.getDeepFieldValue(e.argumentPath)?.asObject();\n        i && ya(i, e.inputType);\n    }\n    r.addErrorMessage((i)=>{\n        let o = [\n            `Argument \\`${i.bold(t)}\\` of type ${i.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 ? e.constraints.requiredFields ? o.push(`${i.green(\"at least one of\")} ${Sn(\"or\", e.constraints.requiredFields.map((s)=>`\\`${i.bold(s)}\\``))} arguments.`) : o.push(`${i.green(\"at least one\")} argument.`) : o.push(`${i.green(`at least ${e.constraints.minFieldCount}`)} arguments.`), o.push(dt(i)), o.join(\" \");\n    });\n}\nfunction Ud(e, r) {\n    let t = e.argumentPath[e.argumentPath.length - 1], n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i = [];\n    if (n) {\n        let o = n.getDeepFieldValue(e.argumentPath)?.asObject();\n        o && (o.markAsError(), i = Object.keys(o.getFields()));\n    }\n    r.addErrorMessage((o)=>{\n        let s = [\n            `Argument \\`${o.bold(t)}\\` of type ${o.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 && e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"exactly one\")} argument,`) : e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"at most one\")} argument,`) : s.push(`${o.green(`at most ${e.constraints.maxFieldCount}`)} arguments,`), s.push(`but you provided ${Sn(\"and\", i.map((a)=>o.red(a)))}. Please choose`), e.constraints.maxFieldCount === 1 ? s.push(\"one.\") : s.push(`${e.constraints.maxFieldCount}.`), s.join(\" \");\n    });\n}\nfunction ga(e, r) {\n    for (let t of r.fields)e.hasField(t.name) || e.addSuggestion(new ue(t.name, \"true\"));\n}\nfunction Gd(e, r) {\n    for (let t of r.fields)t.isRelation && !e.hasField(t.name) && e.addSuggestion(new ue(t.name, \"true\"));\n}\nfunction Qd(e, r) {\n    for (let t of r.fields)!e.hasField(t.name) && !t.isRelation && e.addSuggestion(new ue(t.name, \"true\"));\n}\nfunction Wd(e, r) {\n    for (let t of r)e.hasField(t.name) || e.addSuggestion(new ue(t.name, t.typeNames.join(\" | \")));\n}\nfunction ha(e, r) {\n    let [t, n] = pt(e), i = r.arguments.getDeepSubSelectionValue(t)?.asObject();\n    if (!i) return {\n        parentKind: \"unknown\",\n        fieldName: n\n    };\n    let o = i.getFieldValue(\"select\")?.asObject(), s = i.getFieldValue(\"include\")?.asObject(), a = i.getFieldValue(\"omit\")?.asObject(), l = o?.getField(n);\n    return o && l ? {\n        parentKind: \"select\",\n        parent: o,\n        field: l,\n        fieldName: n\n    } : (l = s?.getField(n), s && l ? {\n        parentKind: \"include\",\n        field: l,\n        parent: s,\n        fieldName: n\n    } : (l = a?.getField(n), a && l ? {\n        parentKind: \"omit\",\n        field: l,\n        parent: a,\n        fieldName: n\n    } : {\n        parentKind: \"unknown\",\n        fieldName: n\n    }));\n}\nfunction ya(e, r) {\n    if (r.kind === \"object\") for (let t of r.fields)e.hasField(t.name) || e.addSuggestion(new ue(t.name, t.typeNames.join(\" | \")));\n}\nfunction pt(e) {\n    let r = [\n        ...e\n    ], t = r.pop();\n    if (!t) throw new Error(\"unexpected empty path\");\n    return [\n        r,\n        t\n    ];\n}\nfunction dt({ green: e, enabled: r }) {\n    return \"Available options are \" + (r ? `listed in ${e(\"green\")}` : \"marked with ?\") + \".\";\n}\nfunction Sn(e, r) {\n    if (r.length === 1) return r[0];\n    let t = [\n        ...r\n    ], n = t.pop();\n    return `${t.join(\", \")} ${e} ${n}`;\n}\nvar Jd = 3;\nfunction Hd(e, r) {\n    let t = 1 / 0, n;\n    for (let i of r){\n        let o = (0, da.default)(e, i);\n        o > Jd || o < t && (t = o, n = i);\n    }\n    return n;\n}\nvar mt = class {\n    constructor(r, t, n, i, o){\n        this.modelName = r, this.name = t, this.typeName = n, this.isList = i, this.isEnum = o;\n    }\n    _toGraphQLInputType() {\n        let r = this.isList ? \"List\" : \"\", t = this.isEnum ? \"Enum\" : \"\";\n        return `${r}${t}${this.typeName}FieldRefInput<${this.modelName}>`;\n    }\n};\nfunction Dr(e) {\n    return e instanceof mt;\n}\nvar Rn = Symbol(), Ji = new WeakMap, Fe = class {\n    constructor(r){\n        r === Rn ? Ji.set(this, `Prisma.${this._getName()}`) : Ji.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);\n    }\n    _getName() {\n        return this.constructor.name;\n    }\n    toString() {\n        return Ji.get(this);\n    }\n}, ft = class extends Fe {\n    _getNamespace() {\n        return \"NullTypes\";\n    }\n}, gt = class extends ft {\n    #e;\n};\nHi(gt, \"DbNull\");\nvar ht = class extends ft {\n    #e;\n};\nHi(ht, \"JsonNull\");\nvar yt = class extends ft {\n    #e;\n};\nHi(yt, \"AnyNull\");\nvar Cn = {\n    classes: {\n        DbNull: gt,\n        JsonNull: ht,\n        AnyNull: yt\n    },\n    instances: {\n        DbNull: new gt(Rn),\n        JsonNull: new ht(Rn),\n        AnyNull: new yt(Rn)\n    }\n};\nfunction Hi(e, r) {\n    Object.defineProperty(e, \"name\", {\n        value: r,\n        configurable: !0\n    });\n}\nvar ba = \": \", An = class {\n    constructor(r, t){\n        this.hasError = !1;\n        this.name = r;\n        this.value = t;\n    }\n    markAsError() {\n        this.hasError = !0;\n    }\n    getPrintWidth() {\n        return this.name.length + this.value.getPrintWidth() + ba.length;\n    }\n    write(r) {\n        let t = new Te(this.name);\n        this.hasError && t.underline().setColor(r.context.colors.red), r.write(t).write(ba).write(this.value);\n    }\n};\nvar Ki = class {\n    constructor(r){\n        this.errorMessages = [];\n        this.arguments = r;\n    }\n    write(r) {\n        r.write(this.arguments);\n    }\n    addErrorMessage(r) {\n        this.errorMessages.push(r);\n    }\n    renderAllMessages(r) {\n        return this.errorMessages.map((t)=>t(r)).join(`\n`);\n    }\n};\nfunction _r(e) {\n    return new Ki(Ea(e));\n}\nfunction Ea(e) {\n    let r = new Or;\n    for (let [t, n] of Object.entries(e)){\n        let i = new An(t, wa(n));\n        r.addField(i);\n    }\n    return r;\n}\nfunction wa(e) {\n    if (typeof e == \"string\") return new Q(JSON.stringify(e));\n    if (typeof e == \"number\" || typeof e == \"boolean\") return new Q(String(e));\n    if (typeof e == \"bigint\") return new Q(`${e}n`);\n    if (e === null) return new Q(\"null\");\n    if (e === void 0) return new Q(\"undefined\");\n    if (Rr(e)) return new Q(`new Prisma.Decimal(\"${e.toFixed()}\")`);\n    if (e instanceof Uint8Array) return Buffer.isBuffer(e) ? new Q(`Buffer.alloc(${e.byteLength})`) : new Q(`new Uint8Array(${e.byteLength})`);\n    if (e instanceof Date) {\n        let r = yn(e) ? e.toISOString() : \"Invalid Date\";\n        return new Q(`new Date(\"${r}\")`);\n    }\n    return e instanceof Fe ? new Q(`Prisma.${e._getName()}`) : Dr(e) ? new Q(`prisma.${Ye(e.modelName)}.$fields.${e.name}`) : Array.isArray(e) ? Kd(e) : typeof e == \"object\" ? Ea(e) : new Q(Object.prototype.toString.call(e));\n}\nfunction Kd(e) {\n    let r = new kr;\n    for (let t of e)r.addItem(wa(t));\n    return r;\n}\nfunction In(e, r) {\n    let t = r === \"pretty\" ? pa : Tn, n = e.renderAllMessages(t), i = new Ar(0, {\n        colors: t\n    }).write(e).toString();\n    return {\n        message: n,\n        args: i\n    };\n}\nfunction kn({ args: e, errors: r, errorFormat: t, callsite: n, originalMethod: i, clientVersion: o, globalOmit: s }) {\n    let a = _r(e);\n    for (let p of r)xn(p, a, s);\n    let { message: l, args: u } = In(a, t), c = wn({\n        message: l,\n        callsite: n,\n        originalMethod: i,\n        showColors: t === \"pretty\",\n        callArguments: u\n    });\n    throw new Z(c, {\n        clientVersion: o\n    });\n}\nfunction Se(e) {\n    return e.replace(/^./, (r)=>r.toLowerCase());\n}\nfunction Pa(e, r, t) {\n    let n = Se(t);\n    return !r.result || !(r.result.$allModels || r.result[n]) ? e : Yd({\n        ...e,\n        ...xa(r.name, e, r.result.$allModels),\n        ...xa(r.name, e, r.result[n])\n    });\n}\nfunction Yd(e) {\n    let r = new ve, t = (n, i)=>r.getOrCreate(n, ()=>i.has(n) ? [\n                n\n            ] : (i.add(n), e[n] ? e[n].needs.flatMap((o)=>t(o, i)) : [\n                n\n            ]));\n    return xr(e, (n)=>({\n            ...n,\n            needs: t(n.name, new Set)\n        }));\n}\nfunction xa(e, r, t) {\n    return t ? xr(t, ({ needs: n, compute: i }, o)=>({\n            name: o,\n            needs: n ? Object.keys(n).filter((s)=>n[s]) : [],\n            compute: zd(r, o, i)\n        })) : {};\n}\nfunction zd(e, r, t) {\n    let n = e?.[r]?.compute;\n    return n ? (i)=>t({\n            ...i,\n            [r]: n(i)\n        }) : t;\n}\nfunction va(e, r) {\n    if (!r) return e;\n    let t = {\n        ...e\n    };\n    for (let n of Object.values(r))if (e[n.name]) for (let i of n.needs)t[i] = !0;\n    return t;\n}\nfunction Ta(e, r) {\n    if (!r) return e;\n    let t = {\n        ...e\n    };\n    for (let n of Object.values(r))if (!e[n.name]) for (let i of n.needs)delete t[i];\n    return t;\n}\nvar On = class {\n    constructor(r, t){\n        this.computedFieldsCache = new ve;\n        this.modelExtensionsCache = new ve;\n        this.queryCallbacksCache = new ve;\n        this.clientExtensions = lt(()=>this.extension.client ? {\n                ...this.previous?.getAllClientExtensions(),\n                ...this.extension.client\n            } : this.previous?.getAllClientExtensions());\n        this.batchCallbacks = lt(()=>{\n            let r = this.previous?.getAllBatchQueryCallbacks() ?? [], t = this.extension.query?.$__internalBatch;\n            return t ? r.concat(t) : r;\n        });\n        this.extension = r;\n        this.previous = t;\n    }\n    getAllComputedFields(r) {\n        return this.computedFieldsCache.getOrCreate(r, ()=>Pa(this.previous?.getAllComputedFields(r), this.extension, r));\n    }\n    getAllClientExtensions() {\n        return this.clientExtensions.get();\n    }\n    getAllModelExtensions(r) {\n        return this.modelExtensionsCache.getOrCreate(r, ()=>{\n            let t = Se(r);\n            return !this.extension.model || !(this.extension.model[t] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(r) : {\n                ...this.previous?.getAllModelExtensions(r),\n                ...this.extension.model.$allModels,\n                ...this.extension.model[t]\n            };\n        });\n    }\n    getAllQueryCallbacks(r, t) {\n        return this.queryCallbacksCache.getOrCreate(`${r}:${t}`, ()=>{\n            let n = this.previous?.getAllQueryCallbacks(r, t) ?? [], i = [], o = this.extension.query;\n            return !o || !(o[r] || o.$allModels || o[t] || o.$allOperations) ? n : (o[r] !== void 0 && (o[r][t] !== void 0 && i.push(o[r][t]), o[r].$allOperations !== void 0 && i.push(o[r].$allOperations)), r !== \"$none\" && o.$allModels !== void 0 && (o.$allModels[t] !== void 0 && i.push(o.$allModels[t]), o.$allModels.$allOperations !== void 0 && i.push(o.$allModels.$allOperations)), o[t] !== void 0 && i.push(o[t]), o.$allOperations !== void 0 && i.push(o.$allOperations), n.concat(i));\n        });\n    }\n    getAllBatchQueryCallbacks() {\n        return this.batchCallbacks.get();\n    }\n}, Nr = class e {\n    constructor(r){\n        this.head = r;\n    }\n    static empty() {\n        return new e;\n    }\n    static single(r) {\n        return new e(new On(r));\n    }\n    isEmpty() {\n        return this.head === void 0;\n    }\n    append(r) {\n        return new e(new On(r, this.head));\n    }\n    getAllComputedFields(r) {\n        return this.head?.getAllComputedFields(r);\n    }\n    getAllClientExtensions() {\n        return this.head?.getAllClientExtensions();\n    }\n    getAllModelExtensions(r) {\n        return this.head?.getAllModelExtensions(r);\n    }\n    getAllQueryCallbacks(r, t) {\n        return this.head?.getAllQueryCallbacks(r, t) ?? [];\n    }\n    getAllBatchQueryCallbacks() {\n        return this.head?.getAllBatchQueryCallbacks() ?? [];\n    }\n};\nvar Dn = class {\n    constructor(r){\n        this.name = r;\n    }\n};\nfunction Sa(e) {\n    return e instanceof Dn;\n}\nfunction Ra(e) {\n    return new Dn(e);\n}\nvar Ca = Symbol(), bt = class {\n    constructor(r){\n        if (r !== Ca) throw new Error(\"Skip instance can not be constructed directly\");\n    }\n    ifUndefined(r) {\n        return r === void 0 ? _n : r;\n    }\n}, _n = new bt(Ca);\nfunction Re(e) {\n    return e instanceof bt;\n}\nvar Zd = {\n    findUnique: \"findUnique\",\n    findUniqueOrThrow: \"findUniqueOrThrow\",\n    findFirst: \"findFirst\",\n    findFirstOrThrow: \"findFirstOrThrow\",\n    findMany: \"findMany\",\n    count: \"aggregate\",\n    create: \"createOne\",\n    createMany: \"createMany\",\n    createManyAndReturn: \"createManyAndReturn\",\n    update: \"updateOne\",\n    updateMany: \"updateMany\",\n    updateManyAndReturn: \"updateManyAndReturn\",\n    upsert: \"upsertOne\",\n    delete: \"deleteOne\",\n    deleteMany: \"deleteMany\",\n    executeRaw: \"executeRaw\",\n    queryRaw: \"queryRaw\",\n    aggregate: \"aggregate\",\n    groupBy: \"groupBy\",\n    runCommandRaw: \"runCommandRaw\",\n    findRaw: \"findRaw\",\n    aggregateRaw: \"aggregateRaw\"\n}, Aa = \"explicitly `undefined` values are not allowed\";\nfunction Nn({ modelName: e, action: r, args: t, runtimeDataModel: n, extensions: i = Nr.empty(), callsite: o, clientMethod: s, errorFormat: a, clientVersion: l, previewFeatures: u, globalOmit: c }) {\n    let p = new Yi({\n        runtimeDataModel: n,\n        modelName: e,\n        action: r,\n        rootArgs: t,\n        callsite: o,\n        extensions: i,\n        selectionPath: [],\n        argumentPath: [],\n        originalMethod: s,\n        errorFormat: a,\n        clientVersion: l,\n        previewFeatures: u,\n        globalOmit: c\n    });\n    return {\n        modelName: e,\n        action: Zd[r],\n        query: Et(t, p)\n    };\n}\nfunction Et({ select: e, include: r, ...t } = {}, n) {\n    let i = t.omit;\n    return delete t.omit, {\n        arguments: ka(t, n),\n        selection: Xd(e, r, i, n)\n    };\n}\nfunction Xd(e, r, t, n) {\n    return e ? (r ? n.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"include\",\n        secondField: \"select\",\n        selectionPath: n.getSelectionPath()\n    }) : t && n.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"omit\",\n        secondField: \"select\",\n        selectionPath: n.getSelectionPath()\n    }), nm(e, n)) : em(n, r, t);\n}\nfunction em(e, r, t) {\n    let n = {};\n    return e.modelOrType && !e.isRawAction() && (n.$composites = !0, n.$scalars = !0), r && rm(n, r, e), tm(n, t, e), n;\n}\nfunction rm(e, r, t) {\n    for (let [n, i] of Object.entries(r)){\n        if (Re(i)) continue;\n        let o = t.nestSelection(n);\n        if (zi(i, o), i === !1 || i === void 0) {\n            e[n] = !1;\n            continue;\n        }\n        let s = t.findField(n);\n        if (s && s.kind !== \"object\" && t.throwValidationError({\n            kind: \"IncludeOnScalar\",\n            selectionPath: t.getSelectionPath().concat(n),\n            outputType: t.getOutputTypeDescription()\n        }), s) {\n            e[n] = Et(i === !0 ? {} : i, o);\n            continue;\n        }\n        if (i === !0) {\n            e[n] = !0;\n            continue;\n        }\n        e[n] = Et(i, o);\n    }\n}\nfunction tm(e, r, t) {\n    let n = t.getComputedFields(), i = {\n        ...t.getGlobalOmit(),\n        ...r\n    }, o = Ta(i, n);\n    for (let [s, a] of Object.entries(o)){\n        if (Re(a)) continue;\n        zi(a, t.nestSelection(s));\n        let l = t.findField(s);\n        n?.[s] && !l || (e[s] = !a);\n    }\n}\nfunction nm(e, r) {\n    let t = {}, n = r.getComputedFields(), i = va(e, n);\n    for (let [o, s] of Object.entries(i)){\n        if (Re(s)) continue;\n        let a = r.nestSelection(o);\n        zi(s, a);\n        let l = r.findField(o);\n        if (!(n?.[o] && !l)) {\n            if (s === !1 || s === void 0 || Re(s)) {\n                t[o] = !1;\n                continue;\n            }\n            if (s === !0) {\n                l?.kind === \"object\" ? t[o] = Et({}, a) : t[o] = !0;\n                continue;\n            }\n            t[o] = Et(s, a);\n        }\n    }\n    return t;\n}\nfunction Ia(e, r) {\n    if (e === null) return null;\n    if (typeof e == \"string\" || typeof e == \"number\" || typeof e == \"boolean\") return e;\n    if (typeof e == \"bigint\") return {\n        $type: \"BigInt\",\n        value: String(e)\n    };\n    if (Sr(e)) {\n        if (yn(e)) return {\n            $type: \"DateTime\",\n            value: e.toISOString()\n        };\n        r.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            selectionPath: r.getSelectionPath(),\n            argumentPath: r.getArgumentPath(),\n            argument: {\n                name: r.getArgumentName(),\n                typeNames: [\n                    \"Date\"\n                ]\n            },\n            underlyingError: \"Provided Date object is invalid\"\n        });\n    }\n    if (Sa(e)) return {\n        $type: \"Param\",\n        value: e.name\n    };\n    if (Dr(e)) return {\n        $type: \"FieldRef\",\n        value: {\n            _ref: e.name,\n            _container: e.modelName\n        }\n    };\n    if (Array.isArray(e)) return im(e, r);\n    if (ArrayBuffer.isView(e)) {\n        let { buffer: t, byteOffset: n, byteLength: i } = e;\n        return {\n            $type: \"Bytes\",\n            value: Buffer.from(t, n, i).toString(\"base64\")\n        };\n    }\n    if (om(e)) return e.values;\n    if (Rr(e)) return {\n        $type: \"Decimal\",\n        value: e.toFixed()\n    };\n    if (e instanceof Fe) {\n        if (e !== Cn.instances[e._getName()]) throw new Error(\"Invalid ObjectEnumValue\");\n        return {\n            $type: \"Enum\",\n            value: e._getName()\n        };\n    }\n    if (sm(e)) return e.toJSON();\n    if (typeof e == \"object\") return ka(e, r);\n    r.throwValidationError({\n        kind: \"InvalidArgumentValue\",\n        selectionPath: r.getSelectionPath(),\n        argumentPath: r.getArgumentPath(),\n        argument: {\n            name: r.getArgumentName(),\n            typeNames: []\n        },\n        underlyingError: `We could not serialize ${Object.prototype.toString.call(e)} value. Serialize the object to JSON or implement a \".toJSON()\" method on it`\n    });\n}\nfunction ka(e, r) {\n    if (e.$type) return {\n        $type: \"Raw\",\n        value: e\n    };\n    let t = {};\n    for(let n in e){\n        let i = e[n], o = r.nestArgument(n);\n        Re(i) || (i !== void 0 ? t[n] = Ia(i, o) : r.isPreviewFeatureOn(\"strictUndefinedChecks\") && r.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            argumentPath: o.getArgumentPath(),\n            selectionPath: r.getSelectionPath(),\n            argument: {\n                name: r.getArgumentName(),\n                typeNames: []\n            },\n            underlyingError: Aa\n        }));\n    }\n    return t;\n}\nfunction im(e, r) {\n    let t = [];\n    for(let n = 0; n < e.length; n++){\n        let i = r.nestArgument(String(n)), o = e[n];\n        if (o === void 0 || Re(o)) {\n            let s = o === void 0 ? \"undefined\" : \"Prisma.skip\";\n            r.throwValidationError({\n                kind: \"InvalidArgumentValue\",\n                selectionPath: i.getSelectionPath(),\n                argumentPath: i.getArgumentPath(),\n                argument: {\n                    name: `${r.getArgumentName()}[${n}]`,\n                    typeNames: []\n                },\n                underlyingError: `Can not use \\`${s}\\` value within array. Use \\`null\\` or filter out \\`${s}\\` values`\n            });\n        }\n        t.push(Ia(o, i));\n    }\n    return t;\n}\nfunction om(e) {\n    return typeof e == \"object\" && e !== null && e.__prismaRawParameters__ === !0;\n}\nfunction sm(e) {\n    return typeof e == \"object\" && e !== null && typeof e.toJSON == \"function\";\n}\nfunction zi(e, r) {\n    e === void 0 && r.isPreviewFeatureOn(\"strictUndefinedChecks\") && r.throwValidationError({\n        kind: \"InvalidSelectionValue\",\n        selectionPath: r.getSelectionPath(),\n        underlyingError: Aa\n    });\n}\nvar Yi = class e {\n    constructor(r){\n        this.params = r;\n        this.params.modelName && (this.modelOrType = this.params.runtimeDataModel.models[this.params.modelName] ?? this.params.runtimeDataModel.types[this.params.modelName]);\n    }\n    throwValidationError(r) {\n        kn({\n            errors: [\n                r\n            ],\n            originalMethod: this.params.originalMethod,\n            args: this.params.rootArgs ?? {},\n            callsite: this.params.callsite,\n            errorFormat: this.params.errorFormat,\n            clientVersion: this.params.clientVersion,\n            globalOmit: this.params.globalOmit\n        });\n    }\n    getSelectionPath() {\n        return this.params.selectionPath;\n    }\n    getArgumentPath() {\n        return this.params.argumentPath;\n    }\n    getArgumentName() {\n        return this.params.argumentPath[this.params.argumentPath.length - 1];\n    }\n    getOutputTypeDescription() {\n        if (!(!this.params.modelName || !this.modelOrType)) return {\n            name: this.params.modelName,\n            fields: this.modelOrType.fields.map((r)=>({\n                    name: r.name,\n                    typeName: \"boolean\",\n                    isRelation: r.kind === \"object\"\n                }))\n        };\n    }\n    isRawAction() {\n        return [\n            \"executeRaw\",\n            \"queryRaw\",\n            \"runCommandRaw\",\n            \"findRaw\",\n            \"aggregateRaw\"\n        ].includes(this.params.action);\n    }\n    isPreviewFeatureOn(r) {\n        return this.params.previewFeatures.includes(r);\n    }\n    getComputedFields() {\n        if (this.params.modelName) return this.params.extensions.getAllComputedFields(this.params.modelName);\n    }\n    findField(r) {\n        return this.modelOrType?.fields.find((t)=>t.name === r);\n    }\n    nestSelection(r) {\n        let t = this.findField(r), n = t?.kind === \"object\" ? t.type : void 0;\n        return new e({\n            ...this.params,\n            modelName: n,\n            selectionPath: this.params.selectionPath.concat(r)\n        });\n    }\n    getGlobalOmit() {\n        return this.params.modelName && this.shouldApplyGlobalOmit() ? this.params.globalOmit?.[Ye(this.params.modelName)] ?? {} : {};\n    }\n    shouldApplyGlobalOmit() {\n        switch(this.params.action){\n            case \"findFirst\":\n            case \"findFirstOrThrow\":\n            case \"findUniqueOrThrow\":\n            case \"findMany\":\n            case \"upsert\":\n            case \"findUnique\":\n            case \"createManyAndReturn\":\n            case \"create\":\n            case \"update\":\n            case \"updateManyAndReturn\":\n            case \"delete\":\n                return !0;\n            case \"executeRaw\":\n            case \"aggregateRaw\":\n            case \"runCommandRaw\":\n            case \"findRaw\":\n            case \"createMany\":\n            case \"deleteMany\":\n            case \"groupBy\":\n            case \"updateMany\":\n            case \"count\":\n            case \"aggregate\":\n            case \"queryRaw\":\n                return !1;\n            default:\n                _e(this.params.action, \"Unknown action\");\n        }\n    }\n    nestArgument(r) {\n        return new e({\n            ...this.params,\n            argumentPath: this.params.argumentPath.concat(r)\n        });\n    }\n};\nfunction Oa(e) {\n    if (!e._hasPreviewFlag(\"metrics\")) throw new Z(\"`metrics` preview feature must be enabled in order to access metrics API\", {\n        clientVersion: e._clientVersion\n    });\n}\nvar Lr = class {\n    constructor(r){\n        this._client = r;\n    }\n    prometheus(r) {\n        return Oa(this._client), this._client._engine.metrics({\n            format: \"prometheus\",\n            ...r\n        });\n    }\n    json(r) {\n        return Oa(this._client), this._client._engine.metrics({\n            format: \"json\",\n            ...r\n        });\n    }\n};\nfunction Da(e, r) {\n    let t = lt(()=>am(r));\n    Object.defineProperty(e, \"dmmf\", {\n        get: ()=>t.get()\n    });\n}\nfunction am(e) {\n    return {\n        datamodel: {\n            models: Zi(e.models),\n            enums: Zi(e.enums),\n            types: Zi(e.types)\n        }\n    };\n}\nfunction Zi(e) {\n    return Object.entries(e).map(([r, t])=>({\n            name: r,\n            ...t\n        }));\n}\nvar Xi = new WeakMap, Ln = \"$$PrismaTypedSql\", wt = class {\n    constructor(r, t){\n        Xi.set(this, {\n            sql: r,\n            values: t\n        }), Object.defineProperty(this, Ln, {\n            value: Ln\n        });\n    }\n    get sql() {\n        return Xi.get(this).sql;\n    }\n    get values() {\n        return Xi.get(this).values;\n    }\n};\nfunction _a(e) {\n    return (...r)=>new wt(e, r);\n}\nfunction Fn(e) {\n    return e != null && e[Ln] === Ln;\n}\nvar pu = k(wi());\nvar du = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\"), mu = __webpack_require__(/*! node:events */ \"node:events\"), fu = k(__webpack_require__(/*! node:fs */ \"node:fs\")), Xn = k(__webpack_require__(/*! node:path */ \"node:path\"));\nvar oe = class e {\n    constructor(r, t){\n        if (r.length - 1 !== t.length) throw r.length === 0 ? new TypeError(\"Expected at least 1 string\") : new TypeError(`Expected ${r.length} strings to have ${r.length - 1} values`);\n        let n = t.reduce((s, a)=>s + (a instanceof e ? a.values.length : 1), 0);\n        this.values = new Array(n), this.strings = new Array(n + 1), this.strings[0] = r[0];\n        let i = 0, o = 0;\n        for(; i < t.length;){\n            let s = t[i++], a = r[i];\n            if (s instanceof e) {\n                this.strings[o] += s.strings[0];\n                let l = 0;\n                for(; l < s.values.length;)this.values[o++] = s.values[l++], this.strings[o] = s.strings[l];\n                this.strings[o] += a;\n            } else this.values[o++] = s, this.strings[o] = a;\n        }\n    }\n    get sql() {\n        let r = this.strings.length, t = 1, n = this.strings[0];\n        for(; t < r;)n += `?${this.strings[t++]}`;\n        return n;\n    }\n    get statement() {\n        let r = this.strings.length, t = 1, n = this.strings[0];\n        for(; t < r;)n += `:${t}${this.strings[t++]}`;\n        return n;\n    }\n    get text() {\n        let r = this.strings.length, t = 1, n = this.strings[0];\n        for(; t < r;)n += `$${t}${this.strings[t++]}`;\n        return n;\n    }\n    inspect() {\n        return {\n            sql: this.sql,\n            statement: this.statement,\n            text: this.text,\n            values: this.values\n        };\n    }\n};\nfunction Na(e, r = \",\", t = \"\", n = \"\") {\n    if (e.length === 0) throw new TypeError(\"Expected `join([])` to be called with an array of multiple elements, but got an empty array\");\n    return new oe([\n        t,\n        ...Array(e.length - 1).fill(r),\n        n\n    ], e);\n}\nfunction eo(e) {\n    return new oe([\n        e\n    ], []);\n}\nvar La = eo(\"\");\nfunction ro(e, ...r) {\n    return new oe(e, r);\n}\nfunction xt(e) {\n    return {\n        getKeys () {\n            return Object.keys(e);\n        },\n        getPropertyValue (r) {\n            return e[r];\n        }\n    };\n}\nfunction re(e, r) {\n    return {\n        getKeys () {\n            return [\n                e\n            ];\n        },\n        getPropertyValue () {\n            return r();\n        }\n    };\n}\nfunction ar(e) {\n    let r = new ve;\n    return {\n        getKeys () {\n            return e.getKeys();\n        },\n        getPropertyValue (t) {\n            return r.getOrCreate(t, ()=>e.getPropertyValue(t));\n        },\n        getPropertyDescriptor (t) {\n            return e.getPropertyDescriptor?.(t);\n        }\n    };\n}\nvar Mn = {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n};\nfunction $n(e) {\n    let r = new Set(e);\n    return {\n        getPrototypeOf: ()=>Object.prototype,\n        getOwnPropertyDescriptor: ()=>Mn,\n        has: (t, n)=>r.has(n),\n        set: (t, n, i)=>r.add(n) && Reflect.set(t, n, i),\n        ownKeys: ()=>[\n                ...r\n            ]\n    };\n}\nvar Fa = Symbol.for(\"nodejs.util.inspect.custom\");\nfunction he(e, r) {\n    let t = lm(r), n = new Set, i = new Proxy(e, {\n        get (o, s) {\n            if (n.has(s)) return o[s];\n            let a = t.get(s);\n            return a ? a.getPropertyValue(s) : o[s];\n        },\n        has (o, s) {\n            if (n.has(s)) return !0;\n            let a = t.get(s);\n            return a ? a.has?.(s) ?? !0 : Reflect.has(o, s);\n        },\n        ownKeys (o) {\n            let s = Ma(Reflect.ownKeys(o), t), a = Ma(Array.from(t.keys()), t);\n            return [\n                ...new Set([\n                    ...s,\n                    ...a,\n                    ...n\n                ])\n            ];\n        },\n        set (o, s, a) {\n            return t.get(s)?.getPropertyDescriptor?.(s)?.writable === !1 ? !1 : (n.add(s), Reflect.set(o, s, a));\n        },\n        getOwnPropertyDescriptor (o, s) {\n            let a = Reflect.getOwnPropertyDescriptor(o, s);\n            if (a && !a.configurable) return a;\n            let l = t.get(s);\n            return l ? l.getPropertyDescriptor ? {\n                ...Mn,\n                ...l?.getPropertyDescriptor(s)\n            } : Mn : a;\n        },\n        defineProperty (o, s, a) {\n            return n.add(s), Reflect.defineProperty(o, s, a);\n        },\n        getPrototypeOf: ()=>Object.prototype\n    });\n    return i[Fa] = function() {\n        let o = {\n            ...this\n        };\n        return delete o[Fa], o;\n    }, i;\n}\nfunction lm(e) {\n    let r = new Map;\n    for (let t of e){\n        let n = t.getKeys();\n        for (let i of n)r.set(i, t);\n    }\n    return r;\n}\nfunction Ma(e, r) {\n    return e.filter((t)=>r.get(t)?.has?.(t) ?? !0);\n}\nfunction Fr(e) {\n    return {\n        getKeys () {\n            return e;\n        },\n        has () {\n            return !1;\n        },\n        getPropertyValue () {}\n    };\n}\nfunction Mr(e, r) {\n    return {\n        batch: e,\n        transaction: r?.kind === \"batch\" ? {\n            isolationLevel: r.options.isolationLevel\n        } : void 0\n    };\n}\nfunction $a(e) {\n    if (e === void 0) return \"\";\n    let r = _r(e);\n    return new Ar(0, {\n        colors: Tn\n    }).write(r).toString();\n}\nvar um = \"P2037\";\nfunction $r({ error: e, user_facing_error: r }, t, n) {\n    return r.error_code ? new z(cm(r, n), {\n        code: r.error_code,\n        clientVersion: t,\n        meta: r.meta,\n        batchRequestIdx: r.batch_request_idx\n    }) : new j(e, {\n        clientVersion: t,\n        batchRequestIdx: r.batch_request_idx\n    });\n}\nfunction cm(e, r) {\n    let t = e.message;\n    return (r === \"postgresql\" || r === \"postgres\" || r === \"mysql\") && e.error_code === um && (t += `\nPrisma Accelerate has built-in connection pooling to prevent such errors: https://pris.ly/client/error-accelerate`), t;\n}\nvar Pt = \"<unknown>\";\nfunction qa(e) {\n    var r = e.split(`\n`);\n    return r.reduce(function(t, n) {\n        var i = mm(n) || gm(n) || bm(n) || Pm(n) || wm(n);\n        return i && t.push(i), t;\n    }, []);\n}\nvar pm = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|rsc|<anonymous>|\\/|[a-z]:\\\\|\\\\\\\\).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i, dm = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\nfunction mm(e) {\n    var r = pm.exec(e);\n    if (!r) return null;\n    var t = r[2] && r[2].indexOf(\"native\") === 0, n = r[2] && r[2].indexOf(\"eval\") === 0, i = dm.exec(r[2]);\n    return n && i != null && (r[2] = i[1], r[3] = i[2], r[4] = i[3]), {\n        file: t ? null : r[2],\n        methodName: r[1] || Pt,\n        arguments: t ? [\n            r[2]\n        ] : [],\n        lineNumber: r[3] ? +r[3] : null,\n        column: r[4] ? +r[4] : null\n    };\n}\nvar fm = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|rsc|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction gm(e) {\n    var r = fm.exec(e);\n    return r ? {\n        file: r[2],\n        methodName: r[1] || Pt,\n        arguments: [],\n        lineNumber: +r[3],\n        column: r[4] ? +r[4] : null\n    } : null;\n}\nvar hm = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|rsc|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i, ym = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nfunction bm(e) {\n    var r = hm.exec(e);\n    if (!r) return null;\n    var t = r[3] && r[3].indexOf(\" > eval\") > -1, n = ym.exec(r[3]);\n    return t && n != null && (r[3] = n[1], r[4] = n[2], r[5] = null), {\n        file: r[3],\n        methodName: r[1] || Pt,\n        arguments: r[2] ? r[2].split(\",\") : [],\n        lineNumber: r[4] ? +r[4] : null,\n        column: r[5] ? +r[5] : null\n    };\n}\nvar Em = /^\\s*(?:([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i;\nfunction wm(e) {\n    var r = Em.exec(e);\n    return r ? {\n        file: r[3],\n        methodName: r[1] || Pt,\n        arguments: [],\n        lineNumber: +r[4],\n        column: r[5] ? +r[5] : null\n    } : null;\n}\nvar xm = /^\\s*at (?:((?:\\[object object\\])?[^\\\\/]+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction Pm(e) {\n    var r = xm.exec(e);\n    return r ? {\n        file: r[2],\n        methodName: r[1] || Pt,\n        arguments: [],\n        lineNumber: +r[3],\n        column: r[4] ? +r[4] : null\n    } : null;\n}\nvar to = class {\n    getLocation() {\n        return null;\n    }\n}, no = class {\n    constructor(){\n        this._error = new Error;\n    }\n    getLocation() {\n        let r = this._error.stack;\n        if (!r) return null;\n        let n = qa(r).find((i)=>{\n            if (!i.file) return !1;\n            let o = Di(i.file);\n            return o !== \"<anonymous>\" && !o.includes(\"@prisma\") && !o.includes(\"/packages/client/src/runtime/\") && !o.endsWith(\"/runtime/binary.js\") && !o.endsWith(\"/runtime/library.js\") && !o.endsWith(\"/runtime/edge.js\") && !o.endsWith(\"/runtime/edge-esm.js\") && !o.startsWith(\"internal/\") && !i.methodName.includes(\"new \") && !i.methodName.includes(\"getCallSite\") && !i.methodName.includes(\"Proxy.\") && i.methodName.split(\".\").length < 4;\n        });\n        return !n || !n.file ? null : {\n            fileName: n.file,\n            lineNumber: n.lineNumber,\n            columnNumber: n.column\n        };\n    }\n};\nfunction Ze(e) {\n    return e === \"minimal\" ? typeof $EnabledCallSite == \"function\" && e !== \"minimal\" ? new $EnabledCallSite : new to : new no;\n}\nvar ja = {\n    _avg: !0,\n    _count: !0,\n    _sum: !0,\n    _min: !0,\n    _max: !0\n};\nfunction qr(e = {}) {\n    let r = Tm(e);\n    return Object.entries(r).reduce((n, [i, o])=>(ja[i] !== void 0 ? n.select[i] = {\n            select: o\n        } : n[i] = o, n), {\n        select: {}\n    });\n}\nfunction Tm(e = {}) {\n    return typeof e._count == \"boolean\" ? {\n        ...e,\n        _count: {\n            _all: e._count\n        }\n    } : e;\n}\nfunction qn(e = {}) {\n    return (r)=>(typeof e._count == \"boolean\" && (r._count = r._count._all), r);\n}\nfunction Va(e, r) {\n    let t = qn(e);\n    return r({\n        action: \"aggregate\",\n        unpacker: t,\n        argsMapper: qr\n    })(e);\n}\nfunction Sm(e = {}) {\n    let { select: r, ...t } = e;\n    return typeof r == \"object\" ? qr({\n        ...t,\n        _count: r\n    }) : qr({\n        ...t,\n        _count: {\n            _all: !0\n        }\n    });\n}\nfunction Rm(e = {}) {\n    return typeof e.select == \"object\" ? (r)=>qn(e)(r)._count : (r)=>qn(e)(r)._count._all;\n}\nfunction Ba(e, r) {\n    return r({\n        action: \"count\",\n        unpacker: Rm(e),\n        argsMapper: Sm\n    })(e);\n}\nfunction Cm(e = {}) {\n    let r = qr(e);\n    if (Array.isArray(r.by)) for (let t of r.by)typeof t == \"string\" && (r.select[t] = !0);\n    else typeof r.by == \"string\" && (r.select[r.by] = !0);\n    return r;\n}\nfunction Am(e = {}) {\n    return (r)=>(typeof e?._count == \"boolean\" && r.forEach((t)=>{\n            t._count = t._count._all;\n        }), r);\n}\nfunction Ua(e, r) {\n    return r({\n        action: \"groupBy\",\n        unpacker: Am(e),\n        argsMapper: Cm\n    })(e);\n}\nfunction Ga(e, r, t) {\n    if (r === \"aggregate\") return (n)=>Va(n, t);\n    if (r === \"count\") return (n)=>Ba(n, t);\n    if (r === \"groupBy\") return (n)=>Ua(n, t);\n}\nfunction Qa(e, r) {\n    let t = r.fields.filter((i)=>!i.relationName), n = zs(t, \"name\");\n    return new Proxy({}, {\n        get (i, o) {\n            if (o in i || typeof o == \"symbol\") return i[o];\n            let s = n[o];\n            if (s) return new mt(e, o, s.type, s.isList, s.kind === \"enum\");\n        },\n        ...$n(Object.keys(n))\n    });\n}\nvar Wa = (e)=>Array.isArray(e) ? e : e.split(\".\"), io = (e, r)=>Wa(r).reduce((t, n)=>t && t[n], e), Ja = (e, r, t)=>Wa(r).reduceRight((n, i, o, s)=>Object.assign({}, io(e, s.slice(0, o)), {\n            [i]: n\n        }), t);\nfunction Im(e, r) {\n    return e === void 0 || r === void 0 ? [] : [\n        ...r,\n        \"select\",\n        e\n    ];\n}\nfunction km(e, r, t) {\n    return r === void 0 ? e ?? {} : Ja(r, t, e || !0);\n}\nfunction oo(e, r, t, n, i, o) {\n    let a = e._runtimeDataModel.models[r].fields.reduce((l, u)=>({\n            ...l,\n            [u.name]: u\n        }), {});\n    return (l)=>{\n        let u = Ze(e._errorFormat), c = Im(n, i), p = km(l, o, c), d = t({\n            dataPath: c,\n            callsite: u\n        })(p), f = Om(e, r);\n        return new Proxy(d, {\n            get (g, h) {\n                if (!f.includes(h)) return g[h];\n                let v = [\n                    a[h].type,\n                    t,\n                    h\n                ], S = [\n                    c,\n                    p\n                ];\n                return oo(e, ...v, ...S);\n            },\n            ...$n([\n                ...f,\n                ...Object.getOwnPropertyNames(d)\n            ])\n        });\n    };\n}\nfunction Om(e, r) {\n    return e._runtimeDataModel.models[r].fields.filter((t)=>t.kind === \"object\").map((t)=>t.name);\n}\nvar Dm = [\n    \"findUnique\",\n    \"findUniqueOrThrow\",\n    \"findFirst\",\n    \"findFirstOrThrow\",\n    \"create\",\n    \"update\",\n    \"upsert\",\n    \"delete\"\n], _m = [\n    \"aggregate\",\n    \"count\",\n    \"groupBy\"\n];\nfunction so(e, r) {\n    let t = e._extensions.getAllModelExtensions(r) ?? {}, n = [\n        Nm(e, r),\n        Fm(e, r),\n        xt(t),\n        re(\"name\", ()=>r),\n        re(\"$name\", ()=>r),\n        re(\"$parent\", ()=>e._appliedParent)\n    ];\n    return he({}, n);\n}\nfunction Nm(e, r) {\n    let t = Se(r), n = Object.keys(Cr).concat(\"count\");\n    return {\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = i, s = (a)=>(l)=>{\n                    let u = Ze(e._errorFormat);\n                    return e._createPrismaPromise((c)=>{\n                        let p = {\n                            args: l,\n                            dataPath: [],\n                            action: o,\n                            model: r,\n                            clientMethod: `${t}.${i}`,\n                            jsModelName: t,\n                            transaction: c,\n                            callsite: u\n                        };\n                        return e._request({\n                            ...p,\n                            ...a\n                        });\n                    }, {\n                        action: o,\n                        args: l,\n                        model: r\n                    });\n                };\n            return Dm.includes(o) ? oo(e, r, s) : Lm(i) ? Ga(e, i, s) : s({});\n        }\n    };\n}\nfunction Lm(e) {\n    return _m.includes(e);\n}\nfunction Fm(e, r) {\n    return ar(re(\"fields\", ()=>{\n        let t = e._runtimeDataModel.models[r];\n        return Qa(r, t);\n    }));\n}\nfunction Ha(e) {\n    return e.replace(/^./, (r)=>r.toUpperCase());\n}\nvar ao = Symbol();\nfunction vt(e) {\n    let r = [\n        Mm(e),\n        $m(e),\n        re(ao, ()=>e),\n        re(\"$parent\", ()=>e._appliedParent)\n    ], t = e._extensions.getAllClientExtensions();\n    return t && r.push(xt(t)), he(e, r);\n}\nfunction Mm(e) {\n    let r = Object.getPrototypeOf(e._originalClient), t = [\n        ...new Set(Object.getOwnPropertyNames(r))\n    ];\n    return {\n        getKeys () {\n            return t;\n        },\n        getPropertyValue (n) {\n            return e[n];\n        }\n    };\n}\nfunction $m(e) {\n    let r = Object.keys(e._runtimeDataModel.models), t = r.map(Se), n = [\n        ...new Set(r.concat(t))\n    ];\n    return ar({\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = Ha(i);\n            if (e._runtimeDataModel.models[o] !== void 0) return so(e, o);\n            if (e._runtimeDataModel.models[i] !== void 0) return so(e, i);\n        },\n        getPropertyDescriptor (i) {\n            if (!t.includes(i)) return {\n                enumerable: !1\n            };\n        }\n    });\n}\nfunction Ka(e) {\n    return e[ao] ? e[ao] : e;\n}\nfunction Ya(e) {\n    if (typeof e == \"function\") return e(this);\n    if (e.client?.__AccelerateEngine) {\n        let t = e.client.__AccelerateEngine;\n        this._originalClient._engine = new t(this._originalClient._accelerateEngineConfig);\n    }\n    let r = Object.create(this._originalClient, {\n        _extensions: {\n            value: this._extensions.append(e)\n        },\n        _appliedParent: {\n            value: this,\n            configurable: !0\n        },\n        $use: {\n            value: void 0\n        },\n        $on: {\n            value: void 0\n        }\n    });\n    return vt(r);\n}\nfunction za({ result: e, modelName: r, select: t, omit: n, extensions: i }) {\n    let o = i.getAllComputedFields(r);\n    if (!o) return e;\n    let s = [], a = [];\n    for (let l of Object.values(o)){\n        if (n) {\n            if (n[l.name]) continue;\n            let u = l.needs.filter((c)=>n[c]);\n            u.length > 0 && a.push(Fr(u));\n        } else if (t) {\n            if (!t[l.name]) continue;\n            let u = l.needs.filter((c)=>!t[c]);\n            u.length > 0 && a.push(Fr(u));\n        }\n        qm(e, l.needs) && s.push(jm(l, he(e, s)));\n    }\n    return s.length > 0 || a.length > 0 ? he(e, [\n        ...s,\n        ...a\n    ]) : e;\n}\nfunction qm(e, r) {\n    return r.every((t)=>Mi(e, t));\n}\nfunction jm(e, r) {\n    return ar(re(e.name, ()=>e.compute(r)));\n}\nfunction jn({ visitor: e, result: r, args: t, runtimeDataModel: n, modelName: i }) {\n    if (Array.isArray(r)) {\n        for(let s = 0; s < r.length; s++)r[s] = jn({\n            result: r[s],\n            args: t,\n            modelName: i,\n            runtimeDataModel: n,\n            visitor: e\n        });\n        return r;\n    }\n    let o = e(r, i, t) ?? r;\n    return t.include && Za({\n        includeOrSelect: t.include,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), t.select && Za({\n        includeOrSelect: t.select,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), o;\n}\nfunction Za({ includeOrSelect: e, result: r, parentModelName: t, runtimeDataModel: n, visitor: i }) {\n    for (let [o, s] of Object.entries(e)){\n        if (!s || r[o] == null || Re(s)) continue;\n        let l = n.models[t].fields.find((c)=>c.name === o);\n        if (!l || l.kind !== \"object\" || !l.relationName) continue;\n        let u = typeof s == \"object\" ? s : {};\n        r[o] = jn({\n            visitor: i,\n            result: r[o],\n            args: u,\n            modelName: l.type,\n            runtimeDataModel: n\n        });\n    }\n}\nfunction Xa({ result: e, modelName: r, args: t, extensions: n, runtimeDataModel: i, globalOmit: o }) {\n    return n.isEmpty() || e == null || typeof e != \"object\" || !i.models[r] ? e : jn({\n        result: e,\n        args: t ?? {},\n        modelName: r,\n        runtimeDataModel: i,\n        visitor: (a, l, u)=>{\n            let c = Se(l);\n            return za({\n                result: a,\n                modelName: c,\n                select: u.select,\n                omit: u.select ? void 0 : {\n                    ...o?.[c],\n                    ...u.omit\n                },\n                extensions: n\n            });\n        }\n    });\n}\nvar Vm = [\n    \"$connect\",\n    \"$disconnect\",\n    \"$on\",\n    \"$transaction\",\n    \"$use\",\n    \"$extends\"\n], el = Vm;\nfunction rl(e) {\n    if (e instanceof oe) return Bm(e);\n    if (Fn(e)) return Um(e);\n    if (Array.isArray(e)) {\n        let t = [\n            e[0]\n        ];\n        for(let n = 1; n < e.length; n++)t[n] = Tt(e[n]);\n        return t;\n    }\n    let r = {};\n    for(let t in e)r[t] = Tt(e[t]);\n    return r;\n}\nfunction Bm(e) {\n    return new oe(e.strings, e.values);\n}\nfunction Um(e) {\n    return new wt(e.sql, e.values);\n}\nfunction Tt(e) {\n    if (typeof e != \"object\" || e == null || e instanceof Fe || Dr(e)) return e;\n    if (Rr(e)) return new Pe(e.toFixed());\n    if (Sr(e)) return new Date(+e);\n    if (ArrayBuffer.isView(e)) return e.slice(0);\n    if (Array.isArray(e)) {\n        let r = e.length, t;\n        for(t = Array(r); r--;)t[r] = Tt(e[r]);\n        return t;\n    }\n    if (typeof e == \"object\") {\n        let r = {};\n        for(let t in e)t === \"__proto__\" ? Object.defineProperty(r, t, {\n            value: Tt(e[t]),\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n        }) : r[t] = Tt(e[t]);\n        return r;\n    }\n    _e(e, \"Unknown value\");\n}\nfunction nl(e, r, t, n = 0) {\n    return e._createPrismaPromise((i)=>{\n        let o = r.customDataProxyFetch;\n        return \"transaction\" in r && i !== void 0 && (r.transaction?.kind === \"batch\" && r.transaction.lock.then(), r.transaction = i), n === t.length ? e._executeRequest(r) : t[n]({\n            model: r.model,\n            operation: r.model ? r.action : r.clientMethod,\n            args: rl(r.args ?? {}),\n            __internalParams: r,\n            query: (s, a = r)=>{\n                let l = a.customDataProxyFetch;\n                return a.customDataProxyFetch = al(o, l), a.args = s, nl(e, a, t, n + 1);\n            }\n        });\n    });\n}\nfunction il(e, r) {\n    let { jsModelName: t, action: n, clientMethod: i } = r, o = t ? n : i;\n    if (e._extensions.isEmpty()) return e._executeRequest(r);\n    let s = e._extensions.getAllQueryCallbacks(t ?? \"$none\", o);\n    return nl(e, r, s);\n}\nfunction ol(e) {\n    return (r)=>{\n        let t = {\n            requests: r\n        }, n = r[0].extensions.getAllBatchQueryCallbacks();\n        return n.length ? sl(t, n, 0, e) : e(t);\n    };\n}\nfunction sl(e, r, t, n) {\n    if (t === r.length) return n(e);\n    let i = e.customDataProxyFetch, o = e.requests[0].transaction;\n    return r[t]({\n        args: {\n            queries: e.requests.map((s)=>({\n                    model: s.modelName,\n                    operation: s.action,\n                    args: s.args\n                })),\n            transaction: o ? {\n                isolationLevel: o.kind === \"batch\" ? o.isolationLevel : void 0\n            } : void 0\n        },\n        __internalParams: e,\n        query (s, a = e) {\n            let l = a.customDataProxyFetch;\n            return a.customDataProxyFetch = al(i, l), sl(a, r, t + 1, n);\n        }\n    });\n}\nvar tl = (e)=>e;\nfunction al(e = tl, r = tl) {\n    return (t)=>e(r(t));\n}\nvar ll = N(\"prisma:client\"), ul = {\n    Vercel: \"vercel\",\n    \"Netlify CI\": \"netlify\"\n};\nfunction cl({ postinstall: e, ciName: r, clientVersion: t }) {\n    if (ll(\"checkPlatformCaching:postinstall\", e), ll(\"checkPlatformCaching:ciName\", r), e === !0 && r && r in ul) {\n        let n = `Prisma has detected that this project was built on ${r}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \\`prisma generate\\` command during the build process.\n\nLearn how: https://pris.ly/d/${ul[r]}-build`;\n        throw console.error(n), new T(n, t);\n    }\n}\nfunction pl(e, r) {\n    return e ? e.datasources ? e.datasources : e.datasourceUrl ? {\n        [r[0]]: {\n            url: e.datasourceUrl\n        }\n    } : {} : {};\n}\nvar Gm = ()=>globalThis.process?.release?.name === \"node\", Qm = ()=>!!globalThis.Bun || !!globalThis.process?.versions?.bun, Wm = ()=>!!globalThis.Deno, Jm = ()=>typeof globalThis.Netlify == \"object\", Hm = ()=>typeof globalThis.EdgeRuntime == \"object\", Km = ()=>globalThis.navigator?.userAgent === \"Cloudflare-Workers\";\nfunction Ym() {\n    return [\n        [\n            Jm,\n            \"netlify\"\n        ],\n        [\n            Hm,\n            \"edge-light\"\n        ],\n        [\n            Km,\n            \"workerd\"\n        ],\n        [\n            Wm,\n            \"deno\"\n        ],\n        [\n            Qm,\n            \"bun\"\n        ],\n        [\n            Gm,\n            \"node\"\n        ]\n    ].flatMap((t)=>t[0]() ? [\n            t[1]\n        ] : []).at(0) ?? \"\";\n}\nvar zm = {\n    node: \"Node.js\",\n    workerd: \"Cloudflare Workers\",\n    deno: \"Deno and Deno Deploy\",\n    netlify: \"Netlify Edge Functions\",\n    \"edge-light\": \"Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)\"\n};\nfunction Vn() {\n    let e = Ym();\n    return {\n        id: e,\n        prettyName: zm[e] || e,\n        isEdge: [\n            \"workerd\",\n            \"deno\",\n            \"netlify\",\n            \"edge-light\"\n        ].includes(e)\n    };\n}\nvar hl = k(__webpack_require__(/*! node:fs */ \"node:fs\")), St = k(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction Bn(e) {\n    let { runtimeBinaryTarget: r } = e;\n    return `Add \"${r}\" to \\`binaryTargets\\` in the \"schema.prisma\" file and run \\`prisma generate\\` after saving it:\n\n${Zm(e)}`;\n}\nfunction Zm(e) {\n    let { generator: r, generatorBinaryTargets: t, runtimeBinaryTarget: n } = e, i = {\n        fromEnvVar: null,\n        value: n\n    }, o = [\n        ...t,\n        i\n    ];\n    return Ii({\n        ...r,\n        binaryTargets: o\n    });\n}\nfunction Xe(e) {\n    let { runtimeBinaryTarget: r } = e;\n    return `Prisma Client could not locate the Query Engine for runtime \"${r}\".`;\n}\nfunction er(e) {\n    let { searchedLocations: r } = e;\n    return `The following locations have been searched:\n${[\n        ...new Set(r)\n    ].map((i)=>`  ${i}`).join(`\n`)}`;\n}\nfunction dl(e) {\n    let { runtimeBinaryTarget: r } = e;\n    return `${Xe(e)}\n\nThis happened because \\`binaryTargets\\` have been pinned, but the actual deployment also required \"${r}\".\n${Bn(e)}\n\n${er(e)}`;\n}\nfunction Un(e) {\n    return `We would appreciate if you could take the time to share some information with us.\nPlease help us by answering a few questions: https://pris.ly/${e}`;\n}\nfunction Gn(e) {\n    let { errorStack: r } = e;\n    return r?.match(/\\/\\.next|\\/next@|\\/next\\//) ? `\n\nWe detected that you are using Next.js, learn how to fix this: https://pris.ly/d/engine-not-found-nextjs.` : \"\";\n}\nfunction ml(e) {\n    let { queryEngineName: r } = e;\n    return `${Xe(e)}${Gn(e)}\n\nThis is likely caused by a bundler that has not copied \"${r}\" next to the resulting bundle.\nEnsure that \"${r}\" has been copied next to the bundle or in \"${e.expectedLocation}\".\n\n${Un(\"engine-not-found-bundler-investigation\")}\n\n${er(e)}`;\n}\nfunction fl(e) {\n    let { runtimeBinaryTarget: r, generatorBinaryTargets: t } = e, n = t.find((i)=>i.native);\n    return `${Xe(e)}\n\nThis happened because Prisma Client was generated for \"${n?.value ?? \"unknown\"}\", but the actual deployment required \"${r}\".\n${Bn(e)}\n\n${er(e)}`;\n}\nfunction gl(e) {\n    let { queryEngineName: r } = e;\n    return `${Xe(e)}${Gn(e)}\n\nThis is likely caused by tooling that has not copied \"${r}\" to the deployment folder.\nEnsure that you ran \\`prisma generate\\` and that \"${r}\" has been copied to \"${e.expectedLocation}\".\n\n${Un(\"engine-not-found-tooling-investigation\")}\n\n${er(e)}`;\n}\nvar Xm = N(\"prisma:client:engines:resolveEnginePath\"), ef = ()=>new RegExp(\"runtime[\\\\\\\\/]library\\\\.m?js$\");\nasync function yl(e, r) {\n    let t = {\n        binary: process.env.PRISMA_QUERY_ENGINE_BINARY,\n        library: process.env.PRISMA_QUERY_ENGINE_LIBRARY\n    }[e] ?? r.prismaPath;\n    if (t !== void 0) return t;\n    let { enginePath: n, searchedLocations: i } = await rf(e, r);\n    if (Xm(\"enginePath\", n), n !== void 0 && e === \"binary\" && vi(n), n !== void 0) return r.prismaPath = n;\n    let o = await ir(), s = r.generator?.binaryTargets ?? [], a = s.some((d)=>d.native), l = !s.some((d)=>d.value === o), u = __filename.match(ef()) === null, c = {\n        searchedLocations: i,\n        generatorBinaryTargets: s,\n        generator: r.generator,\n        runtimeBinaryTarget: o,\n        queryEngineName: bl(e, o),\n        expectedLocation: St.default.relative(process.cwd(), r.dirname),\n        errorStack: new Error().stack\n    }, p;\n    throw a && l ? p = fl(c) : l ? p = dl(c) : u ? p = ml(c) : p = gl(c), new T(p, r.clientVersion);\n}\nasync function rf(e, r) {\n    let t = await ir(), n = [], i = [\n        r.dirname,\n        St.default.resolve(__dirname, \"..\"),\n        r.generator?.output?.value ?? __dirname,\n        St.default.resolve(__dirname, \"../../../.prisma/client\"),\n        \"/tmp/prisma-engines\",\n        r.cwd\n    ];\n    __filename.includes(\"resolveEnginePath\") && i.push(fs());\n    for (let o of i){\n        let s = bl(e, t), a = St.default.join(o, s);\n        if (n.push(o), hl.default.existsSync(a)) return {\n            enginePath: a,\n            searchedLocations: n\n        };\n    }\n    return {\n        enginePath: void 0,\n        searchedLocations: n\n    };\n}\nfunction bl(e, r) {\n    return e === \"library\" ? Gt(r, \"fs\") : `query-engine-${r}${r === \"windows\" ? \".exe\" : \"\"}`;\n}\nvar lo = k(Oi());\nfunction El(e) {\n    return e ? e.replace(/\".*\"/g, '\"X\"').replace(/[\\s:\\[]([+-]?([0-9]*[.])?[0-9]+)/g, (r)=>`${r[0]}5`) : \"\";\n}\nfunction wl(e) {\n    return e.split(`\n`).map((r)=>r.replace(/^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)\\s*/, \"\").replace(/\\+\\d+\\s*ms$/, \"\")).join(`\n`);\n}\nvar xl = k(Ls());\nfunction Pl({ title: e, user: r = \"prisma\", repo: t = \"prisma\", template: n = \"bug_report.yml\", body: i }) {\n    return (0, xl.default)({\n        user: r,\n        repo: t,\n        template: n,\n        title: e,\n        body: i\n    });\n}\nfunction vl({ version: e, binaryTarget: r, title: t, description: n, engineVersion: i, database: o, query: s }) {\n    let a = Go(6e3 - (s?.length ?? 0)), l = wl((0, lo.default)(a)), u = n ? `# Description\n\\`\\`\\`\n${n}\n\\`\\`\\`` : \"\", c = (0, lo.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:\n## Versions\n\n| Name            | Version            |\n|-----------------|--------------------|\n| Node            | ${process.version?.padEnd(19)}| \n| OS              | ${r?.padEnd(19)}|\n| Prisma Client   | ${e?.padEnd(19)}|\n| Query Engine    | ${i?.padEnd(19)}|\n| Database        | ${o?.padEnd(19)}|\n\n${u}\n\n## Logs\n\\`\\`\\`\n${l}\n\\`\\`\\`\n\n## Client Snippet\n\\`\\`\\`ts\n// PLEASE FILL YOUR CODE SNIPPET HERE\n\\`\\`\\`\n\n## Schema\n\\`\\`\\`prisma\n// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE\n\\`\\`\\`\n\n## Prisma Engine Query\n\\`\\`\\`\n${s ? El(s) : \"\"}\n\\`\\`\\`\n`), p = Pl({\n        title: t,\n        body: c\n    });\n    return `${t}\n\nThis is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.\n\n${Y(p)}\n\nIf you want the Prisma team to look into it, please open the link above \\u{1F64F}\nTo increase the chance of success, please post your schema and a snippet of\nhow you used Prisma Client in the issue. \n`;\n}\nfunction uo(e) {\n    return e.name === \"DriverAdapterError\" && typeof e.cause == \"object\";\n}\nfunction Qn(e) {\n    return {\n        ok: !0,\n        value: e,\n        map (r) {\n            return Qn(r(e));\n        },\n        flatMap (r) {\n            return r(e);\n        }\n    };\n}\nfunction lr(e) {\n    return {\n        ok: !1,\n        error: e,\n        map () {\n            return lr(e);\n        },\n        flatMap () {\n            return lr(e);\n        }\n    };\n}\nvar Tl = N(\"driver-adapter-utils\"), co = class {\n    consumeError(r) {\n        return this.registeredErrors[r];\n    }\n    registerNewError(r) {\n        let t = 0;\n        for(; this.registeredErrors[t] !== void 0;)t++;\n        return this.registeredErrors[t] = {\n            error: r\n        }, t;\n    }\n    constructor(){\n        this.registeredErrors = [];\n    }\n};\nvar po = (e, r = new co)=>{\n    let t = {\n        adapterName: e.adapterName,\n        errorRegistry: r,\n        queryRaw: Me(r, e.queryRaw.bind(e)),\n        executeRaw: Me(r, e.executeRaw.bind(e)),\n        executeScript: Me(r, e.executeScript.bind(e)),\n        dispose: Me(r, e.dispose.bind(e)),\n        provider: e.provider,\n        startTransaction: async (...n)=>(await Me(r, e.startTransaction.bind(e))(...n)).map((o)=>tf(r, o))\n    };\n    return e.getConnectionInfo && (t.getConnectionInfo = nf(r, e.getConnectionInfo.bind(e))), t;\n}, tf = (e, r)=>({\n        adapterName: r.adapterName,\n        provider: r.provider,\n        options: r.options,\n        queryRaw: Me(e, r.queryRaw.bind(r)),\n        executeRaw: Me(e, r.executeRaw.bind(r)),\n        commit: Me(e, r.commit.bind(r)),\n        rollback: Me(e, r.rollback.bind(r))\n    });\nfunction Me(e, r) {\n    return async (...t)=>{\n        try {\n            return Qn(await r(...t));\n        } catch (n) {\n            if (Tl(\"[error@wrapAsync]\", n), uo(n)) return lr(n.cause);\n            let i = e.registerNewError(n);\n            return lr({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nfunction nf(e, r) {\n    return (...t)=>{\n        try {\n            return Qn(r(...t));\n        } catch (n) {\n            if (Tl(\"[error@wrapSync]\", n), uo(n)) return lr(n.cause);\n            let i = e.registerNewError(n);\n            return lr({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nvar Sl = \"6.10.1\";\nfunction jr({ inlineDatasources: e, overrideDatasources: r, env: t, clientVersion: n }) {\n    let i, o = Object.keys(e)[0], s = e[o]?.url, a = r[o]?.url;\n    if (o === void 0 ? i = void 0 : a ? i = a : s?.value ? i = s.value : s?.fromEnvVar && (i = t[s.fromEnvVar]), s?.fromEnvVar !== void 0 && i === void 0) throw new T(`error: Environment variable not found: ${s.fromEnvVar}.`, n);\n    if (i === void 0) throw new T(\"error: Missing URL environment variable, value, or override.\", n);\n    return i;\n}\nvar Wn = class extends Error {\n    constructor(r, t){\n        super(r), this.clientVersion = t.clientVersion, this.cause = t.cause;\n    }\n    get [Symbol.toStringTag]() {\n        return this.name;\n    }\n};\nvar se = class extends Wn {\n    constructor(r, t){\n        super(r, t), this.isRetryable = t.isRetryable ?? !0;\n    }\n};\nfunction R(e, r) {\n    return {\n        ...e,\n        isRetryable: r\n    };\n}\nvar Vr = class extends se {\n    constructor(r){\n        super(\"This request must be retried\", R(r, !0)), this.name = \"ForcedRetryError\", this.code = \"P5001\";\n    }\n};\nx(Vr, \"ForcedRetryError\");\nvar ur = class extends se {\n    constructor(r, t){\n        super(r, R(t, !1)), this.name = \"InvalidDatasourceError\", this.code = \"P6001\";\n    }\n};\nx(ur, \"InvalidDatasourceError\");\nvar cr = class extends se {\n    constructor(r, t){\n        super(r, R(t, !1)), this.name = \"NotImplementedYetError\", this.code = \"P5004\";\n    }\n};\nx(cr, \"NotImplementedYetError\");\nvar $ = class extends se {\n    constructor(r, t){\n        super(r, t), this.response = t.response;\n        let n = this.response.headers.get(\"prisma-request-id\");\n        if (n) {\n            let i = `(The request id was: ${n})`;\n            this.message = this.message + \" \" + i;\n        }\n    }\n};\nvar pr = class extends $ {\n    constructor(r){\n        super(\"Schema needs to be uploaded\", R(r, !0)), this.name = \"SchemaMissingError\", this.code = \"P5005\";\n    }\n};\nx(pr, \"SchemaMissingError\");\nvar mo = \"This request could not be understood by the server\", Rt = class extends $ {\n    constructor(r, t, n){\n        super(t || mo, R(r, !1)), this.name = \"BadRequestError\", this.code = \"P5000\", n && (this.code = n);\n    }\n};\nx(Rt, \"BadRequestError\");\nvar Ct = class extends $ {\n    constructor(r, t){\n        super(\"Engine not started: healthcheck timeout\", R(r, !0)), this.name = \"HealthcheckTimeoutError\", this.code = \"P5013\", this.logs = t;\n    }\n};\nx(Ct, \"HealthcheckTimeoutError\");\nvar At = class extends $ {\n    constructor(r, t, n){\n        super(t, R(r, !0)), this.name = \"EngineStartupError\", this.code = \"P5014\", this.logs = n;\n    }\n};\nx(At, \"EngineStartupError\");\nvar It = class extends $ {\n    constructor(r){\n        super(\"Engine version is not supported\", R(r, !1)), this.name = \"EngineVersionNotSupportedError\", this.code = \"P5012\";\n    }\n};\nx(It, \"EngineVersionNotSupportedError\");\nvar fo = \"Request timed out\", kt = class extends $ {\n    constructor(r, t = fo){\n        super(t, R(r, !1)), this.name = \"GatewayTimeoutError\", this.code = \"P5009\";\n    }\n};\nx(kt, \"GatewayTimeoutError\");\nvar sf = \"Interactive transaction error\", Ot = class extends $ {\n    constructor(r, t = sf){\n        super(t, R(r, !1)), this.name = \"InteractiveTransactionError\", this.code = \"P5015\";\n    }\n};\nx(Ot, \"InteractiveTransactionError\");\nvar af = \"Request parameters are invalid\", Dt = class extends $ {\n    constructor(r, t = af){\n        super(t, R(r, !1)), this.name = \"InvalidRequestError\", this.code = \"P5011\";\n    }\n};\nx(Dt, \"InvalidRequestError\");\nvar go = \"Requested resource does not exist\", _t = class extends $ {\n    constructor(r, t = go){\n        super(t, R(r, !1)), this.name = \"NotFoundError\", this.code = \"P5003\";\n    }\n};\nx(_t, \"NotFoundError\");\nvar ho = \"Unknown server error\", Br = class extends $ {\n    constructor(r, t, n){\n        super(t || ho, R(r, !0)), this.name = \"ServerError\", this.code = \"P5006\", this.logs = n;\n    }\n};\nx(Br, \"ServerError\");\nvar yo = \"Unauthorized, check your connection string\", Nt = class extends $ {\n    constructor(r, t = yo){\n        super(t, R(r, !1)), this.name = \"UnauthorizedError\", this.code = \"P5007\";\n    }\n};\nx(Nt, \"UnauthorizedError\");\nvar bo = \"Usage exceeded, retry again later\", Lt = class extends $ {\n    constructor(r, t = bo){\n        super(t, R(r, !0)), this.name = \"UsageExceededError\", this.code = \"P5008\";\n    }\n};\nx(Lt, \"UsageExceededError\");\nasync function lf(e) {\n    let r;\n    try {\n        r = await e.text();\n    } catch  {\n        return {\n            type: \"EmptyError\"\n        };\n    }\n    try {\n        let t = JSON.parse(r);\n        if (typeof t == \"string\") switch(t){\n            case \"InternalDataProxyError\":\n                return {\n                    type: \"DataProxyError\",\n                    body: t\n                };\n            default:\n                return {\n                    type: \"UnknownTextError\",\n                    body: t\n                };\n        }\n        if (typeof t == \"object\" && t !== null) {\n            if (\"is_panic\" in t && \"message\" in t && \"error_code\" in t) return {\n                type: \"QueryEngineError\",\n                body: t\n            };\n            if (\"EngineNotStarted\" in t || \"InteractiveTransactionMisrouted\" in t || \"InvalidRequestError\" in t) {\n                let n = Object.values(t)[0].reason;\n                return typeof n == \"string\" && ![\n                    \"SchemaMissing\",\n                    \"EngineVersionNotSupported\"\n                ].includes(n) ? {\n                    type: \"UnknownJsonError\",\n                    body: t\n                } : {\n                    type: \"DataProxyError\",\n                    body: t\n                };\n            }\n        }\n        return {\n            type: \"UnknownJsonError\",\n            body: t\n        };\n    } catch  {\n        return r === \"\" ? {\n            type: \"EmptyError\"\n        } : {\n            type: \"UnknownTextError\",\n            body: r\n        };\n    }\n}\nasync function Ft(e, r) {\n    if (e.ok) return;\n    let t = {\n        clientVersion: r,\n        response: e\n    }, n = await lf(e);\n    if (n.type === \"QueryEngineError\") throw new z(n.body.message, {\n        code: n.body.error_code,\n        clientVersion: r\n    });\n    if (n.type === \"DataProxyError\") {\n        if (n.body === \"InternalDataProxyError\") throw new Br(t, \"Internal Data Proxy error\");\n        if (\"EngineNotStarted\" in n.body) {\n            if (n.body.EngineNotStarted.reason === \"SchemaMissing\") return new pr(t);\n            if (n.body.EngineNotStarted.reason === \"EngineVersionNotSupported\") throw new It(t);\n            if (\"EngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, logs: o } = n.body.EngineNotStarted.reason.EngineStartupError;\n                throw new At(t, i, o);\n            }\n            if (\"KnownEngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, error_code: o } = n.body.EngineNotStarted.reason.KnownEngineStartupError;\n                throw new T(i, r, o);\n            }\n            if (\"HealthcheckTimeout\" in n.body.EngineNotStarted.reason) {\n                let { logs: i } = n.body.EngineNotStarted.reason.HealthcheckTimeout;\n                throw new Ct(t, i);\n            }\n        }\n        if (\"InteractiveTransactionMisrouted\" in n.body) {\n            let i = {\n                IDParseError: \"Could not parse interactive transaction ID\",\n                NoQueryEngineFoundError: \"Could not find Query Engine for the specified host and transaction ID\",\n                TransactionStartError: \"Could not start interactive transaction\"\n            };\n            throw new Ot(t, i[n.body.InteractiveTransactionMisrouted.reason]);\n        }\n        if (\"InvalidRequestError\" in n.body) throw new Dt(t, n.body.InvalidRequestError.reason);\n    }\n    if (e.status === 401 || e.status === 403) throw new Nt(t, Ur(yo, n));\n    if (e.status === 404) return new _t(t, Ur(go, n));\n    if (e.status === 429) throw new Lt(t, Ur(bo, n));\n    if (e.status === 504) throw new kt(t, Ur(fo, n));\n    if (e.status >= 500) throw new Br(t, Ur(ho, n));\n    if (e.status >= 400) throw new Rt(t, Ur(mo, n));\n}\nfunction Ur(e, r) {\n    return r.type === \"EmptyError\" ? e : `${e}: ${JSON.stringify(r)}`;\n}\nfunction Rl(e) {\n    let r = Math.pow(2, e) * 50, t = Math.ceil(Math.random() * r) - Math.ceil(r / 2), n = r + t;\n    return new Promise((i)=>setTimeout(()=>i(n), n));\n}\nvar $e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfunction Cl(e) {\n    let r = new TextEncoder().encode(e), t = \"\", n = r.byteLength, i = n % 3, o = n - i, s, a, l, u, c;\n    for(let p = 0; p < o; p = p + 3)c = r[p] << 16 | r[p + 1] << 8 | r[p + 2], s = (c & 16515072) >> 18, a = (c & 258048) >> 12, l = (c & 4032) >> 6, u = c & 63, t += $e[s] + $e[a] + $e[l] + $e[u];\n    return i == 1 ? (c = r[o], s = (c & 252) >> 2, a = (c & 3) << 4, t += $e[s] + $e[a] + \"==\") : i == 2 && (c = r[o] << 8 | r[o + 1], s = (c & 64512) >> 10, a = (c & 1008) >> 4, l = (c & 15) << 2, t += $e[s] + $e[a] + $e[l] + \"=\"), t;\n}\nfunction Al(e) {\n    if (!!e.generator?.previewFeatures.some((t)=>t.toLowerCase().includes(\"metrics\"))) throw new T(\"The `metrics` preview feature is not yet available with Accelerate.\\nPlease remove `metrics` from the `previewFeatures` in your schema.\\n\\nMore information about Accelerate: https://pris.ly/d/accelerate\", e.clientVersion);\n}\nfunction uf(e) {\n    return e[0] * 1e3 + e[1] / 1e6;\n}\nfunction Eo(e) {\n    return new Date(uf(e));\n}\nvar Il = {\n    \"@prisma/debug\": \"workspace:*\",\n    \"@prisma/engines-version\": \"6.10.1-1.9b628578b3b7cae625e8c927178f15a170e74a9c\",\n    \"@prisma/fetch-engine\": \"workspace:*\",\n    \"@prisma/get-platform\": \"workspace:*\"\n};\nvar Mt = class extends se {\n    constructor(r, t){\n        super(`Cannot fetch data from service:\n${r}`, R(t, !0)), this.name = \"RequestError\", this.code = \"P5010\";\n    }\n};\nx(Mt, \"RequestError\");\nasync function dr(e, r, t = (n)=>n) {\n    let { clientVersion: n, ...i } = r, o = t(fetch);\n    try {\n        return await o(e, i);\n    } catch (s) {\n        let a = s.message ?? \"Unknown error\";\n        throw new Mt(a, {\n            clientVersion: n,\n            cause: s\n        });\n    }\n}\nvar pf = /^[1-9][0-9]*\\.[0-9]+\\.[0-9]+$/, kl = N(\"prisma:client:dataproxyEngine\");\nasync function df(e, r) {\n    let t = Il[\"@prisma/engines-version\"], n = r.clientVersion ?? \"unknown\";\n    if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION || globalThis.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION) return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION || globalThis.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;\n    if (e.includes(\"accelerate\") && n !== \"0.0.0\" && n !== \"in-memory\") return n;\n    let [i, o] = n?.split(\"-\") ?? [];\n    if (o === void 0 && pf.test(i)) return i;\n    if (o !== void 0 || n === \"0.0.0\" || n === \"in-memory\") {\n        let [s] = t.split(\"-\") ?? [], [a, l, u] = s.split(\".\"), c = mf(`<=${a}.${l}.${u}`), p = await dr(c, {\n            clientVersion: n\n        });\n        if (!p.ok) throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${p.status} ${p.statusText}, response body: ${await p.text() || \"<empty body>\"}`);\n        let d = await p.text();\n        kl(\"length of body fetched from unpkg.com\", d.length);\n        let f;\n        try {\n            f = JSON.parse(d);\n        } catch (g) {\n            throw console.error(\"JSON.parse error: body fetched from unpkg.com: \", d), g;\n        }\n        return f.version;\n    }\n    throw new cr(\"Only `major.minor.patch` versions are supported by Accelerate.\", {\n        clientVersion: n\n    });\n}\nasync function Ol(e, r) {\n    let t = await df(e, r);\n    return kl(\"version\", t), t;\n}\nfunction mf(e) {\n    return encodeURI(`https://unpkg.com/prisma@${e}/package.json`);\n}\nvar Dl = 3, $t = N(\"prisma:client:dataproxyEngine\"), wo = class {\n    constructor({ apiKey: r, tracingHelper: t, logLevel: n, logQueries: i, engineHash: o }){\n        this.apiKey = r, this.tracingHelper = t, this.logLevel = n, this.logQueries = i, this.engineHash = o;\n    }\n    build({ traceparent: r, interactiveTransaction: t } = {}) {\n        let n = {\n            Authorization: `Bearer ${this.apiKey}`,\n            \"Prisma-Engine-Hash\": this.engineHash\n        };\n        this.tracingHelper.isEnabled() && (n.traceparent = r ?? this.tracingHelper.getTraceParent()), t && (n[\"X-transaction-id\"] = t.id);\n        let i = this.buildCaptureSettings();\n        return i.length > 0 && (n[\"X-capture-telemetry\"] = i.join(\", \")), n;\n    }\n    buildCaptureSettings() {\n        let r = [];\n        return this.tracingHelper.isEnabled() && r.push(\"tracing\"), this.logLevel && r.push(this.logLevel), this.logQueries && r.push(\"query\"), r;\n    }\n}, qt = class {\n    constructor(r){\n        this.name = \"DataProxyEngine\";\n        Al(r), this.config = r, this.env = {\n            ...r.env,\n            ...typeof process < \"u\" ? process.env : {}\n        }, this.inlineSchema = Cl(r.inlineSchema), this.inlineDatasources = r.inlineDatasources, this.inlineSchemaHash = r.inlineSchemaHash, this.clientVersion = r.clientVersion, this.engineHash = r.engineVersion, this.logEmitter = r.logEmitter, this.tracingHelper = r.tracingHelper;\n    }\n    apiKey() {\n        return this.headerBuilder.apiKey;\n    }\n    version() {\n        return this.engineHash;\n    }\n    async start() {\n        this.startPromise !== void 0 && await this.startPromise, this.startPromise = (async ()=>{\n            let { apiKey: r, url: t } = this.getURLAndAPIKey();\n            this.host = t.host, this.headerBuilder = new wo({\n                apiKey: r,\n                tracingHelper: this.tracingHelper,\n                logLevel: this.config.logLevel,\n                logQueries: this.config.logQueries,\n                engineHash: this.engineHash\n            }), this.protocol = Ri(t) ? \"http\" : \"https\", this.remoteClientVersion = await Ol(this.host, this.config), $t(\"host\", this.host), $t(\"protocol\", this.protocol);\n        })(), await this.startPromise;\n    }\n    async stop() {}\n    propagateResponseExtensions(r) {\n        r?.logs?.length && r.logs.forEach((t)=>{\n            switch(t.level){\n                case \"debug\":\n                case \"trace\":\n                    $t(t);\n                    break;\n                case \"error\":\n                case \"warn\":\n                case \"info\":\n                    {\n                        this.logEmitter.emit(t.level, {\n                            timestamp: Eo(t.timestamp),\n                            message: t.attributes.message ?? \"\",\n                            target: t.target\n                        });\n                        break;\n                    }\n                case \"query\":\n                    {\n                        this.logEmitter.emit(\"query\", {\n                            query: t.attributes.query ?? \"\",\n                            timestamp: Eo(t.timestamp),\n                            duration: t.attributes.duration_ms ?? 0,\n                            params: t.attributes.params ?? \"\",\n                            target: t.target\n                        });\n                        break;\n                    }\n                default:\n                    t.level;\n            }\n        }), r?.traces?.length && this.tracingHelper.dispatchEngineSpans(r.traces);\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the remote query engine');\n    }\n    async url(r) {\n        return await this.start(), `${this.protocol}://${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${r}`;\n    }\n    async uploadSchema() {\n        let r = {\n            name: \"schemaUpload\",\n            internal: !0\n        };\n        return this.tracingHelper.runInChildSpan(r, async ()=>{\n            let t = await dr(await this.url(\"schema\"), {\n                method: \"PUT\",\n                headers: this.headerBuilder.build(),\n                body: this.inlineSchema,\n                clientVersion: this.clientVersion\n            });\n            t.ok || $t(\"schema response status\", t.status);\n            let n = await Ft(t, this.clientVersion);\n            if (n) throw this.logEmitter.emit(\"warn\", {\n                message: `Error while uploading schema: ${n.message}`,\n                timestamp: new Date,\n                target: \"\"\n            }), n;\n            this.logEmitter.emit(\"info\", {\n                message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`,\n                timestamp: new Date,\n                target: \"\"\n            });\n        });\n    }\n    request(r, { traceparent: t, interactiveTransaction: n, customDataProxyFetch: i }) {\n        return this.requestInternal({\n            body: r,\n            traceparent: t,\n            interactiveTransaction: n,\n            customDataProxyFetch: i\n        });\n    }\n    async requestBatch(r, { traceparent: t, transaction: n, customDataProxyFetch: i }) {\n        let o = n?.kind === \"itx\" ? n.options : void 0, s = Mr(r, n);\n        return (await this.requestInternal({\n            body: s,\n            customDataProxyFetch: i,\n            interactiveTransaction: o,\n            traceparent: t\n        })).map((l)=>(l.extensions && this.propagateResponseExtensions(l.extensions), \"errors\" in l ? this.convertProtocolErrorsToClientError(l.errors) : l));\n    }\n    requestInternal({ body: r, traceparent: t, customDataProxyFetch: n, interactiveTransaction: i }) {\n        return this.withRetry({\n            actionGerund: \"querying\",\n            callback: async ({ logHttpCall: o })=>{\n                let s = i ? `${i.payload.endpoint}/graphql` : await this.url(\"graphql\");\n                o(s);\n                let a = await dr(s, {\n                    method: \"POST\",\n                    headers: this.headerBuilder.build({\n                        traceparent: t,\n                        interactiveTransaction: i\n                    }),\n                    body: JSON.stringify(r),\n                    clientVersion: this.clientVersion\n                }, n);\n                a.ok || $t(\"graphql response status\", a.status), await this.handleError(await Ft(a, this.clientVersion));\n                let l = await a.json();\n                if (l.extensions && this.propagateResponseExtensions(l.extensions), \"errors\" in l) throw this.convertProtocolErrorsToClientError(l.errors);\n                return \"batchResult\" in l ? l.batchResult : l;\n            }\n        });\n    }\n    async transaction(r, t, n) {\n        let i = {\n            start: \"starting\",\n            commit: \"committing\",\n            rollback: \"rolling back\"\n        };\n        return this.withRetry({\n            actionGerund: `${i[r]} transaction`,\n            callback: async ({ logHttpCall: o })=>{\n                if (r === \"start\") {\n                    let s = JSON.stringify({\n                        max_wait: n.maxWait,\n                        timeout: n.timeout,\n                        isolation_level: n.isolationLevel\n                    }), a = await this.url(\"transaction/start\");\n                    o(a);\n                    let l = await dr(a, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: t.traceparent\n                        }),\n                        body: s,\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Ft(l, this.clientVersion));\n                    let u = await l.json(), { extensions: c } = u;\n                    c && this.propagateResponseExtensions(c);\n                    let p = u.id, d = u[\"data-proxy\"].endpoint;\n                    return {\n                        id: p,\n                        payload: {\n                            endpoint: d\n                        }\n                    };\n                } else {\n                    let s = `${n.payload.endpoint}/${r}`;\n                    o(s);\n                    let a = await dr(s, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: t.traceparent\n                        }),\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Ft(a, this.clientVersion));\n                    let l = await a.json(), { extensions: u } = l;\n                    u && this.propagateResponseExtensions(u);\n                    return;\n                }\n            }\n        });\n    }\n    getURLAndAPIKey() {\n        let r = {\n            clientVersion: this.clientVersion\n        }, t = Object.keys(this.inlineDatasources)[0], n = jr({\n            inlineDatasources: this.inlineDatasources,\n            overrideDatasources: this.config.overrideDatasources,\n            clientVersion: this.clientVersion,\n            env: this.env\n        }), i;\n        try {\n            i = new URL(n);\n        } catch  {\n            throw new ur(`Error validating datasource \\`${t}\\`: the URL must start with the protocol \\`prisma://\\``, r);\n        }\n        let { protocol: o, searchParams: s } = i;\n        if (o !== \"prisma:\" && o !== tn) throw new ur(`Error validating datasource \\`${t}\\`: the URL must start with the protocol \\`prisma://\\` or \\`prisma+postgres://\\``, r);\n        let a = s.get(\"api_key\");\n        if (a === null || a.length < 1) throw new ur(`Error validating datasource \\`${t}\\`: the URL must contain a valid API key`, r);\n        return {\n            apiKey: a,\n            url: i\n        };\n    }\n    metrics() {\n        throw new cr(\"Metrics are not yet supported for Accelerate\", {\n            clientVersion: this.clientVersion\n        });\n    }\n    async withRetry(r) {\n        for(let t = 0;; t++){\n            let n = (i)=>{\n                this.logEmitter.emit(\"info\", {\n                    message: `Calling ${i} (n=${t})`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            };\n            try {\n                return await r.callback({\n                    logHttpCall: n\n                });\n            } catch (i) {\n                if (!(i instanceof se) || !i.isRetryable) throw i;\n                if (t >= Dl) throw i instanceof Vr ? i.cause : i;\n                this.logEmitter.emit(\"warn\", {\n                    message: `Attempt ${t + 1}/${Dl} failed for ${r.actionGerund}: ${i.message ?? \"(unknown)\"}`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n                let o = await Rl(t);\n                this.logEmitter.emit(\"warn\", {\n                    message: `Retrying after ${o}ms`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            }\n        }\n    }\n    async handleError(r) {\n        if (r instanceof pr) throw await this.uploadSchema(), new Vr({\n            clientVersion: this.clientVersion,\n            cause: r\n        });\n        if (r) throw r;\n    }\n    convertProtocolErrorsToClientError(r) {\n        return r.length === 1 ? $r(r[0], this.config.clientVersion, this.config.activeProvider) : new j(JSON.stringify(r), {\n            clientVersion: this.config.clientVersion\n        });\n    }\n    applyPendingMigrations() {\n        throw new Error(\"Method not implemented.\");\n    }\n};\nfunction _l(e) {\n    if (e?.kind === \"itx\") return e.options.id;\n}\nvar Po = k(__webpack_require__(/*! node:os */ \"node:os\")), Nl = k(__webpack_require__(/*! node:path */ \"node:path\"));\nvar xo = Symbol(\"PrismaLibraryEngineCache\");\nfunction ff() {\n    let e = globalThis;\n    return e[xo] === void 0 && (e[xo] = {}), e[xo];\n}\nfunction gf(e) {\n    let r = ff();\n    if (r[e] !== void 0) return r[e];\n    let t = Nl.default.toNamespacedPath(e), n = {\n        exports: {}\n    }, i = 0;\n    return process.platform !== \"win32\" && (i = Po.default.constants.dlopen.RTLD_LAZY | Po.default.constants.dlopen.RTLD_DEEPBIND), process.dlopen(n, t, i), r[e] = n.exports, n.exports;\n}\nvar Ll = {\n    async loadLibrary (e) {\n        let r = await di(), t = await yl(\"library\", e);\n        try {\n            return e.tracingHelper.runInChildSpan({\n                name: \"loadLibrary\",\n                internal: !0\n            }, ()=>gf(t));\n        } catch (n) {\n            let i = Ti({\n                e: n,\n                platformInfo: r,\n                id: t\n            });\n            throw new T(i, e.clientVersion);\n        }\n    }\n};\nvar vo, Fl = {\n    async loadLibrary (e) {\n        let { clientVersion: r, adapter: t, engineWasm: n } = e;\n        if (t === void 0) throw new T(`The \\`adapter\\` option for \\`PrismaClient\\` is required in this context (${Vn().prettyName})`, r);\n        if (n === void 0) throw new T(\"WASM engine was unexpectedly `undefined`\", r);\n        vo === void 0 && (vo = (async ()=>{\n            let o = await n.getRuntime(), s = await n.getQueryEngineWasmModule();\n            if (s == null) throw new T(\"The loaded wasm module was unexpectedly `undefined` or `null` once loaded\", r);\n            let a = {\n                \"./query_engine_bg.js\": o\n            }, l = new WebAssembly.Instance(s, a), u = l.exports.__wbindgen_start;\n            return o.__wbg_set_wasm(l.exports), u(), o.QueryEngine;\n        })());\n        let i = await vo;\n        return {\n            debugPanic () {\n                return Promise.reject(\"{}\");\n            },\n            dmmf () {\n                return Promise.resolve(\"{}\");\n            },\n            version () {\n                return {\n                    commit: \"unknown\",\n                    version: \"unknown\"\n                };\n            },\n            QueryEngine: i\n        };\n    }\n};\nvar hf = \"P2036\", Ce = N(\"prisma:client:libraryEngine\");\nfunction yf(e) {\n    return e.item_type === \"query\" && \"query\" in e;\n}\nfunction bf(e) {\n    return \"level\" in e ? e.level === \"error\" && e.message === \"PANIC\" : !1;\n}\nvar Ml = [\n    ...si,\n    \"native\"\n], Ef = 0xffffffffffffffffn, To = 1n;\nfunction wf() {\n    let e = To++;\n    return To > Ef && (To = 1n), e;\n}\nvar Gr = class {\n    constructor(r, t){\n        this.name = \"LibraryEngine\";\n        this.libraryLoader = t ?? Ll, r.engineWasm !== void 0 && (this.libraryLoader = t ?? Fl), this.config = r, this.libraryStarted = !1, this.logQueries = r.logQueries ?? !1, this.logLevel = r.logLevel ?? \"error\", this.logEmitter = r.logEmitter, this.datamodel = r.inlineSchema, this.tracingHelper = r.tracingHelper, r.enableDebugLogs && (this.logLevel = \"debug\");\n        let n = Object.keys(r.overrideDatasources)[0], i = r.overrideDatasources[n]?.url;\n        n !== void 0 && i !== void 0 && (this.datasourceOverrides = {\n            [n]: i\n        }), this.libraryInstantiationPromise = this.instantiateLibrary();\n    }\n    wrapEngine(r) {\n        return {\n            applyPendingMigrations: r.applyPendingMigrations?.bind(r),\n            commitTransaction: this.withRequestId(r.commitTransaction.bind(r)),\n            connect: this.withRequestId(r.connect.bind(r)),\n            disconnect: this.withRequestId(r.disconnect.bind(r)),\n            metrics: r.metrics?.bind(r),\n            query: this.withRequestId(r.query.bind(r)),\n            rollbackTransaction: this.withRequestId(r.rollbackTransaction.bind(r)),\n            sdlSchema: r.sdlSchema?.bind(r),\n            startTransaction: this.withRequestId(r.startTransaction.bind(r)),\n            trace: r.trace.bind(r)\n        };\n    }\n    withRequestId(r) {\n        return async (...t)=>{\n            let n = wf().toString();\n            try {\n                return await r(...t, n);\n            } finally{\n                if (this.tracingHelper.isEnabled()) {\n                    let i = await this.engine?.trace(n);\n                    if (i) {\n                        let o = JSON.parse(i);\n                        this.tracingHelper.dispatchEngineSpans(o.spans);\n                    }\n                }\n            }\n        };\n    }\n    async applyPendingMigrations() {\n        throw new Error(\"Cannot call this method from this type of engine instance\");\n    }\n    async transaction(r, t, n) {\n        await this.start();\n        let i = await this.adapterPromise, o = JSON.stringify(t), s;\n        if (r === \"start\") {\n            let l = JSON.stringify({\n                max_wait: n.maxWait,\n                timeout: n.timeout,\n                isolation_level: n.isolationLevel\n            });\n            s = await this.engine?.startTransaction(l, o);\n        } else r === \"commit\" ? s = await this.engine?.commitTransaction(n.id, o) : r === \"rollback\" && (s = await this.engine?.rollbackTransaction(n.id, o));\n        let a = this.parseEngineResponse(s);\n        if (xf(a)) {\n            let l = this.getExternalAdapterError(a, i?.errorRegistry);\n            throw l ? l.error : new z(a.message, {\n                code: a.error_code,\n                clientVersion: this.config.clientVersion,\n                meta: a.meta\n            });\n        } else if (typeof a.message == \"string\") throw new j(a.message, {\n            clientVersion: this.config.clientVersion\n        });\n        return a;\n    }\n    async instantiateLibrary() {\n        if (Ce(\"internalSetup\"), this.libraryInstantiationPromise) return this.libraryInstantiationPromise;\n        oi(), this.binaryTarget = await this.getCurrentBinaryTarget(), await this.tracingHelper.runInChildSpan(\"load_engine\", ()=>this.loadEngine()), this.version();\n    }\n    async getCurrentBinaryTarget() {\n        {\n            if (this.binaryTarget) return this.binaryTarget;\n            let r = await this.tracingHelper.runInChildSpan(\"detect_platform\", ()=>ir());\n            if (!Ml.includes(r)) throw new T(`Unknown ${ce(\"PRISMA_QUERY_ENGINE_LIBRARY\")} ${ce(W(r))}. Possible binaryTargets: ${qe(Ml.join(\", \"))} or a path to the query engine library.\nYou may have to run ${qe(\"prisma generate\")} for your changes to take effect.`, this.config.clientVersion);\n            return r;\n        }\n    }\n    parseEngineResponse(r) {\n        if (!r) throw new j(\"Response from the Engine was empty\", {\n            clientVersion: this.config.clientVersion\n        });\n        try {\n            return JSON.parse(r);\n        } catch  {\n            throw new j(\"Unable to JSON.parse response from engine\", {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async loadEngine() {\n        if (!this.engine) {\n            this.QueryEngineConstructor || (this.library = await this.libraryLoader.loadLibrary(this.config), this.QueryEngineConstructor = this.library.QueryEngine);\n            try {\n                let r = new WeakRef(this);\n                this.adapterPromise || (this.adapterPromise = this.config.adapter?.connect()?.then(po));\n                let t = await this.adapterPromise;\n                t && Ce(\"Using driver adapter: %O\", t), this.engine = this.wrapEngine(new this.QueryEngineConstructor({\n                    datamodel: this.datamodel,\n                    env: process.env,\n                    logQueries: this.config.logQueries ?? !1,\n                    ignoreEnvVarErrors: !0,\n                    datasourceOverrides: this.datasourceOverrides ?? {},\n                    logLevel: this.logLevel,\n                    configDir: this.config.cwd,\n                    engineProtocol: \"json\",\n                    enableTracing: this.tracingHelper.isEnabled()\n                }, (n)=>{\n                    r.deref()?.logger(n);\n                }, t));\n            } catch (r) {\n                let t = r, n = this.parseInitError(t.message);\n                throw typeof n == \"string\" ? t : new T(n.message, this.config.clientVersion, n.error_code);\n            }\n        }\n    }\n    logger(r) {\n        let t = this.parseEngineResponse(r);\n        t && (t.level = t?.level.toLowerCase() ?? \"unknown\", yf(t) ? this.logEmitter.emit(\"query\", {\n            timestamp: new Date,\n            query: t.query,\n            params: t.params,\n            duration: Number(t.duration_ms),\n            target: t.module_path\n        }) : bf(t) ? this.loggerRustPanic = new le(So(this, `${t.message}: ${t.reason} in ${t.file}:${t.line}:${t.column}`), this.config.clientVersion) : this.logEmitter.emit(t.level, {\n            timestamp: new Date,\n            message: t.message,\n            target: t.module_path\n        }));\n    }\n    parseInitError(r) {\n        try {\n            return JSON.parse(r);\n        } catch  {}\n        return r;\n    }\n    parseRequestError(r) {\n        try {\n            return JSON.parse(r);\n        } catch  {}\n        return r;\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');\n    }\n    async start() {\n        if (await this.libraryInstantiationPromise, await this.libraryStoppingPromise, this.libraryStartingPromise) return Ce(`library already starting, this.libraryStarted: ${this.libraryStarted}`), this.libraryStartingPromise;\n        if (this.libraryStarted) return;\n        let r = async ()=>{\n            Ce(\"library starting\");\n            try {\n                let t = {\n                    traceparent: this.tracingHelper.getTraceParent()\n                };\n                await this.engine?.connect(JSON.stringify(t)), this.libraryStarted = !0, Ce(\"library started\");\n            } catch (t) {\n                let n = this.parseInitError(t.message);\n                throw typeof n == \"string\" ? t : new T(n.message, this.config.clientVersion, n.error_code);\n            } finally{\n                this.libraryStartingPromise = void 0;\n            }\n        };\n        return this.libraryStartingPromise = this.tracingHelper.runInChildSpan(\"connect\", r), this.libraryStartingPromise;\n    }\n    async stop() {\n        if (await this.libraryInstantiationPromise, await this.libraryStartingPromise, await this.executingQueryPromise, this.libraryStoppingPromise) return Ce(\"library is already stopping\"), this.libraryStoppingPromise;\n        if (!this.libraryStarted) return;\n        let r = async ()=>{\n            await new Promise((n)=>setTimeout(n, 5)), Ce(\"library stopping\");\n            let t = {\n                traceparent: this.tracingHelper.getTraceParent()\n            };\n            await this.engine?.disconnect(JSON.stringify(t)), this.libraryStarted = !1, this.libraryStoppingPromise = void 0, await (await this.adapterPromise)?.dispose(), this.adapterPromise = void 0, Ce(\"library stopped\");\n        };\n        return this.libraryStoppingPromise = this.tracingHelper.runInChildSpan(\"disconnect\", r), this.libraryStoppingPromise;\n    }\n    version() {\n        return this.versionInfo = this.library?.version(), this.versionInfo?.version ?? \"unknown\";\n    }\n    debugPanic(r) {\n        return this.library?.debugPanic(r);\n    }\n    async request(r, { traceparent: t, interactiveTransaction: n }) {\n        Ce(`sending request, this.libraryStarted: ${this.libraryStarted}`);\n        let i = JSON.stringify({\n            traceparent: t\n        }), o = JSON.stringify(r);\n        try {\n            await this.start();\n            let s = await this.adapterPromise;\n            this.executingQueryPromise = this.engine?.query(o, i, n?.id), this.lastQuery = o;\n            let a = this.parseEngineResponse(await this.executingQueryPromise);\n            if (a.errors) throw a.errors.length === 1 ? this.buildQueryError(a.errors[0], s?.errorRegistry) : new j(JSON.stringify(a.errors), {\n                clientVersion: this.config.clientVersion\n            });\n            if (this.loggerRustPanic) throw this.loggerRustPanic;\n            return {\n                data: a\n            };\n        } catch (s) {\n            if (s instanceof T) throw s;\n            if (s.code === \"GenericFailure\" && s.message?.startsWith(\"PANIC:\")) throw new le(So(this, s.message), this.config.clientVersion);\n            let a = this.parseRequestError(s.message);\n            throw typeof a == \"string\" ? s : new j(`${a.message}\n${a.backtrace}`, {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async requestBatch(r, { transaction: t, traceparent: n }) {\n        Ce(\"requestBatch\");\n        let i = Mr(r, t);\n        await this.start();\n        let o = await this.adapterPromise;\n        this.lastQuery = JSON.stringify(i), this.executingQueryPromise = this.engine.query(this.lastQuery, JSON.stringify({\n            traceparent: n\n        }), _l(t));\n        let s = await this.executingQueryPromise, a = this.parseEngineResponse(s);\n        if (a.errors) throw a.errors.length === 1 ? this.buildQueryError(a.errors[0], o?.errorRegistry) : new j(JSON.stringify(a.errors), {\n            clientVersion: this.config.clientVersion\n        });\n        let { batchResult: l, errors: u } = a;\n        if (Array.isArray(l)) return l.map((c)=>c.errors && c.errors.length > 0 ? this.loggerRustPanic ?? this.buildQueryError(c.errors[0], o?.errorRegistry) : {\n                data: c\n            });\n        throw u && u.length === 1 ? new Error(u[0].error) : new Error(JSON.stringify(a));\n    }\n    buildQueryError(r, t) {\n        if (r.user_facing_error.is_panic) return new le(So(this, r.user_facing_error.message), this.config.clientVersion);\n        let n = this.getExternalAdapterError(r.user_facing_error, t);\n        return n ? n.error : $r(r, this.config.clientVersion, this.config.activeProvider);\n    }\n    getExternalAdapterError(r, t) {\n        if (r.error_code === hf && t) {\n            let n = r.meta?.id;\n            on(typeof n == \"number\", \"Malformed external JS error received from the engine\");\n            let i = t.consumeError(n);\n            return on(i, \"External error with reported id was not registered\"), i;\n        }\n    }\n    async metrics(r) {\n        await this.start();\n        let t = await this.engine.metrics(JSON.stringify(r));\n        return r.format === \"prometheus\" ? t : this.parseEngineResponse(t);\n    }\n};\nfunction xf(e) {\n    return typeof e == \"object\" && e !== null && e.error_code !== void 0;\n}\nfunction So(e, r) {\n    return vl({\n        binaryTarget: e.binaryTarget,\n        title: r,\n        version: e.config.clientVersion,\n        engineVersion: e.versionInfo?.commit,\n        database: e.config.activeProvider,\n        query: e.lastQuery\n    });\n}\nfunction $l({ copyEngine: e = !0 }, r) {\n    let t;\n    try {\n        t = jr({\n            inlineDatasources: r.inlineDatasources,\n            overrideDatasources: r.overrideDatasources,\n            env: {\n                ...r.env,\n                ...process.env\n            },\n            clientVersion: r.clientVersion\n        });\n    } catch  {}\n    let n = !!(t?.startsWith(\"prisma://\") || nn(t));\n    e && n && st(\"recommend--no-engine\", \"In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)\");\n    let i = Er(r.generator), o = n || !e, s = !!r.adapter, a = i === \"library\", l = i === \"binary\", u = i === \"client\";\n    if (o && s || s && !1) {\n        let c;\n        throw e ? t?.startsWith(\"prisma://\") ? c = [\n            \"Prisma Client was configured to use the `adapter` option but the URL was a `prisma://` URL.\",\n            \"Please either use the `prisma://` URL or remove the `adapter` from the Prisma Client constructor.\"\n        ] : c = [\n            \"Prisma Client was configured to use both the `adapter` and Accelerate, please chose one.\"\n        ] : c = [\n            \"Prisma Client was configured to use the `adapter` option but `prisma generate` was run with `--no-engine`.\",\n            \"Please run `prisma generate` without `--no-engine` to be able to use Prisma Client with the adapter.\"\n        ], new Z(c.join(`\n`), {\n            clientVersion: r.clientVersion\n        });\n    }\n    return o ? new qt(r) : a ? new Gr(r) : new Gr(r);\n}\nfunction Jn({ generator: e }) {\n    return e?.previewFeatures ?? [];\n}\nvar ql = (e)=>({\n        command: e\n    });\nvar jl = (e)=>e.strings.reduce((r, t, n)=>`${r}@P${n}${t}`);\nfunction Qr(e) {\n    try {\n        return Vl(e, \"fast\");\n    } catch  {\n        return Vl(e, \"slow\");\n    }\n}\nfunction Vl(e, r) {\n    return JSON.stringify(e.map((t)=>Ul(t, r)));\n}\nfunction Ul(e, r) {\n    if (Array.isArray(e)) return e.map((t)=>Ul(t, r));\n    if (typeof e == \"bigint\") return {\n        prisma__type: \"bigint\",\n        prisma__value: e.toString()\n    };\n    if (Sr(e)) return {\n        prisma__type: \"date\",\n        prisma__value: e.toJSON()\n    };\n    if (Pe.isDecimal(e)) return {\n        prisma__type: \"decimal\",\n        prisma__value: e.toJSON()\n    };\n    if (Buffer.isBuffer(e)) return {\n        prisma__type: \"bytes\",\n        prisma__value: e.toString(\"base64\")\n    };\n    if (Pf(e)) return {\n        prisma__type: \"bytes\",\n        prisma__value: Buffer.from(e).toString(\"base64\")\n    };\n    if (ArrayBuffer.isView(e)) {\n        let { buffer: t, byteOffset: n, byteLength: i } = e;\n        return {\n            prisma__type: \"bytes\",\n            prisma__value: Buffer.from(t, n, i).toString(\"base64\")\n        };\n    }\n    return typeof e == \"object\" && r === \"slow\" ? Gl(e) : e;\n}\nfunction Pf(e) {\n    return e instanceof ArrayBuffer || e instanceof SharedArrayBuffer ? !0 : typeof e == \"object\" && e !== null ? e[Symbol.toStringTag] === \"ArrayBuffer\" || e[Symbol.toStringTag] === \"SharedArrayBuffer\" : !1;\n}\nfunction Gl(e) {\n    if (typeof e != \"object\" || e === null) return e;\n    if (typeof e.toJSON == \"function\") return e.toJSON();\n    if (Array.isArray(e)) return e.map(Bl);\n    let r = {};\n    for (let t of Object.keys(e))r[t] = Bl(e[t]);\n    return r;\n}\nfunction Bl(e) {\n    return typeof e == \"bigint\" ? e.toString() : Gl(e);\n}\nvar vf = /^(\\s*alter\\s)/i, Ql = N(\"prisma:client\");\nfunction Ro(e, r, t, n) {\n    if (!(e !== \"postgresql\" && e !== \"cockroachdb\") && t.length > 0 && vf.exec(r)) throw new Error(`Running ALTER using ${n} is not supported\nUsing the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.\n\nExample:\n  await prisma.$executeRawUnsafe(\\`ALTER USER prisma WITH PASSWORD '\\${password}'\\`)\n\nMore Information: https://pris.ly/d/execute-raw\n`);\n}\nvar Co = ({ clientMethod: e, activeProvider: r })=>(t)=>{\n        let n = \"\", i;\n        if (Fn(t)) n = t.sql, i = {\n            values: Qr(t.values),\n            __prismaRawParameters__: !0\n        };\n        else if (Array.isArray(t)) {\n            let [o, ...s] = t;\n            n = o, i = {\n                values: Qr(s || []),\n                __prismaRawParameters__: !0\n            };\n        } else switch(r){\n            case \"sqlite\":\n            case \"mysql\":\n                {\n                    n = t.sql, i = {\n                        values: Qr(t.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"cockroachdb\":\n            case \"postgresql\":\n            case \"postgres\":\n                {\n                    n = t.text, i = {\n                        values: Qr(t.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"sqlserver\":\n                {\n                    n = jl(t), i = {\n                        values: Qr(t.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            default:\n                throw new Error(`The ${r} provider does not support ${e}`);\n        }\n        return i?.values ? Ql(`prisma.${e}(${n}, ${i.values})`) : Ql(`prisma.${e}(${n})`), {\n            query: n,\n            parameters: i\n        };\n    }, Wl = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e.strings,\n            ...e.values\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        let [r, ...t] = e;\n        return new oe(r, t);\n    }\n}, Jl = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        return e[0];\n    }\n};\nfunction Ao(e) {\n    return function(t, n) {\n        let i, o = (s = e)=>{\n            try {\n                return s === void 0 || s?.kind === \"itx\" ? i ??= Hl(t(s)) : Hl(t(s));\n            } catch (a) {\n                return Promise.reject(a);\n            }\n        };\n        return {\n            get spec () {\n                return n;\n            },\n            then (s, a) {\n                return o().then(s, a);\n            },\n            catch (s) {\n                return o().catch(s);\n            },\n            finally (s) {\n                return o().finally(s);\n            },\n            requestTransaction (s) {\n                let a = o(s);\n                return a.requestTransaction ? a.requestTransaction(s) : a;\n            },\n            [Symbol.toStringTag]: \"PrismaPromise\"\n        };\n    };\n}\nfunction Hl(e) {\n    return typeof e.then == \"function\" ? e : Promise.resolve(e);\n}\nvar Tf = Ei.split(\".\")[0], Sf = {\n    isEnabled () {\n        return !1;\n    },\n    getTraceParent () {\n        return \"00-10-10-00\";\n    },\n    dispatchEngineSpans () {},\n    getActiveContext () {},\n    runInChildSpan (e, r) {\n        return r();\n    }\n}, Io = class {\n    isEnabled() {\n        return this.getGlobalTracingHelper().isEnabled();\n    }\n    getTraceParent(r) {\n        return this.getGlobalTracingHelper().getTraceParent(r);\n    }\n    dispatchEngineSpans(r) {\n        return this.getGlobalTracingHelper().dispatchEngineSpans(r);\n    }\n    getActiveContext() {\n        return this.getGlobalTracingHelper().getActiveContext();\n    }\n    runInChildSpan(r, t) {\n        return this.getGlobalTracingHelper().runInChildSpan(r, t);\n    }\n    getGlobalTracingHelper() {\n        let r = globalThis[`V${Tf}_PRISMA_INSTRUMENTATION`], t = globalThis.PRISMA_INSTRUMENTATION;\n        return r?.helper ?? t?.helper ?? Sf;\n    }\n};\nfunction Kl() {\n    return new Io;\n}\nfunction Yl(e, r = ()=>{}) {\n    let t, n = new Promise((i)=>t = i);\n    return {\n        then (i) {\n            return --e === 0 && t(r()), i?.(n);\n        }\n    };\n}\nfunction zl(e) {\n    return typeof e == \"string\" ? e : e.reduce((r, t)=>{\n        let n = typeof t == \"string\" ? t : t.level;\n        return n === \"query\" ? r : r && (t === \"info\" || r === \"info\") ? \"info\" : n;\n    }, void 0);\n}\nvar Hn = class {\n    use(r) {\n        this._middlewares.push(r);\n    }\n    get(r) {\n        return this._middlewares[r];\n    }\n    has(r) {\n        return !!this._middlewares[r];\n    }\n    length() {\n        return this._middlewares.length;\n    }\n    constructor(){\n        this._middlewares = [];\n    }\n};\nvar Xl = k(Oi());\nfunction Kn(e) {\n    return typeof e.batchRequestIdx == \"number\";\n}\nfunction Zl(e) {\n    if (e.action !== \"findUnique\" && e.action !== \"findUniqueOrThrow\") return;\n    let r = [];\n    return e.modelName && r.push(e.modelName), e.query.arguments && r.push(ko(e.query.arguments)), r.push(ko(e.query.selection)), r.join(\"\");\n}\nfunction ko(e) {\n    return `(${Object.keys(e).sort().map((t)=>{\n        let n = e[t];\n        return typeof n == \"object\" && n !== null ? `(${t} ${ko(n)})` : t;\n    }).join(\" \")})`;\n}\nvar Rf = {\n    aggregate: !1,\n    aggregateRaw: !1,\n    createMany: !0,\n    createManyAndReturn: !0,\n    createOne: !0,\n    deleteMany: !0,\n    deleteOne: !0,\n    executeRaw: !0,\n    findFirst: !1,\n    findFirstOrThrow: !1,\n    findMany: !1,\n    findRaw: !1,\n    findUnique: !1,\n    findUniqueOrThrow: !1,\n    groupBy: !1,\n    queryRaw: !1,\n    runCommandRaw: !0,\n    updateMany: !0,\n    updateManyAndReturn: !0,\n    updateOne: !0,\n    upsertOne: !0\n};\nfunction Oo(e) {\n    return Rf[e];\n}\nvar Yn = class {\n    constructor(r){\n        this.tickActive = !1;\n        this.options = r;\n        this.batches = {};\n    }\n    request(r) {\n        let t = this.options.batchBy(r);\n        return t ? (this.batches[t] || (this.batches[t] = [], this.tickActive || (this.tickActive = !0, process.nextTick(()=>{\n            this.dispatchBatches(), this.tickActive = !1;\n        }))), new Promise((n, i)=>{\n            this.batches[t].push({\n                request: r,\n                resolve: n,\n                reject: i\n            });\n        })) : this.options.singleLoader(r);\n    }\n    dispatchBatches() {\n        for(let r in this.batches){\n            let t = this.batches[r];\n            delete this.batches[r], t.length === 1 ? this.options.singleLoader(t[0].request).then((n)=>{\n                n instanceof Error ? t[0].reject(n) : t[0].resolve(n);\n            }).catch((n)=>{\n                t[0].reject(n);\n            }) : (t.sort((n, i)=>this.options.batchOrder(n.request, i.request)), this.options.batchLoader(t.map((n)=>n.request)).then((n)=>{\n                if (n instanceof Error) for(let i = 0; i < t.length; i++)t[i].reject(n);\n                else for(let i = 0; i < t.length; i++){\n                    let o = n[i];\n                    o instanceof Error ? t[i].reject(o) : t[i].resolve(o);\n                }\n            }).catch((n)=>{\n                for(let i = 0; i < t.length; i++)t[i].reject(n);\n            }));\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"DataLoader\";\n    }\n};\nfunction mr(e, r) {\n    if (r === null) return r;\n    switch(e){\n        case \"bigint\":\n            return BigInt(r);\n        case \"bytes\":\n            {\n                let { buffer: t, byteOffset: n, byteLength: i } = Buffer.from(r, \"base64\");\n                return new Uint8Array(t, n, i);\n            }\n        case \"decimal\":\n            return new Pe(r);\n        case \"datetime\":\n        case \"date\":\n            return new Date(r);\n        case \"time\":\n            return new Date(`1970-01-01T${r}Z`);\n        case \"bigint-array\":\n            return r.map((t)=>mr(\"bigint\", t));\n        case \"bytes-array\":\n            return r.map((t)=>mr(\"bytes\", t));\n        case \"decimal-array\":\n            return r.map((t)=>mr(\"decimal\", t));\n        case \"datetime-array\":\n            return r.map((t)=>mr(\"datetime\", t));\n        case \"date-array\":\n            return r.map((t)=>mr(\"date\", t));\n        case \"time-array\":\n            return r.map((t)=>mr(\"time\", t));\n        default:\n            return r;\n    }\n}\nfunction zn(e) {\n    let r = [], t = Cf(e);\n    for(let n = 0; n < e.rows.length; n++){\n        let i = e.rows[n], o = {\n            ...t\n        };\n        for(let s = 0; s < i.length; s++)o[e.columns[s]] = mr(e.types[s], i[s]);\n        r.push(o);\n    }\n    return r;\n}\nfunction Cf(e) {\n    let r = {};\n    for(let t = 0; t < e.columns.length; t++)r[e.columns[t]] = null;\n    return r;\n}\nvar Af = N(\"prisma:client:request_handler\"), Zn = class {\n    constructor(r, t){\n        this.logEmitter = t, this.client = r, this.dataloader = new Yn({\n            batchLoader: ol(async ({ requests: n, customDataProxyFetch: i })=>{\n                let { transaction: o, otelParentCtx: s } = n[0], a = n.map((p)=>p.protocolQuery), l = this.client._tracingHelper.getTraceParent(s), u = n.some((p)=>Oo(p.protocolQuery.action));\n                return (await this.client._engine.requestBatch(a, {\n                    traceparent: l,\n                    transaction: If(o),\n                    containsWrite: u,\n                    customDataProxyFetch: i\n                })).map((p, d)=>{\n                    if (p instanceof Error) return p;\n                    try {\n                        return this.mapQueryEngineResult(n[d], p);\n                    } catch (f) {\n                        return f;\n                    }\n                });\n            }),\n            singleLoader: async (n)=>{\n                let i = n.transaction?.kind === \"itx\" ? eu(n.transaction) : void 0, o = await this.client._engine.request(n.protocolQuery, {\n                    traceparent: this.client._tracingHelper.getTraceParent(),\n                    interactiveTransaction: i,\n                    isWrite: Oo(n.protocolQuery.action),\n                    customDataProxyFetch: n.customDataProxyFetch\n                });\n                return this.mapQueryEngineResult(n, o);\n            },\n            batchBy: (n)=>n.transaction?.id ? `transaction-${n.transaction.id}` : Zl(n.protocolQuery),\n            batchOrder (n, i) {\n                return n.transaction?.kind === \"batch\" && i.transaction?.kind === \"batch\" ? n.transaction.index - i.transaction.index : 0;\n            }\n        });\n    }\n    async request(r) {\n        try {\n            return await this.dataloader.request(r);\n        } catch (t) {\n            let { clientMethod: n, callsite: i, transaction: o, args: s, modelName: a } = r;\n            this.handleAndLogRequestError({\n                error: t,\n                clientMethod: n,\n                callsite: i,\n                transaction: o,\n                args: s,\n                modelName: a,\n                globalOmit: r.globalOmit\n            });\n        }\n    }\n    mapQueryEngineResult({ dataPath: r, unpacker: t }, n) {\n        let i = n?.data, o = this.unpack(i, r, t);\n        return process.env.PRISMA_CLIENT_GET_TIME ? {\n            data: o\n        } : o;\n    }\n    handleAndLogRequestError(r) {\n        try {\n            this.handleRequestError(r);\n        } catch (t) {\n            throw this.logEmitter && this.logEmitter.emit(\"error\", {\n                message: t.message,\n                target: r.clientMethod,\n                timestamp: new Date\n            }), t;\n        }\n    }\n    handleRequestError({ error: r, clientMethod: t, callsite: n, transaction: i, args: o, modelName: s, globalOmit: a }) {\n        if (Af(r), kf(r, i)) throw r;\n        if (r instanceof z && Of(r)) {\n            let u = ru(r.meta);\n            kn({\n                args: o,\n                errors: [\n                    u\n                ],\n                callsite: n,\n                errorFormat: this.client._errorFormat,\n                originalMethod: t,\n                clientVersion: this.client._clientVersion,\n                globalOmit: a\n            });\n        }\n        let l = r.message;\n        if (n && (l = wn({\n            callsite: n,\n            originalMethod: t,\n            isPanic: r.isPanic,\n            showColors: this.client._errorFormat === \"pretty\",\n            message: l\n        })), l = this.sanitizeMessage(l), r.code) {\n            let u = s ? {\n                modelName: s,\n                ...r.meta\n            } : r.meta;\n            throw new z(l, {\n                code: r.code,\n                clientVersion: this.client._clientVersion,\n                meta: u,\n                batchRequestIdx: r.batchRequestIdx\n            });\n        } else {\n            if (r.isPanic) throw new le(l, this.client._clientVersion);\n            if (r instanceof j) throw new j(l, {\n                clientVersion: this.client._clientVersion,\n                batchRequestIdx: r.batchRequestIdx\n            });\n            if (r instanceof T) throw new T(l, this.client._clientVersion);\n            if (r instanceof le) throw new le(l, this.client._clientVersion);\n        }\n        throw r.clientVersion = this.client._clientVersion, r;\n    }\n    sanitizeMessage(r) {\n        return this.client._errorFormat && this.client._errorFormat !== \"pretty\" ? (0, Xl.default)(r) : r;\n    }\n    unpack(r, t, n) {\n        if (!r || (r.data && (r = r.data), !r)) return r;\n        let i = Object.keys(r)[0], o = Object.values(r)[0], s = t.filter((u)=>u !== \"select\" && u !== \"include\"), a = io(o, s), l = i === \"queryRaw\" ? zn(a) : Tr(a);\n        return n ? n(l) : l;\n    }\n    get [Symbol.toStringTag]() {\n        return \"RequestHandler\";\n    }\n};\nfunction If(e) {\n    if (e) {\n        if (e.kind === \"batch\") return {\n            kind: \"batch\",\n            options: {\n                isolationLevel: e.isolationLevel\n            }\n        };\n        if (e.kind === \"itx\") return {\n            kind: \"itx\",\n            options: eu(e)\n        };\n        _e(e, \"Unknown transaction kind\");\n    }\n}\nfunction eu(e) {\n    return {\n        id: e.id,\n        payload: e.payload\n    };\n}\nfunction kf(e, r) {\n    return Kn(e) && r?.kind === \"batch\" && e.batchRequestIdx !== r.index;\n}\nfunction Of(e) {\n    return e.code === \"P2009\" || e.code === \"P2012\";\n}\nfunction ru(e) {\n    if (e.kind === \"Union\") return {\n        kind: \"Union\",\n        errors: e.errors.map(ru)\n    };\n    if (Array.isArray(e.selectionPath)) {\n        let [, ...r] = e.selectionPath;\n        return {\n            ...e,\n            selectionPath: r\n        };\n    }\n    return e;\n}\nvar tu = Sl;\nvar au = k(Qi());\nvar D = class extends Error {\n    constructor(r){\n        super(r + `\nRead more at https://pris.ly/d/client-constructor`), this.name = \"PrismaClientConstructorValidationError\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientConstructorValidationError\";\n    }\n};\nx(D, \"PrismaClientConstructorValidationError\");\nvar nu = [\n    \"datasources\",\n    \"datasourceUrl\",\n    \"errorFormat\",\n    \"adapter\",\n    \"log\",\n    \"transactionOptions\",\n    \"omit\",\n    \"__internal\"\n], iu = [\n    \"pretty\",\n    \"colorless\",\n    \"minimal\"\n], ou = [\n    \"info\",\n    \"query\",\n    \"warn\",\n    \"error\"\n], Df = {\n    datasources: (e, { datasourceNames: r })=>{\n        if (e) {\n            if (typeof e != \"object\" || Array.isArray(e)) throw new D(`Invalid value ${JSON.stringify(e)} for \"datasources\" provided to PrismaClient constructor`);\n            for (let [t, n] of Object.entries(e)){\n                if (!r.includes(t)) {\n                    let i = Wr(t, r) || ` Available datasources: ${r.join(\", \")}`;\n                    throw new D(`Unknown datasource ${t} provided to PrismaClient constructor.${i}`);\n                }\n                if (typeof n != \"object\" || Array.isArray(n)) throw new D(`Invalid value ${JSON.stringify(e)} for datasource \"${t}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                if (n && typeof n == \"object\") for (let [i, o] of Object.entries(n)){\n                    if (i !== \"url\") throw new D(`Invalid value ${JSON.stringify(e)} for datasource \"${t}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                    if (typeof o != \"string\") throw new D(`Invalid value ${JSON.stringify(o)} for datasource \"${t}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                }\n            }\n        }\n    },\n    adapter: (e, r)=>{\n        if (!e && Er(r.generator) === \"client\") throw new D('Using engine type \"client\" requires a driver adapter to be provided to PrismaClient constructor.');\n        if (e === null) return;\n        if (e === void 0) throw new D('\"adapter\" property must not be undefined, use null to conditionally disable driver adapters.');\n        if (!Jn(r).includes(\"driverAdapters\")) throw new D('\"adapter\" property can only be provided to PrismaClient constructor when \"driverAdapters\" preview feature is enabled.');\n        if (Er(r.generator) === \"binary\") throw new D('Cannot use a driver adapter with the \"binary\" Query Engine. Please use the \"library\" Query Engine.');\n    },\n    datasourceUrl: (e)=>{\n        if (typeof e < \"u\" && typeof e != \"string\") throw new D(`Invalid value ${JSON.stringify(e)} for \"datasourceUrl\" provided to PrismaClient constructor.\nExpected string or undefined.`);\n    },\n    errorFormat: (e)=>{\n        if (e) {\n            if (typeof e != \"string\") throw new D(`Invalid value ${JSON.stringify(e)} for \"errorFormat\" provided to PrismaClient constructor.`);\n            if (!iu.includes(e)) {\n                let r = Wr(e, iu);\n                throw new D(`Invalid errorFormat ${e} provided to PrismaClient constructor.${r}`);\n            }\n        }\n    },\n    log: (e)=>{\n        if (!e) return;\n        if (!Array.isArray(e)) throw new D(`Invalid value ${JSON.stringify(e)} for \"log\" provided to PrismaClient constructor.`);\n        function r(t) {\n            if (typeof t == \"string\" && !ou.includes(t)) {\n                let n = Wr(t, ou);\n                throw new D(`Invalid log level \"${t}\" provided to PrismaClient constructor.${n}`);\n            }\n        }\n        for (let t of e){\n            r(t);\n            let n = {\n                level: r,\n                emit: (i)=>{\n                    let o = [\n                        \"stdout\",\n                        \"event\"\n                    ];\n                    if (!o.includes(i)) {\n                        let s = Wr(i, o);\n                        throw new D(`Invalid value ${JSON.stringify(i)} for \"emit\" in logLevel provided to PrismaClient constructor.${s}`);\n                    }\n                }\n            };\n            if (t && typeof t == \"object\") for (let [i, o] of Object.entries(t))if (n[i]) n[i](o);\n            else throw new D(`Invalid property ${i} for \"log\" provided to PrismaClient constructor`);\n        }\n    },\n    transactionOptions: (e)=>{\n        if (!e) return;\n        let r = e.maxWait;\n        if (r != null && r <= 0) throw new D(`Invalid value ${r} for maxWait in \"transactionOptions\" provided to PrismaClient constructor. maxWait needs to be greater than 0`);\n        let t = e.timeout;\n        if (t != null && t <= 0) throw new D(`Invalid value ${t} for timeout in \"transactionOptions\" provided to PrismaClient constructor. timeout needs to be greater than 0`);\n    },\n    omit: (e, r)=>{\n        if (typeof e != \"object\") throw new D('\"omit\" option is expected to be an object.');\n        if (e === null) throw new D('\"omit\" option can not be `null`');\n        let t = [];\n        for (let [n, i] of Object.entries(e)){\n            let o = Nf(n, r.runtimeDataModel);\n            if (!o) {\n                t.push({\n                    kind: \"UnknownModel\",\n                    modelKey: n\n                });\n                continue;\n            }\n            for (let [s, a] of Object.entries(i)){\n                let l = o.fields.find((u)=>u.name === s);\n                if (!l) {\n                    t.push({\n                        kind: \"UnknownField\",\n                        modelKey: n,\n                        fieldName: s\n                    });\n                    continue;\n                }\n                if (l.relationName) {\n                    t.push({\n                        kind: \"RelationInOmit\",\n                        modelKey: n,\n                        fieldName: s\n                    });\n                    continue;\n                }\n                typeof a != \"boolean\" && t.push({\n                    kind: \"InvalidFieldValue\",\n                    modelKey: n,\n                    fieldName: s\n                });\n            }\n        }\n        if (t.length > 0) throw new D(Lf(e, t));\n    },\n    __internal: (e)=>{\n        if (!e) return;\n        let r = [\n            \"debug\",\n            \"engine\",\n            \"configOverride\"\n        ];\n        if (typeof e != \"object\") throw new D(`Invalid value ${JSON.stringify(e)} for \"__internal\" to PrismaClient constructor`);\n        for (let [t] of Object.entries(e))if (!r.includes(t)) {\n            let n = Wr(t, r);\n            throw new D(`Invalid property ${JSON.stringify(t)} for \"__internal\" provided to PrismaClient constructor.${n}`);\n        }\n    }\n};\nfunction lu(e, r) {\n    for (let [t, n] of Object.entries(e)){\n        if (!nu.includes(t)) {\n            let i = Wr(t, nu);\n            throw new D(`Unknown property ${t} provided to PrismaClient constructor.${i}`);\n        }\n        Df[t](n, r);\n    }\n    if (e.datasourceUrl && e.datasources) throw new D('Can not use \"datasourceUrl\" and \"datasources\" options at the same time. Pick one of them');\n}\nfunction Wr(e, r) {\n    if (r.length === 0 || typeof e != \"string\") return \"\";\n    let t = _f(e, r);\n    return t ? ` Did you mean \"${t}\"?` : \"\";\n}\nfunction _f(e, r) {\n    if (r.length === 0) return null;\n    let t = r.map((i)=>({\n            value: i,\n            distance: (0, au.default)(e, i)\n        }));\n    t.sort((i, o)=>i.distance < o.distance ? -1 : 1);\n    let n = t[0];\n    return n.distance < 3 ? n.value : null;\n}\nfunction Nf(e, r) {\n    return su(r.models, e) ?? su(r.types, e);\n}\nfunction su(e, r) {\n    let t = Object.keys(e).find((n)=>Ye(n) === r);\n    if (t) return e[t];\n}\nfunction Lf(e, r) {\n    let t = _r(e);\n    for (let o of r)switch(o.kind){\n        case \"UnknownModel\":\n            t.arguments.getField(o.modelKey)?.markAsError(), t.addErrorMessage(()=>`Unknown model name: ${o.modelKey}.`);\n            break;\n        case \"UnknownField\":\n            t.arguments.getDeepField([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), t.addErrorMessage(()=>`Model \"${o.modelKey}\" does not have a field named \"${o.fieldName}\".`);\n            break;\n        case \"RelationInOmit\":\n            t.arguments.getDeepField([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), t.addErrorMessage(()=>'Relations are already excluded by default and can not be specified in \"omit\".');\n            break;\n        case \"InvalidFieldValue\":\n            t.arguments.getDeepFieldValue([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), t.addErrorMessage(()=>\"Omit field option value must be a boolean.\");\n            break;\n    }\n    let { message: n, args: i } = In(t, \"colorless\");\n    return `Error validating \"omit\" option:\n\n${i}\n\n${n}`;\n}\nfunction uu(e) {\n    return e.length === 0 ? Promise.resolve([]) : new Promise((r, t)=>{\n        let n = new Array(e.length), i = null, o = !1, s = 0, a = ()=>{\n            o || (s++, s === e.length && (o = !0, i ? t(i) : r(n)));\n        }, l = (u)=>{\n            o || (o = !0, t(u));\n        };\n        for(let u = 0; u < e.length; u++)e[u].then((c)=>{\n            n[u] = c, a();\n        }, (c)=>{\n            if (!Kn(c)) {\n                l(c);\n                return;\n            }\n            c.batchRequestIdx === u ? l(c) : (i || (i = c), a());\n        });\n    });\n}\nvar rr = N(\"prisma:client\");\ntypeof globalThis == \"object\" && (globalThis.NODE_CLIENT = !0);\nvar Ff = {\n    requestArgsToMiddlewareArgs: (e)=>e,\n    middlewareArgsToRequestArgs: (e)=>e\n}, Mf = Symbol.for(\"prisma.client.transaction.id\"), $f = {\n    id: 0,\n    nextId () {\n        return ++this.id;\n    }\n};\nfunction gu(e) {\n    class r {\n        constructor(n){\n            this._originalClient = this;\n            this._middlewares = new Hn;\n            this._createPrismaPromise = Ao();\n            this.$metrics = new Lr(this);\n            this.$extends = Ya;\n            e = n?.__internal?.configOverride?.(e) ?? e, cl(e), n && lu(n, e);\n            let i = new mu.EventEmitter().on(\"error\", ()=>{});\n            this._extensions = Nr.empty(), this._previewFeatures = Jn(e), this._clientVersion = e.clientVersion ?? tu, this._activeProvider = e.activeProvider, this._globalOmit = n?.omit, this._tracingHelper = Kl();\n            let o = e.relativeEnvPaths && {\n                rootEnvPath: e.relativeEnvPaths.rootEnvPath && Xn.default.resolve(e.dirname, e.relativeEnvPaths.rootEnvPath),\n                schemaEnvPath: e.relativeEnvPaths.schemaEnvPath && Xn.default.resolve(e.dirname, e.relativeEnvPaths.schemaEnvPath)\n            }, s;\n            if (n?.adapter) {\n                s = n.adapter;\n                let l = e.activeProvider === \"postgresql\" ? \"postgres\" : e.activeProvider;\n                if (s.provider !== l) throw new T(`The Driver Adapter \\`${s.adapterName}\\`, based on \\`${s.provider}\\`, is not compatible with the provider \\`${l}\\` specified in the Prisma schema.`, this._clientVersion);\n                if (n.datasources || n.datasourceUrl !== void 0) throw new T(\"Custom datasource configuration is not compatible with Prisma Driver Adapters. Please define the database connection string directly in the Driver Adapter configuration.\", this._clientVersion);\n            }\n            let a = !s && o && ot(o, {\n                conflictCheck: \"none\"\n            }) || e.injectableEdgeEnv?.();\n            try {\n                let l = n ?? {}, u = l.__internal ?? {}, c = u.debug === !0;\n                c && N.enable(\"prisma:client\");\n                let p = Xn.default.resolve(e.dirname, e.relativePath);\n                fu.default.existsSync(p) || (p = e.dirname), rr(\"dirname\", e.dirname), rr(\"relativePath\", e.relativePath), rr(\"cwd\", p);\n                let d = u.engine || {};\n                if (l.errorFormat ? this._errorFormat = l.errorFormat :  false ? 0 : process.env.NO_COLOR ? this._errorFormat = \"colorless\" : this._errorFormat = \"colorless\", this._runtimeDataModel = e.runtimeDataModel, this._engineConfig = {\n                    cwd: p,\n                    dirname: e.dirname,\n                    enableDebugLogs: c,\n                    allowTriggerPanic: d.allowTriggerPanic,\n                    prismaPath: d.binaryPath ?? void 0,\n                    engineEndpoint: d.endpoint,\n                    generator: e.generator,\n                    showColors: this._errorFormat === \"pretty\",\n                    logLevel: l.log && zl(l.log),\n                    logQueries: l.log && !!(typeof l.log == \"string\" ? l.log === \"query\" : l.log.find((f)=>typeof f == \"string\" ? f === \"query\" : f.level === \"query\")),\n                    env: a?.parsed ?? {},\n                    flags: [],\n                    engineWasm: e.engineWasm,\n                    compilerWasm: e.compilerWasm,\n                    clientVersion: e.clientVersion,\n                    engineVersion: e.engineVersion,\n                    previewFeatures: this._previewFeatures,\n                    activeProvider: e.activeProvider,\n                    inlineSchema: e.inlineSchema,\n                    overrideDatasources: pl(l, e.datasourceNames),\n                    inlineDatasources: e.inlineDatasources,\n                    inlineSchemaHash: e.inlineSchemaHash,\n                    tracingHelper: this._tracingHelper,\n                    transactionOptions: {\n                        maxWait: l.transactionOptions?.maxWait ?? 2e3,\n                        timeout: l.transactionOptions?.timeout ?? 5e3,\n                        isolationLevel: l.transactionOptions?.isolationLevel\n                    },\n                    logEmitter: i,\n                    isBundled: e.isBundled,\n                    adapter: s\n                }, this._accelerateEngineConfig = {\n                    ...this._engineConfig,\n                    accelerateUtils: {\n                        resolveDatasourceUrl: jr,\n                        getBatchRequestPayload: Mr,\n                        prismaGraphQLToJSError: $r,\n                        PrismaClientUnknownRequestError: j,\n                        PrismaClientInitializationError: T,\n                        PrismaClientKnownRequestError: z,\n                        debug: N(\"prisma:client:accelerateEngine\"),\n                        engineVersion: pu.version,\n                        clientVersion: e.clientVersion\n                    }\n                }, rr(\"clientVersion\", e.clientVersion), this._engine = $l(e, this._engineConfig), this._requestHandler = new Zn(this, i), l.log) for (let f of l.log){\n                    let g = typeof f == \"string\" ? f : f.emit === \"stdout\" ? f.level : null;\n                    g && this.$on(g, (h)=>{\n                        tt.log(`${tt.tags[g] ?? \"\"}`, h.message || h.query);\n                    });\n                }\n            } catch (l) {\n                throw l.clientVersion = this._clientVersion, l;\n            }\n            return this._appliedParent = vt(this);\n        }\n        get [Symbol.toStringTag]() {\n            return \"PrismaClient\";\n        }\n        $use(n) {\n            this._middlewares.use(n);\n        }\n        $on(n, i) {\n            return n === \"beforeExit\" ? this._engine.onBeforeExit(i) : n && this._engineConfig.logEmitter.on(n, i), this;\n        }\n        $connect() {\n            try {\n                return this._engine.start();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            }\n        }\n        async $disconnect() {\n            try {\n                await this._engine.stop();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            } finally{\n                Qo();\n            }\n        }\n        $executeRawInternal(n, i, o, s) {\n            let a = this._activeProvider;\n            return this._request({\n                action: \"executeRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: Co({\n                    clientMethod: i,\n                    activeProvider: a\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            });\n        }\n        $executeRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) {\n                    let [s, a] = cu(n, i);\n                    return Ro(this._activeProvider, s.text, s.values, Array.isArray(n) ? \"prisma.$executeRaw`<SQL>`\" : \"prisma.$executeRaw(sql`<SQL>`)\"), this.$executeRawInternal(o, \"$executeRaw\", s, a);\n                }\n                throw new Z(\"`$executeRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $executeRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>(Ro(this._activeProvider, n, i, \"prisma.$executeRawUnsafe(<SQL>, [...values])\"), this.$executeRawInternal(o, \"$executeRawUnsafe\", [\n                    n,\n                    ...i\n                ])));\n        }\n        $runCommandRaw(n) {\n            if (e.activeProvider !== \"mongodb\") throw new Z(`The ${e.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, {\n                clientVersion: this._clientVersion\n            });\n            return this._createPrismaPromise((i)=>this._request({\n                    args: n,\n                    clientMethod: \"$runCommandRaw\",\n                    dataPath: [],\n                    action: \"runCommandRaw\",\n                    argsMapper: ql,\n                    callsite: Ze(this._errorFormat),\n                    transaction: i\n                }));\n        }\n        async $queryRawInternal(n, i, o, s) {\n            let a = this._activeProvider;\n            return this._request({\n                action: \"queryRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: Co({\n                    clientMethod: i,\n                    activeProvider: a\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            });\n        }\n        $queryRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) return this.$queryRawInternal(o, \"$queryRaw\", ...cu(n, i));\n                throw new Z(\"`$queryRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $queryRawTyped(n) {\n            return this._createPrismaPromise((i)=>{\n                if (!this._hasPreviewFlag(\"typedSql\")) throw new Z(\"`typedSql` preview feature must be enabled in order to access $queryRawTyped API\", {\n                    clientVersion: this._clientVersion\n                });\n                return this.$queryRawInternal(i, \"$queryRawTyped\", n);\n            });\n        }\n        $queryRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>this.$queryRawInternal(o, \"$queryRawUnsafe\", [\n                    n,\n                    ...i\n                ]));\n        }\n        _transactionWithArray({ promises: n, options: i }) {\n            let o = $f.nextId(), s = Yl(n.length), a = n.map((l, u)=>{\n                if (l?.[Symbol.toStringTag] !== \"PrismaPromise\") throw new Error(\"All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.\");\n                let c = i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel, p = {\n                    kind: \"batch\",\n                    id: o,\n                    index: u,\n                    isolationLevel: c,\n                    lock: s\n                };\n                return l.requestTransaction?.(p) ?? l;\n            });\n            return uu(a);\n        }\n        async _transactionWithCallback({ callback: n, options: i }) {\n            let o = {\n                traceparent: this._tracingHelper.getTraceParent()\n            }, s = {\n                maxWait: i?.maxWait ?? this._engineConfig.transactionOptions.maxWait,\n                timeout: i?.timeout ?? this._engineConfig.transactionOptions.timeout,\n                isolationLevel: i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel\n            }, a = await this._engine.transaction(\"start\", o, s), l;\n            try {\n                let u = {\n                    kind: \"itx\",\n                    ...a\n                };\n                l = await n(this._createItxClient(u)), await this._engine.transaction(\"commit\", o, a);\n            } catch (u) {\n                throw await this._engine.transaction(\"rollback\", o, a).catch(()=>{}), u;\n            }\n            return l;\n        }\n        _createItxClient(n) {\n            return he(vt(he(Ka(this), [\n                re(\"_appliedParent\", ()=>this._appliedParent._createItxClient(n)),\n                re(\"_createPrismaPromise\", ()=>Ao(n)),\n                re(Mf, ()=>n.id)\n            ])), [\n                Fr(el)\n            ]);\n        }\n        $transaction(n, i) {\n            let o;\n            typeof n == \"function\" ? this._engineConfig.adapter?.adapterName === \"@prisma/adapter-d1\" ? o = ()=>{\n                throw new Error(\"Cloudflare D1 does not support interactive transactions. We recommend you to refactor your queries with that limitation in mind, and use batch transactions with `prisma.$transactions([])` where applicable.\");\n            } : o = ()=>this._transactionWithCallback({\n                    callback: n,\n                    options: i\n                }) : o = ()=>this._transactionWithArray({\n                    promises: n,\n                    options: i\n                });\n            let s = {\n                name: \"transaction\",\n                attributes: {\n                    method: \"$transaction\"\n                }\n            };\n            return this._tracingHelper.runInChildSpan(s, o);\n        }\n        _request(n) {\n            n.otelParentCtx = this._tracingHelper.getActiveContext();\n            let i = n.middlewareArgsMapper ?? Ff, o = {\n                args: i.requestArgsToMiddlewareArgs(n.args),\n                dataPath: n.dataPath,\n                runInTransaction: !!n.transaction,\n                action: n.action,\n                model: n.model\n            }, s = {\n                middleware: {\n                    name: \"middleware\",\n                    middleware: !0,\n                    attributes: {\n                        method: \"$use\"\n                    },\n                    active: !1\n                },\n                operation: {\n                    name: \"operation\",\n                    attributes: {\n                        method: o.action,\n                        model: o.model,\n                        name: o.model ? `${o.model}.${o.action}` : o.action\n                    }\n                }\n            }, a = -1, l = async (u)=>{\n                let c = this._middlewares.get(++a);\n                if (c) return this._tracingHelper.runInChildSpan(s.middleware, (I)=>c(u, (v)=>(I?.end(), l(v))));\n                let { runInTransaction: p, args: d, ...f } = u, g = {\n                    ...n,\n                    ...f\n                };\n                d && (g.args = i.middlewareArgsToRequestArgs(d)), n.transaction !== void 0 && p === !1 && delete g.transaction;\n                let h = await il(this, g);\n                return g.model ? Xa({\n                    result: h,\n                    modelName: g.model,\n                    args: g.args,\n                    extensions: this._extensions,\n                    runtimeDataModel: this._runtimeDataModel,\n                    globalOmit: this._globalOmit\n                }) : h;\n            };\n            return this._tracingHelper.runInChildSpan(s.operation, ()=>new du.AsyncResource(\"prisma-client-request\").runInAsyncScope(()=>l(o)));\n        }\n        async _executeRequest({ args: n, clientMethod: i, dataPath: o, callsite: s, action: a, model: l, argsMapper: u, transaction: c, unpacker: p, otelParentCtx: d, customDataProxyFetch: f }) {\n            try {\n                n = u ? u(n) : n;\n                let g = {\n                    name: \"serialize\"\n                }, h = this._tracingHelper.runInChildSpan(g, ()=>Nn({\n                        modelName: l,\n                        runtimeDataModel: this._runtimeDataModel,\n                        action: a,\n                        args: n,\n                        clientMethod: i,\n                        callsite: s,\n                        extensions: this._extensions,\n                        errorFormat: this._errorFormat,\n                        clientVersion: this._clientVersion,\n                        previewFeatures: this._previewFeatures,\n                        globalOmit: this._globalOmit\n                    }));\n                return N.enabled(\"prisma:client\") && (rr(\"Prisma Client call:\"), rr(`prisma.${i}(${$a(n)})`), rr(\"Generated request:\"), rr(JSON.stringify(h, null, 2) + `\n`)), c?.kind === \"batch\" && await c.lock, this._requestHandler.request({\n                    protocolQuery: h,\n                    modelName: l,\n                    action: a,\n                    clientMethod: i,\n                    dataPath: o,\n                    callsite: s,\n                    args: n,\n                    extensions: this._extensions,\n                    transaction: c,\n                    unpacker: p,\n                    otelParentCtx: d,\n                    otelChildCtx: this._tracingHelper.getActiveContext(),\n                    globalOmit: this._globalOmit,\n                    customDataProxyFetch: f\n                });\n            } catch (g) {\n                throw g.clientVersion = this._clientVersion, g;\n            }\n        }\n        _hasPreviewFlag(n) {\n            return !!this._engineConfig.previewFeatures?.includes(n);\n        }\n        $applyPendingMigrations() {\n            return this._engine.applyPendingMigrations();\n        }\n    }\n    return r;\n}\nfunction cu(e, r) {\n    return qf(e) ? [\n        new oe(e, r),\n        Wl\n    ] : [\n        e,\n        Jl\n    ];\n}\nfunction qf(e) {\n    return Array.isArray(e) && Array.isArray(e.raw);\n}\nvar jf = new Set([\n    \"toJSON\",\n    \"$$typeof\",\n    \"asymmetricMatch\",\n    Symbol.iterator,\n    Symbol.toStringTag,\n    Symbol.isConcatSpreadable,\n    Symbol.toPrimitive\n]);\nfunction hu(e) {\n    return new Proxy(e, {\n        get (r, t) {\n            if (t in r) return r[t];\n            if (!jf.has(t)) throw new TypeError(`Invalid enum value: ${String(t)}`);\n        }\n    });\n}\nfunction yu(e) {\n    ot(e, {\n        conflictCheck: \"warn\"\n    });\n}\n0 && (0); /*! Bundled license information:\r\n\r\ndecimal.js/decimal.mjs:\r\n  (*!\r\n   *  decimal.js v10.5.0\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   *)\r\n*/  //# sourceMappingURL=library.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./prisma/prisma/generated/client/runtime/library.js\n");

/***/ }),

/***/ "(rsc)/./src/app/api/admin/category/route.ts":
/*!*********************************************!*\
  !*** ./src/app/api/admin/category/route.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   config: () => (/* binding */ config)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/commonUtils */ \"(rsc)/./src/utils/commonUtils.ts\");\n/* harmony import */ var _utils_auth_authUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/utils/auth/authUtils */ \"(rsc)/./src/utils/auth/authUtils.ts\");\n/* harmony import */ var _utils_saveFiles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/utils/saveFiles */ \"(rsc)/./src/utils/saveFiles.ts\");\n/* harmony import */ var _utils_validateFormData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/utils/validateFormData */ \"(rsc)/./src/utils/validateFormData.ts\");\n/* harmony import */ var _app_models_admin_category__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/app/models/admin/category */ \"(rsc)/./src/app/models/admin/category.ts\");\n/* harmony import */ var _app_models_staffPermission__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/app/models/staffPermission */ \"(rsc)/./src/app/models/staffPermission.ts\");\n\n\n\n\n\n\n\n\nasync function POST(req) {\n    try {\n        (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__.logMessage)('debug', 'POST request received for category creation');\n        // Get headers\n        const adminIdHeader = req.headers.get(\"x-admin-id\");\n        const adminRole = req.headers.get(\"x-admin-role\");\n        const adminId = Number(adminIdHeader);\n        if (!adminIdHeader || isNaN(adminId)) {\n            (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__.logMessage)('warn', `Invalid adminIdHeader: ${adminIdHeader}`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"User ID is missing or invalid in request\"\n            }, {\n                status: 400\n            });\n        }\n        // Check if admin exists\n        const userCheck = await (0,_utils_auth_authUtils__WEBPACK_IMPORTED_MODULE_3__.isUserExist)(adminId, String(adminRole));\n        if (!userCheck.status) {\n            (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__.logMessage)('warn', `User not found: ${userCheck.message}`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: `User Not Found: ${userCheck.message}`\n            }, {\n                status: 404\n            });\n        }\n        const isStaff = ![\n            'admin',\n            'dropshipper',\n            'supplier'\n        ].includes(String(adminRole));\n        if (isStaff) {\n            const options = {\n                panel: 'admin',\n                module: 'Category',\n                action: 'Create'\n            };\n            const staffPermissionsResult = await (0,_app_models_staffPermission__WEBPACK_IMPORTED_MODULE_7__.checkStaffPermissionStatus)(options, adminId);\n            (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__.logMessage)('info', 'Fetched staff permissions:', staffPermissionsResult);\n            if (!staffPermissionsResult.status) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    status: false,\n                    message: staffPermissionsResult.message || \"You do not have permission to perform this action.\"\n                }, {\n                    status: 403\n                });\n            }\n        }\n        const isMultipleImages = true; // Set true to allow multiple image uploads\n        const formData = await req.formData();\n        // Validate input\n        const validation = (0,_utils_validateFormData__WEBPACK_IMPORTED_MODULE_5__.validateFormData)(formData, {\n            requiredFields: [\n                'name'\n            ],\n            patternValidations: {\n                status: 'boolean'\n            }\n        });\n        if (!validation.isValid) {\n            (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__.logMessage)('warn', 'Form validation failed', validation.error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                status: false,\n                error: validation.error,\n                message: validation.message\n            }, {\n                status: 400\n            });\n        }\n        // Extract fields\n        const name = formData.get('name');\n        const description = formData.get('description') || '';\n        const statusRaw = formData.get('status')?.toString().toLowerCase();\n        const status = [\n            'true',\n            '1',\n            true,\n            1,\n            'active',\n            'yes'\n        ].includes(statusRaw);\n        // File upload\n        const uploadDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'tmp', 'uploads', 'category');\n        const fileData = await (0,_utils_saveFiles__WEBPACK_IMPORTED_MODULE_4__.saveFilesFromFormData)(formData, 'image', {\n            dir: uploadDir,\n            pattern: 'slug-unique',\n            multiple: isMultipleImages\n        });\n        let image = '';\n        if (fileData) {\n            (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__.logMessage)('info', 'uploaded fileData:', fileData);\n            image = isMultipleImages ? fileData.map((file)=>file.url).join(', ') : fileData.url;\n        }\n        const categoryPayload = {\n            name,\n            description,\n            status,\n            image\n        };\n        (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__.logMessage)('info', 'Category payload created:', categoryPayload);\n        const categoryCreateResult = await (0,_app_models_admin_category__WEBPACK_IMPORTED_MODULE_6__.createCategory)(adminId, String(adminRole), categoryPayload);\n        if (categoryCreateResult?.status) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                status: true,\n                category: categoryCreateResult.category\n            }, {\n                status: 200\n            });\n        }\n        // ❌ Category creation failed — delete uploaded file(s)\n        const deletePath = (file)=>path__WEBPACK_IMPORTED_MODULE_1___default().join(uploadDir, path__WEBPACK_IMPORTED_MODULE_1___default().basename(file.url));\n        if (isMultipleImages && Array.isArray(fileData)) {\n            await Promise.all(fileData.map((file)=>(0,_utils_saveFiles__WEBPACK_IMPORTED_MODULE_4__.deleteFile)(deletePath(file))));\n        } else {\n            await (0,_utils_saveFiles__WEBPACK_IMPORTED_MODULE_4__.deleteFile)(deletePath(fileData));\n        }\n        (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__.logMessage)('error', 'Category creation failed:', categoryCreateResult?.message || 'Unknown error');\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            status: false,\n            error: categoryCreateResult?.message || 'Category creation failed'\n        }, {\n            status: 500\n        });\n    } catch (err) {\n        const error = err instanceof Error ? err.message : 'Internal Server Error';\n        (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__.logMessage)('error', 'Category Creation Error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            status: false,\n            error\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET(req) {\n    try {\n        (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__.logMessage)('debug', 'GET request received for fetching categories', req);\n        // Fetch all categories\n        const categoriesResult = await (0,_app_models_admin_category__WEBPACK_IMPORTED_MODULE_6__.getCategoriesByStatus)(\"notDeleted\");\n        if (categoriesResult?.status) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                status: true,\n                categories: categoriesResult.categories\n            }, {\n                status: 200\n            });\n        }\n        (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__.logMessage)('warn', 'No categories found');\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            status: false,\n            error: \"No categories found\"\n        }, {\n            status: 404\n        });\n    } catch (error) {\n        (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__.logMessage)('error', 'Error fetching categories:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            status: false,\n            error: \"Failed to fetch categories\"\n        }, {\n            status: 500\n        });\n    }\n}\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/admin/category/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/app/models/admin/category.ts":
/*!******************************************!*\
  !*** ./src/app/models/admin/category.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCategory: () => (/* binding */ createCategory),\n/* harmony export */   deleteCategory: () => (/* binding */ deleteCategory),\n/* harmony export */   generateCategorySlug: () => (/* binding */ generateCategorySlug),\n/* harmony export */   getAllCategories: () => (/* binding */ getAllCategories),\n/* harmony export */   getCategoriesByStatus: () => (/* binding */ getCategoriesByStatus),\n/* harmony export */   getCategoryById: () => (/* binding */ getCategoryById),\n/* harmony export */   removeCategoryImageByIndex: () => (/* binding */ removeCategoryImageByIndex),\n/* harmony export */   restoreCategory: () => (/* binding */ restoreCategory),\n/* harmony export */   softDeleteCategory: () => (/* binding */ softDeleteCategory),\n/* harmony export */   updateCategory: () => (/* binding */ updateCategory)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_saveFiles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/saveFiles */ \"(rsc)/./src/utils/saveFiles.ts\");\n\n\n\nasync function generateCategorySlug(name) {\n    let slug = name.toLowerCase().replace(/[^a-z0-9]/g, '-');\n    let isSlugTaken = true;\n    let suffix = 0;\n    // Keep checking until an unused slug is found\n    while(isSlugTaken){\n        const existingCategory = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].category.findUnique({\n            where: {\n                slug\n            }\n        });\n        if (existingCategory) {\n            // If the slug already exists, add a suffix (-1, -2, etc.)\n            suffix++;\n            slug = `${name.toLowerCase().replace(/[^a-z0-9]/g, '-')}-${suffix}`;\n        } else {\n            // If the slug is not taken, set isSlugTaken to false to exit the loop\n            isSlugTaken = false;\n        }\n    }\n    return slug;\n}\nasync function createCategory(adminId, adminRole, category) {\n    try {\n        const { name, description, status, image } = category;\n        // Generate a unique slug for the category\n        const slug = await generateCategorySlug(name);\n        const newCategory = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].category.create({\n            data: {\n                name,\n                description,\n                status,\n                slug,\n                image,\n                createdAt: new Date(),\n                createdBy: adminId,\n                createdByRole: adminRole\n            }\n        });\n        return {\n            status: true,\n            category: newCategory\n        };\n    } catch (error) {\n        console.error(`Error creating category:`, error);\n        return {\n            status: false,\n            message: \"Internal Server Error\"\n        };\n    }\n}\n// 🟡 UPDATE\nconst updateCategory = async (adminId, adminRole, categoryId, data)=>{\n    try {\n        data.updatedBy = adminId;\n        data.updatedAt = new Date();\n        data.updatedByRole = adminRole;\n        if (data.image) {\n            const newImagesArr = data.image.split(\",\").map((img)=>img.trim());\n            const { status, category, message } = await getCategoryById(categoryId);\n            if (!status || !category) {\n                return {\n                    status: false,\n                    message: message || \"Category not found.\"\n                };\n            }\n            const existingImages = category.image ? category.image.split(\",\").map((img)=>img.trim()) : [];\n            // Merge and remove duplicates\n            const mergedImages = Array.from(new Set([\n                ...existingImages,\n                ...newImagesArr\n            ]));\n            data.image = mergedImages.join(\",\");\n        }\n        const category = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].category.update({\n            where: {\n                id: categoryId\n            },\n            data: data\n        });\n        return {\n            status: true,\n            category\n        };\n    } catch (error) {\n        console.error(\"❌ updateCategory Error:\", error);\n        return {\n            status: false,\n            message: \"Error updating category\"\n        };\n    }\n};\n// 🔵 GET BY ID\nconst getCategoryById = async (id)=>{\n    try {\n        const category = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].category.findUnique({\n            where: {\n                id\n            }\n        });\n        if (!category) return {\n            status: false,\n            message: \"Category not found\"\n        };\n        return {\n            status: true,\n            category\n        };\n    } catch (error) {\n        console.error(\"❌ getCategoryById Error:\", error);\n        return {\n            status: false,\n            message: \"Error fetching category\"\n        };\n    }\n};\n// 🔵 GET BY ID\nconst removeCategoryImageByIndex = async (categoryId, imageIndex)=>{\n    try {\n        const { status, category, message } = await getCategoryById(categoryId);\n        if (!status || !category) {\n            return {\n                status: false,\n                message: message || \"Category not found.\"\n            };\n        }\n        if (!category.image) {\n            return {\n                status: false,\n                message: \"No images available to delete.\"\n            };\n        }\n        const images = category.image.split(\",\");\n        if (imageIndex < 0 || imageIndex >= images.length) {\n            return {\n                status: false,\n                message: \"Invalid image index provided.\"\n            };\n        }\n        const removedImage = images.splice(imageIndex, 1)[0]; // Remove image at given index\n        const updatedImages = images.join(\",\");\n        // Update category in DB\n        const updatedCategory = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].category.update({\n            where: {\n                id: categoryId\n            },\n            data: {\n                image: updatedImages\n            }\n        });\n        // 🔥 Attempt to delete the image file from storage\n        const imageFileName = path__WEBPACK_IMPORTED_MODULE_1___default().basename(removedImage.trim());\n        const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"public\", \"uploads\", \"category\", imageFileName);\n        const fileDeleted = await (0,_utils_saveFiles__WEBPACK_IMPORTED_MODULE_2__.deleteFile)(filePath);\n        return {\n            status: true,\n            message: fileDeleted ? \"Image removed and file deleted successfully.\" : \"Image removed, but file deletion failed.\",\n            category: updatedCategory\n        };\n    } catch (error) {\n        console.error(\"❌ Error removing category image:\", error);\n        return {\n            status: false,\n            message: \"An unexpected error occurred while removing the image.\"\n        };\n    }\n};\n// 🟣 GET ALL\nconst getAllCategories = async ()=>{\n    try {\n        const categories = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].category.findMany({\n            orderBy: {\n                id: 'desc'\n            }\n        });\n        return {\n            status: true,\n            categories\n        };\n    } catch (error) {\n        console.error(\"❌ getAllCategories Error:\", error);\n        return {\n            status: false,\n            message: \"Error fetching categories\"\n        };\n    }\n};\nconst getCategoriesByStatus = async (status)=>{\n    try {\n        let whereCondition = {};\n        switch(status){\n            case \"active\":\n                whereCondition = {\n                    status: true,\n                    deletedAt: null\n                };\n                break;\n            case \"inactive\":\n                whereCondition = {\n                    status: false,\n                    deletedAt: null\n                };\n                break;\n            case \"deleted\":\n                whereCondition = {\n                    deletedAt: {\n                        not: null\n                    }\n                };\n                break;\n            case \"notDeleted\":\n                whereCondition = {\n                    deletedAt: null\n                };\n                break;\n            default:\n                throw new Error(\"Invalid status\");\n        }\n        const categories = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].category.findMany({\n            where: whereCondition,\n            orderBy: {\n                id: \"desc\"\n            }\n        });\n        return {\n            status: true,\n            categories\n        };\n    } catch (error) {\n        console.error(`Error fetching categories by status (${status}):`, error);\n        return {\n            status: false,\n            message: \"Error fetching categories\"\n        };\n    }\n};\n// 🔴 Soft DELETE (marks as deleted by setting deletedAt field)\nconst softDeleteCategory = async (adminId, adminRole, id)=>{\n    try {\n        const updatedCategory = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].category.update({\n            where: {\n                id\n            },\n            data: {\n                deletedBy: adminId,\n                deletedAt: new Date(),\n                deletedByRole: adminRole\n            }\n        });\n        return {\n            status: true,\n            message: \"Category soft deleted successfully\",\n            updatedCategory\n        };\n    } catch (error) {\n        console.error(\"❌ softDeleteCategory Error:\", error);\n        return {\n            status: false,\n            message: \"Error soft deleting category\"\n        };\n    }\n};\n// 🟢 RESTORE (Restores a soft-deleted category by setting deletedAt to null)\nconst restoreCategory = async (adminId, adminRole, id)=>{\n    try {\n        const restoredCategory = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].category.update({\n            where: {\n                id\n            },\n            data: {\n                deletedBy: null,\n                deletedAt: null,\n                deletedByRole: null,\n                updatedBy: adminId,\n                updatedByRole: adminRole,\n                updatedAt: new Date()\n            }\n        });\n        return {\n            status: true,\n            message: \"Category restored successfully\",\n            restoredCategory\n        };\n    } catch (error) {\n        console.error(\"❌ restoreCategory Error:\", error);\n        return {\n            status: false,\n            message: \"Error restoring category\"\n        };\n    }\n};\n// 🔴 DELETE\nconst deleteCategory = async (id)=>{\n    try {\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].category.delete({\n            where: {\n                id\n            }\n        });\n        return {\n            status: true,\n            message: \"Category deleted successfully\"\n        };\n    } catch (error) {\n        console.error(\"❌ deleteCategory Error:\", error);\n        return {\n            status: false,\n            message: \"Error deleting category\"\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL21vZGVscy9hZG1pbi9jYXRlZ29yeS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFrQztBQUNWO0FBQ3VCO0FBZXhDLGVBQWVHLHFCQUFxQkMsSUFBWTtJQUNuRCxJQUFJQyxPQUFPRCxLQUFLRSxXQUFXLEdBQUdDLE9BQU8sQ0FBQyxjQUFjO0lBQ3BELElBQUlDLGNBQWM7SUFDbEIsSUFBSUMsU0FBUztJQUViLDhDQUE4QztJQUM5QyxNQUFPRCxZQUFhO1FBQ2hCLE1BQU1FLG1CQUFtQixNQUFNVixtREFBTUEsQ0FBQ1csUUFBUSxDQUFDQyxVQUFVLENBQUM7WUFDdERDLE9BQU87Z0JBQUVSO1lBQUs7UUFDbEI7UUFFQSxJQUFJSyxrQkFBa0I7WUFDbEIsMERBQTBEO1lBQzFERDtZQUNBSixPQUFPLEdBQUdELEtBQUtFLFdBQVcsR0FBR0MsT0FBTyxDQUFDLGNBQWMsS0FBSyxDQUFDLEVBQUVFLFFBQVE7UUFDdkUsT0FBTztZQUNILHNFQUFzRTtZQUN0RUQsY0FBYztRQUNsQjtJQUNKO0lBRUEsT0FBT0g7QUFDWDtBQUVPLGVBQWVTLGVBQWVDLE9BQWUsRUFBRUMsU0FBaUIsRUFBRUwsUUFBa0I7SUFFdkYsSUFBSTtRQUNBLE1BQU0sRUFBRVAsSUFBSSxFQUFFYSxXQUFXLEVBQUVDLE1BQU0sRUFBRUMsS0FBSyxFQUFFLEdBQUdSO1FBRTdDLDBDQUEwQztRQUMxQyxNQUFNTixPQUFPLE1BQU1GLHFCQUFxQkM7UUFFeEMsTUFBTWdCLGNBQWMsTUFBTXBCLG1EQUFNQSxDQUFDVyxRQUFRLENBQUNVLE1BQU0sQ0FBQztZQUM3Q0MsTUFBTTtnQkFDRmxCO2dCQUNBYTtnQkFDQUM7Z0JBQ0FiO2dCQUNBYztnQkFDQUksV0FBVyxJQUFJQztnQkFDZkMsV0FBV1Y7Z0JBQ1hXLGVBQWVWO1lBQ25CO1FBQ0o7UUFFQSxPQUFPO1lBQUVFLFFBQVE7WUFBTVAsVUFBVVM7UUFBWTtJQUNqRCxFQUFFLE9BQU9PLE9BQU87UUFDWkMsUUFBUUQsS0FBSyxDQUFDLENBQUMsd0JBQXdCLENBQUMsRUFBRUE7UUFDMUMsT0FBTztZQUFFVCxRQUFRO1lBQU9XLFNBQVM7UUFBd0I7SUFDN0Q7QUFDSjtBQUVBLFlBQVk7QUFDTCxNQUFNQyxpQkFBaUIsT0FDMUJmLFNBQ0FDLFdBQ0FlLFlBQ0FUO0lBRUEsSUFBSTtRQUNBQSxLQUFLVSxTQUFTLEdBQUdqQjtRQUNqQk8sS0FBS1csU0FBUyxHQUFHLElBQUlUO1FBQ3JCRixLQUFLWSxhQUFhLEdBQUdsQjtRQUVyQixJQUFJTSxLQUFLSCxLQUFLLEVBQUU7WUFDWixNQUFNZ0IsZUFBZWIsS0FBS0gsS0FBSyxDQUFDaUIsS0FBSyxDQUFDLEtBQUtDLEdBQUcsQ0FBQyxDQUFDQyxNQUFRQSxJQUFJQyxJQUFJO1lBRWhFLE1BQU0sRUFBRXJCLE1BQU0sRUFBRVAsUUFBUSxFQUFFa0IsT0FBTyxFQUFFLEdBQUcsTUFBTVcsZ0JBQWdCVDtZQUU1RCxJQUFJLENBQUNiLFVBQVUsQ0FBQ1AsVUFBVTtnQkFDdEIsT0FBTztvQkFBRU8sUUFBUTtvQkFBT1csU0FBU0EsV0FBVztnQkFBc0I7WUFDdEU7WUFFQSxNQUFNWSxpQkFBaUI5QixTQUFTUSxLQUFLLEdBQy9CUixTQUFTUSxLQUFLLENBQUNpQixLQUFLLENBQUMsS0FBS0MsR0FBRyxDQUFDLENBQUNDLE1BQVFBLElBQUlDLElBQUksTUFDL0MsRUFBRTtZQUVSLDhCQUE4QjtZQUM5QixNQUFNRyxlQUFlQyxNQUFNQyxJQUFJLENBQUMsSUFBSUMsSUFBSTttQkFBSUo7bUJBQW1CTjthQUFhO1lBRTVFYixLQUFLSCxLQUFLLEdBQUd1QixhQUFhSSxJQUFJLENBQUM7UUFDbkM7UUFFQSxNQUFNbkMsV0FBVyxNQUFNWCxtREFBTUEsQ0FBQ1csUUFBUSxDQUFDb0MsTUFBTSxDQUFDO1lBQzFDbEMsT0FBTztnQkFBRW1DLElBQUlqQjtZQUFXO1lBQ3hCVCxNQUFNQTtRQUNWO1FBRUEsT0FBTztZQUFFSixRQUFRO1lBQU1QO1FBQVM7SUFDcEMsRUFBRSxPQUFPZ0IsT0FBTztRQUNaQyxRQUFRRCxLQUFLLENBQUMsMkJBQTJCQTtRQUN6QyxPQUFPO1lBQUVULFFBQVE7WUFBT1csU0FBUztRQUEwQjtJQUMvRDtBQUNKLEVBQUU7QUFFRixlQUFlO0FBQ1IsTUFBTVcsa0JBQWtCLE9BQU9RO0lBQ2xDLElBQUk7UUFDQSxNQUFNckMsV0FBVyxNQUFNWCxtREFBTUEsQ0FBQ1csUUFBUSxDQUFDQyxVQUFVLENBQUM7WUFDOUNDLE9BQU87Z0JBQUVtQztZQUFHO1FBQ2hCO1FBRUEsSUFBSSxDQUFDckMsVUFBVSxPQUFPO1lBQUVPLFFBQVE7WUFBT1csU0FBUztRQUFxQjtRQUNyRSxPQUFPO1lBQUVYLFFBQVE7WUFBTVA7UUFBUztJQUNwQyxFQUFFLE9BQU9nQixPQUFPO1FBQ1pDLFFBQVFELEtBQUssQ0FBQyw0QkFBNEJBO1FBQzFDLE9BQU87WUFBRVQsUUFBUTtZQUFPVyxTQUFTO1FBQTBCO0lBQy9EO0FBQ0osRUFBRTtBQUVGLGVBQWU7QUFDUixNQUFNb0IsNkJBQTZCLE9BQU9sQixZQUFvQm1CO0lBQ2pFLElBQUk7UUFDQSxNQUFNLEVBQUVoQyxNQUFNLEVBQUVQLFFBQVEsRUFBRWtCLE9BQU8sRUFBRSxHQUFHLE1BQU1XLGdCQUFnQlQ7UUFFNUQsSUFBSSxDQUFDYixVQUFVLENBQUNQLFVBQVU7WUFDdEIsT0FBTztnQkFBRU8sUUFBUTtnQkFBT1csU0FBU0EsV0FBVztZQUFzQjtRQUN0RTtRQUVBLElBQUksQ0FBQ2xCLFNBQVNRLEtBQUssRUFBRTtZQUNqQixPQUFPO2dCQUFFRCxRQUFRO2dCQUFPVyxTQUFTO1lBQWlDO1FBQ3RFO1FBRUEsTUFBTXNCLFNBQVN4QyxTQUFTUSxLQUFLLENBQUNpQixLQUFLLENBQUM7UUFFcEMsSUFBSWMsYUFBYSxLQUFLQSxjQUFjQyxPQUFPQyxNQUFNLEVBQUU7WUFDL0MsT0FBTztnQkFBRWxDLFFBQVE7Z0JBQU9XLFNBQVM7WUFBZ0M7UUFDckU7UUFFQSxNQUFNd0IsZUFBZUYsT0FBT0csTUFBTSxDQUFDSixZQUFZLEVBQUUsQ0FBQyxFQUFFLEVBQUUsOEJBQThCO1FBQ3BGLE1BQU1LLGdCQUFnQkosT0FBT0wsSUFBSSxDQUFDO1FBRWxDLHdCQUF3QjtRQUN4QixNQUFNVSxrQkFBa0IsTUFBTXhELG1EQUFNQSxDQUFDVyxRQUFRLENBQUNvQyxNQUFNLENBQUM7WUFDakRsQyxPQUFPO2dCQUFFbUMsSUFBSWpCO1lBQVc7WUFDeEJULE1BQU07Z0JBQUVILE9BQU9vQztZQUFjO1FBQ2pDO1FBRUEsbURBQW1EO1FBQ25ELE1BQU1FLGdCQUFnQnhELG9EQUFhLENBQUNvRCxhQUFhZCxJQUFJO1FBQ3JELE1BQU1vQixXQUFXMUQsZ0RBQVMsQ0FBQzJELFFBQVFDLEdBQUcsSUFBSSxVQUFVLFdBQVcsWUFBWUo7UUFFM0UsTUFBTUssY0FBYyxNQUFNNUQsNERBQVVBLENBQUN5RDtRQUVyQyxPQUFPO1lBQ0h6QyxRQUFRO1lBQ1JXLFNBQVNpQyxjQUNILGlEQUNBO1lBQ05uRCxVQUFVNkM7UUFDZDtJQUNKLEVBQUUsT0FBTzdCLE9BQU87UUFDWkMsUUFBUUQsS0FBSyxDQUFDLG9DQUFvQ0E7UUFDbEQsT0FBTztZQUNIVCxRQUFRO1lBQ1JXLFNBQVM7UUFDYjtJQUNKO0FBQ0osRUFBRTtBQUVGLGFBQWE7QUFDTixNQUFNa0MsbUJBQW1CO0lBQzVCLElBQUk7UUFDQSxNQUFNQyxhQUFhLE1BQU1oRSxtREFBTUEsQ0FBQ1csUUFBUSxDQUFDc0QsUUFBUSxDQUFDO1lBQzlDQyxTQUFTO2dCQUFFbEIsSUFBSTtZQUFPO1FBQzFCO1FBQ0EsT0FBTztZQUFFOUIsUUFBUTtZQUFNOEM7UUFBVztJQUN0QyxFQUFFLE9BQU9yQyxPQUFPO1FBQ1pDLFFBQVFELEtBQUssQ0FBQyw2QkFBNkJBO1FBQzNDLE9BQU87WUFBRVQsUUFBUTtZQUFPVyxTQUFTO1FBQTRCO0lBQ2pFO0FBQ0osRUFBRTtBQUVLLE1BQU1zQyx3QkFBd0IsT0FBT2pEO0lBQ3hDLElBQUk7UUFDQSxJQUFJa0QsaUJBQWlCLENBQUM7UUFFdEIsT0FBUWxEO1lBQ0osS0FBSztnQkFDRGtELGlCQUFpQjtvQkFBRWxELFFBQVE7b0JBQU1tRCxXQUFXO2dCQUFLO2dCQUNqRDtZQUNKLEtBQUs7Z0JBQ0RELGlCQUFpQjtvQkFBRWxELFFBQVE7b0JBQU9tRCxXQUFXO2dCQUFLO2dCQUNsRDtZQUNKLEtBQUs7Z0JBQ0RELGlCQUFpQjtvQkFBRUMsV0FBVzt3QkFBRUMsS0FBSztvQkFBSztnQkFBRTtnQkFDNUM7WUFDSixLQUFLO2dCQUNERixpQkFBaUI7b0JBQUVDLFdBQVc7Z0JBQUs7Z0JBQ25DO1lBQ0o7Z0JBQ0ksTUFBTSxJQUFJRSxNQUFNO1FBQ3hCO1FBRUEsTUFBTVAsYUFBYSxNQUFNaEUsbURBQU1BLENBQUNXLFFBQVEsQ0FBQ3NELFFBQVEsQ0FBQztZQUM5Q3BELE9BQU91RDtZQUNQRixTQUFTO2dCQUFFbEIsSUFBSTtZQUFPO1FBQzFCO1FBRUEsT0FBTztZQUFFOUIsUUFBUTtZQUFNOEM7UUFBVztJQUN0QyxFQUFFLE9BQU9yQyxPQUFPO1FBQ1pDLFFBQVFELEtBQUssQ0FBQyxDQUFDLHFDQUFxQyxFQUFFVCxPQUFPLEVBQUUsQ0FBQyxFQUFFUztRQUNsRSxPQUFPO1lBQUVULFFBQVE7WUFBT1csU0FBUztRQUE0QjtJQUNqRTtBQUNKLEVBQUU7QUFFRiwrREFBK0Q7QUFDeEQsTUFBTTJDLHFCQUFxQixPQUFPekQsU0FBaUJDLFdBQW1CZ0M7SUFDekUsSUFBSTtRQUNBLE1BQU1RLGtCQUFrQixNQUFNeEQsbURBQU1BLENBQUNXLFFBQVEsQ0FBQ29DLE1BQU0sQ0FBQztZQUNqRGxDLE9BQU87Z0JBQUVtQztZQUFHO1lBQ1oxQixNQUFNO2dCQUNGbUQsV0FBVzFEO2dCQUNYc0QsV0FBVyxJQUFJN0M7Z0JBQ2ZrRCxlQUFlMUQ7WUFDbkI7UUFDSjtRQUNBLE9BQU87WUFBRUUsUUFBUTtZQUFNVyxTQUFTO1lBQXNDMkI7UUFBZ0I7SUFDMUYsRUFBRSxPQUFPN0IsT0FBTztRQUNaQyxRQUFRRCxLQUFLLENBQUMsK0JBQStCQTtRQUM3QyxPQUFPO1lBQUVULFFBQVE7WUFBT1csU0FBUztRQUErQjtJQUNwRTtBQUNKLEVBQUU7QUFFRiw2RUFBNkU7QUFDdEUsTUFBTThDLGtCQUFrQixPQUFPNUQsU0FBaUJDLFdBQW1CZ0M7SUFDdEUsSUFBSTtRQUNBLE1BQU00QixtQkFBbUIsTUFBTTVFLG1EQUFNQSxDQUFDVyxRQUFRLENBQUNvQyxNQUFNLENBQUM7WUFDbERsQyxPQUFPO2dCQUFFbUM7WUFBRztZQUNaMUIsTUFBTTtnQkFDRm1ELFdBQVc7Z0JBQ1hKLFdBQVc7Z0JBQ1hLLGVBQWU7Z0JBQ2YxQyxXQUFXakI7Z0JBQ1htQixlQUFlbEI7Z0JBQ2ZpQixXQUFXLElBQUlUO1lBQ25CO1FBQ0o7UUFFQSxPQUFPO1lBQUVOLFFBQVE7WUFBTVcsU0FBUztZQUFrQytDO1FBQWlCO0lBQ3ZGLEVBQUUsT0FBT2pELE9BQU87UUFDWkMsUUFBUUQsS0FBSyxDQUFDLDRCQUE0QkE7UUFDMUMsT0FBTztZQUFFVCxRQUFRO1lBQU9XLFNBQVM7UUFBMkI7SUFDaEU7QUFDSixFQUFFO0FBRUYsWUFBWTtBQUNMLE1BQU1nRCxpQkFBaUIsT0FBTzdCO0lBQ2pDLElBQUk7UUFDQSxNQUFNaEQsbURBQU1BLENBQUNXLFFBQVEsQ0FBQ21FLE1BQU0sQ0FBQztZQUFFakUsT0FBTztnQkFBRW1DO1lBQUc7UUFBRTtRQUM3QyxPQUFPO1lBQUU5QixRQUFRO1lBQU1XLFNBQVM7UUFBZ0M7SUFDcEUsRUFBRSxPQUFPRixPQUFPO1FBQ1pDLFFBQVFELEtBQUssQ0FBQywyQkFBMkJBO1FBQ3pDLE9BQU87WUFBRVQsUUFBUTtZQUFPVyxTQUFTO1FBQTBCO0lBQy9EO0FBQ0osRUFBRSIsInNvdXJjZXMiOlsiRDpcXFdlYnN0ZXAyXFxzaGlwb3dsLW1lcmdlXFxzcmNcXGFwcFxcbW9kZWxzXFxhZG1pblxcY2F0ZWdvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHByaXNtYSBmcm9tIFwiQC9saWIvcHJpc21hXCI7XHJcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCB7IGRlbGV0ZUZpbGUgfSBmcm9tICdAL3V0aWxzL3NhdmVGaWxlcyc7XHJcblxyXG5pbnRlcmZhY2UgQ2F0ZWdvcnkge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICAgIHN0YXR1czogYm9vbGVhbjtcclxuICAgIGltYWdlPzogc3RyaW5nO1xyXG4gICAgdXBkYXRlZEJ5PzogbnVtYmVyO1xyXG4gICAgdXBkYXRlZEF0PzogRGF0ZTtcclxuICAgIHVwZGF0ZWRCeVJvbGU/OiBzdHJpbmc7XHJcbiAgICBkZWxldGVkQnk/OiBudW1iZXIgfCBudWxsO1xyXG4gICAgZGVsZXRlZEF0PzogRGF0ZTtcclxuICAgIGRlbGV0ZWRCeVJvbGU/OiBzdHJpbmcgfCBudWxsO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVDYXRlZ29yeVNsdWcobmFtZTogc3RyaW5nKSB7XHJcbiAgICBsZXQgc2x1ZyA9IG5hbWUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXmEtejAtOV0vZywgJy0nKTtcclxuICAgIGxldCBpc1NsdWdUYWtlbiA9IHRydWU7XHJcbiAgICBsZXQgc3VmZml4ID0gMDtcclxuXHJcbiAgICAvLyBLZWVwIGNoZWNraW5nIHVudGlsIGFuIHVudXNlZCBzbHVnIGlzIGZvdW5kXHJcbiAgICB3aGlsZSAoaXNTbHVnVGFrZW4pIHtcclxuICAgICAgICBjb25zdCBleGlzdGluZ0NhdGVnb3J5ID0gYXdhaXQgcHJpc21hLmNhdGVnb3J5LmZpbmRVbmlxdWUoe1xyXG4gICAgICAgICAgICB3aGVyZTogeyBzbHVnIH0sXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChleGlzdGluZ0NhdGVnb3J5KSB7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBzbHVnIGFscmVhZHkgZXhpc3RzLCBhZGQgYSBzdWZmaXggKC0xLCAtMiwgZXRjLilcclxuICAgICAgICAgICAgc3VmZml4Kys7XHJcbiAgICAgICAgICAgIHNsdWcgPSBgJHtuYW1lLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW15hLXowLTldL2csICctJyl9LSR7c3VmZml4fWA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIHNsdWcgaXMgbm90IHRha2VuLCBzZXQgaXNTbHVnVGFrZW4gdG8gZmFsc2UgdG8gZXhpdCB0aGUgbG9vcFxyXG4gICAgICAgICAgICBpc1NsdWdUYWtlbiA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2x1ZztcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUNhdGVnb3J5KGFkbWluSWQ6IG51bWJlciwgYWRtaW5Sb2xlOiBzdHJpbmcsIGNhdGVnb3J5OiBDYXRlZ29yeSkge1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgeyBuYW1lLCBkZXNjcmlwdGlvbiwgc3RhdHVzLCBpbWFnZSB9ID0gY2F0ZWdvcnk7XHJcblxyXG4gICAgICAgIC8vIEdlbmVyYXRlIGEgdW5pcXVlIHNsdWcgZm9yIHRoZSBjYXRlZ29yeVxyXG4gICAgICAgIGNvbnN0IHNsdWcgPSBhd2FpdCBnZW5lcmF0ZUNhdGVnb3J5U2x1ZyhuYW1lKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmV3Q2F0ZWdvcnkgPSBhd2FpdCBwcmlzbWEuY2F0ZWdvcnkuY3JlYXRlKHtcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgbmFtZSxcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgc3RhdHVzLFxyXG4gICAgICAgICAgICAgICAgc2x1ZyxcclxuICAgICAgICAgICAgICAgIGltYWdlLFxyXG4gICAgICAgICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgY3JlYXRlZEJ5OiBhZG1pbklkLFxyXG4gICAgICAgICAgICAgICAgY3JlYXRlZEJ5Um9sZTogYWRtaW5Sb2xlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUsIGNhdGVnb3J5OiBuZXdDYXRlZ29yeSB9O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBjcmVhdGluZyBjYXRlZ29yeTpgLCBlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBmYWxzZSwgbWVzc2FnZTogXCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcIiB9O1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyDwn5+hIFVQREFURVxyXG5leHBvcnQgY29uc3QgdXBkYXRlQ2F0ZWdvcnkgPSBhc3luYyAoXHJcbiAgICBhZG1pbklkOiBudW1iZXIsXHJcbiAgICBhZG1pblJvbGU6IHN0cmluZyxcclxuICAgIGNhdGVnb3J5SWQ6IG51bWJlcixcclxuICAgIGRhdGE6IENhdGVnb3J5XHJcbikgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBkYXRhLnVwZGF0ZWRCeSA9IGFkbWluSWQ7XHJcbiAgICAgICAgZGF0YS51cGRhdGVkQXQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIGRhdGEudXBkYXRlZEJ5Um9sZSA9IGFkbWluUm9sZTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGEuaW1hZ2UpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3SW1hZ2VzQXJyID0gZGF0YS5pbWFnZS5zcGxpdChcIixcIikubWFwKChpbWcpID0+IGltZy50cmltKCkpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgeyBzdGF0dXMsIGNhdGVnb3J5LCBtZXNzYWdlIH0gPSBhd2FpdCBnZXRDYXRlZ29yeUJ5SWQoY2F0ZWdvcnlJZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXN0YXR1cyB8fCAhY2F0ZWdvcnkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogZmFsc2UsIG1lc3NhZ2U6IG1lc3NhZ2UgfHwgXCJDYXRlZ29yeSBub3QgZm91bmQuXCIgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdJbWFnZXMgPSBjYXRlZ29yeS5pbWFnZVxyXG4gICAgICAgICAgICAgICAgPyBjYXRlZ29yeS5pbWFnZS5zcGxpdChcIixcIikubWFwKChpbWcpID0+IGltZy50cmltKCkpXHJcbiAgICAgICAgICAgICAgICA6IFtdO1xyXG5cclxuICAgICAgICAgICAgLy8gTWVyZ2UgYW5kIHJlbW92ZSBkdXBsaWNhdGVzXHJcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZEltYWdlcyA9IEFycmF5LmZyb20obmV3IFNldChbLi4uZXhpc3RpbmdJbWFnZXMsIC4uLm5ld0ltYWdlc0Fycl0pKTtcclxuXHJcbiAgICAgICAgICAgIGRhdGEuaW1hZ2UgPSBtZXJnZWRJbWFnZXMuam9pbihcIixcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjYXRlZ29yeSA9IGF3YWl0IHByaXNtYS5jYXRlZ29yeS51cGRhdGUoe1xyXG4gICAgICAgICAgICB3aGVyZTogeyBpZDogY2F0ZWdvcnlJZCB9LCAvLyBBc3N1bWluZyAnaWQnIGlzIHRoZSBjb3JyZWN0IHByaW1hcnkga2V5IGZpZWxkXHJcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7IHN0YXR1czogdHJ1ZSwgY2F0ZWdvcnkgfTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIuKdjCB1cGRhdGVDYXRlZ29yeSBFcnJvcjpcIiwgZXJyb3IpO1xyXG4gICAgICAgIHJldHVybiB7IHN0YXR1czogZmFsc2UsIG1lc3NhZ2U6IFwiRXJyb3IgdXBkYXRpbmcgY2F0ZWdvcnlcIiB9O1xyXG4gICAgfVxyXG59O1xyXG5cclxuLy8g8J+UtSBHRVQgQlkgSURcclxuZXhwb3J0IGNvbnN0IGdldENhdGVnb3J5QnlJZCA9IGFzeW5jIChpZDogbnVtYmVyKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gYXdhaXQgcHJpc21hLmNhdGVnb3J5LmZpbmRVbmlxdWUoe1xyXG4gICAgICAgICAgICB3aGVyZTogeyBpZCB9LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoIWNhdGVnb3J5KSByZXR1cm4geyBzdGF0dXM6IGZhbHNlLCBtZXNzYWdlOiBcIkNhdGVnb3J5IG5vdCBmb3VuZFwiIH07XHJcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlLCBjYXRlZ29yeSB9O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwi4p2MIGdldENhdGVnb3J5QnlJZCBFcnJvcjpcIiwgZXJyb3IpO1xyXG4gICAgICAgIHJldHVybiB7IHN0YXR1czogZmFsc2UsIG1lc3NhZ2U6IFwiRXJyb3IgZmV0Y2hpbmcgY2F0ZWdvcnlcIiB9O1xyXG4gICAgfVxyXG59O1xyXG5cclxuLy8g8J+UtSBHRVQgQlkgSURcclxuZXhwb3J0IGNvbnN0IHJlbW92ZUNhdGVnb3J5SW1hZ2VCeUluZGV4ID0gYXN5bmMgKGNhdGVnb3J5SWQ6IG51bWJlciwgaW1hZ2VJbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHsgc3RhdHVzLCBjYXRlZ29yeSwgbWVzc2FnZSB9ID0gYXdhaXQgZ2V0Q2F0ZWdvcnlCeUlkKGNhdGVnb3J5SWQpO1xyXG5cclxuICAgICAgICBpZiAoIXN0YXR1cyB8fCAhY2F0ZWdvcnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBmYWxzZSwgbWVzc2FnZTogbWVzc2FnZSB8fCBcIkNhdGVnb3J5IG5vdCBmb3VuZC5cIiB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFjYXRlZ29yeS5pbWFnZSkge1xyXG4gICAgICAgICAgICByZXR1cm4geyBzdGF0dXM6IGZhbHNlLCBtZXNzYWdlOiBcIk5vIGltYWdlcyBhdmFpbGFibGUgdG8gZGVsZXRlLlwiIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpbWFnZXMgPSBjYXRlZ29yeS5pbWFnZS5zcGxpdChcIixcIik7XHJcblxyXG4gICAgICAgIGlmIChpbWFnZUluZGV4IDwgMCB8fCBpbWFnZUluZGV4ID49IGltYWdlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBmYWxzZSwgbWVzc2FnZTogXCJJbnZhbGlkIGltYWdlIGluZGV4IHByb3ZpZGVkLlwiIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCByZW1vdmVkSW1hZ2UgPSBpbWFnZXMuc3BsaWNlKGltYWdlSW5kZXgsIDEpWzBdOyAvLyBSZW1vdmUgaW1hZ2UgYXQgZ2l2ZW4gaW5kZXhcclxuICAgICAgICBjb25zdCB1cGRhdGVkSW1hZ2VzID0gaW1hZ2VzLmpvaW4oXCIsXCIpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgY2F0ZWdvcnkgaW4gREJcclxuICAgICAgICBjb25zdCB1cGRhdGVkQ2F0ZWdvcnkgPSBhd2FpdCBwcmlzbWEuY2F0ZWdvcnkudXBkYXRlKHtcclxuICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IGNhdGVnb3J5SWQgfSxcclxuICAgICAgICAgICAgZGF0YTogeyBpbWFnZTogdXBkYXRlZEltYWdlcyB9LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyDwn5SlIEF0dGVtcHQgdG8gZGVsZXRlIHRoZSBpbWFnZSBmaWxlIGZyb20gc3RvcmFnZVxyXG4gICAgICAgIGNvbnN0IGltYWdlRmlsZU5hbWUgPSBwYXRoLmJhc2VuYW1lKHJlbW92ZWRJbWFnZS50cmltKCkpO1xyXG4gICAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIFwicHVibGljXCIsIFwidXBsb2Fkc1wiLCBcImNhdGVnb3J5XCIsIGltYWdlRmlsZU5hbWUpO1xyXG5cclxuICAgICAgICBjb25zdCBmaWxlRGVsZXRlZCA9IGF3YWl0IGRlbGV0ZUZpbGUoZmlsZVBhdGgpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGF0dXM6IHRydWUsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IGZpbGVEZWxldGVkXHJcbiAgICAgICAgICAgICAgICA/IFwiSW1hZ2UgcmVtb3ZlZCBhbmQgZmlsZSBkZWxldGVkIHN1Y2Nlc3NmdWxseS5cIlxyXG4gICAgICAgICAgICAgICAgOiBcIkltYWdlIHJlbW92ZWQsIGJ1dCBmaWxlIGRlbGV0aW9uIGZhaWxlZC5cIixcclxuICAgICAgICAgICAgY2F0ZWdvcnk6IHVwZGF0ZWRDYXRlZ29yeSxcclxuICAgICAgICB9O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwi4p2MIEVycm9yIHJlbW92aW5nIGNhdGVnb3J5IGltYWdlOlwiLCBlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3RhdHVzOiBmYWxzZSxcclxuICAgICAgICAgICAgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIHdoaWxlIHJlbW92aW5nIHRoZSBpbWFnZS5cIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59O1xyXG5cclxuLy8g8J+foyBHRVQgQUxMXHJcbmV4cG9ydCBjb25zdCBnZXRBbGxDYXRlZ29yaWVzID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjYXRlZ29yaWVzID0gYXdhaXQgcHJpc21hLmNhdGVnb3J5LmZpbmRNYW55KHtcclxuICAgICAgICAgICAgb3JkZXJCeTogeyBpZDogJ2Rlc2MnIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlLCBjYXRlZ29yaWVzIH07XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCLinYwgZ2V0QWxsQ2F0ZWdvcmllcyBFcnJvcjpcIiwgZXJyb3IpO1xyXG4gICAgICAgIHJldHVybiB7IHN0YXR1czogZmFsc2UsIG1lc3NhZ2U6IFwiRXJyb3IgZmV0Y2hpbmcgY2F0ZWdvcmllc1wiIH07XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0Q2F0ZWdvcmllc0J5U3RhdHVzID0gYXN5bmMgKHN0YXR1czogXCJhY3RpdmVcIiB8IFwiaW5hY3RpdmVcIiB8IFwiZGVsZXRlZFwiIHwgXCJub3REZWxldGVkXCIpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgbGV0IHdoZXJlQ29uZGl0aW9uID0ge307XHJcblxyXG4gICAgICAgIHN3aXRjaCAoc3RhdHVzKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJhY3RpdmVcIjpcclxuICAgICAgICAgICAgICAgIHdoZXJlQ29uZGl0aW9uID0geyBzdGF0dXM6IHRydWUsIGRlbGV0ZWRBdDogbnVsbCB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJpbmFjdGl2ZVwiOlxyXG4gICAgICAgICAgICAgICAgd2hlcmVDb25kaXRpb24gPSB7IHN0YXR1czogZmFsc2UsIGRlbGV0ZWRBdDogbnVsbCB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkZWxldGVkXCI6XHJcbiAgICAgICAgICAgICAgICB3aGVyZUNvbmRpdGlvbiA9IHsgZGVsZXRlZEF0OiB7IG5vdDogbnVsbCB9IH07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIm5vdERlbGV0ZWRcIjpcclxuICAgICAgICAgICAgICAgIHdoZXJlQ29uZGl0aW9uID0geyBkZWxldGVkQXQ6IG51bGwgfTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdGF0dXNcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjYXRlZ29yaWVzID0gYXdhaXQgcHJpc21hLmNhdGVnb3J5LmZpbmRNYW55KHtcclxuICAgICAgICAgICAgd2hlcmU6IHdoZXJlQ29uZGl0aW9uLFxyXG4gICAgICAgICAgICBvcmRlckJ5OiB7IGlkOiBcImRlc2NcIiB9LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUsIGNhdGVnb3JpZXMgfTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmV0Y2hpbmcgY2F0ZWdvcmllcyBieSBzdGF0dXMgKCR7c3RhdHVzfSk6YCwgZXJyb3IpO1xyXG4gICAgICAgIHJldHVybiB7IHN0YXR1czogZmFsc2UsIG1lc3NhZ2U6IFwiRXJyb3IgZmV0Y2hpbmcgY2F0ZWdvcmllc1wiIH07XHJcbiAgICB9XHJcbn07XHJcblxyXG4vLyDwn5S0IFNvZnQgREVMRVRFIChtYXJrcyBhcyBkZWxldGVkIGJ5IHNldHRpbmcgZGVsZXRlZEF0IGZpZWxkKVxyXG5leHBvcnQgY29uc3Qgc29mdERlbGV0ZUNhdGVnb3J5ID0gYXN5bmMgKGFkbWluSWQ6IG51bWJlciwgYWRtaW5Sb2xlOiBzdHJpbmcsIGlkOiBudW1iZXIpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlZENhdGVnb3J5ID0gYXdhaXQgcHJpc21hLmNhdGVnb3J5LnVwZGF0ZSh7XHJcbiAgICAgICAgICAgIHdoZXJlOiB7IGlkIH0sXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZWRCeTogYWRtaW5JZCxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZWRBdDogbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZWRCeVJvbGU6IGFkbWluUm9sZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUsIG1lc3NhZ2U6IFwiQ2F0ZWdvcnkgc29mdCBkZWxldGVkIHN1Y2Nlc3NmdWxseVwiLCB1cGRhdGVkQ2F0ZWdvcnkgfTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIuKdjCBzb2Z0RGVsZXRlQ2F0ZWdvcnkgRXJyb3I6XCIsIGVycm9yKTtcclxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IGZhbHNlLCBtZXNzYWdlOiBcIkVycm9yIHNvZnQgZGVsZXRpbmcgY2F0ZWdvcnlcIiB9O1xyXG4gICAgfVxyXG59O1xyXG5cclxuLy8g8J+foiBSRVNUT1JFIChSZXN0b3JlcyBhIHNvZnQtZGVsZXRlZCBjYXRlZ29yeSBieSBzZXR0aW5nIGRlbGV0ZWRBdCB0byBudWxsKVxyXG5leHBvcnQgY29uc3QgcmVzdG9yZUNhdGVnb3J5ID0gYXN5bmMgKGFkbWluSWQ6IG51bWJlciwgYWRtaW5Sb2xlOiBzdHJpbmcsIGlkOiBudW1iZXIpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzdG9yZWRDYXRlZ29yeSA9IGF3YWl0IHByaXNtYS5jYXRlZ29yeS51cGRhdGUoe1xyXG4gICAgICAgICAgICB3aGVyZTogeyBpZCB9LFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGVkQnk6IG51bGwsICAgICAgLy8gUmVzZXQgdGhlIGRlbGV0ZWRCeSBmaWVsZFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlZEF0OiBudWxsLCAgICAgIC8vIFNldCBkZWxldGVkQXQgdG8gbnVsbFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlZEJ5Um9sZTogbnVsbCwgIC8vIFJlc2V0IHRoZSBkZWxldGVkQnlSb2xlIGZpZWxkXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVkQnk6IGFkbWluSWQsICAgLy8gUmVjb3JkIHRoZSB1c2VyIHJlc3RvcmluZyB0aGUgY2F0ZWdvcnlcclxuICAgICAgICAgICAgICAgIHVwZGF0ZWRCeVJvbGU6IGFkbWluUm9sZSwgLy8gUmVjb3JkIHRoZSByb2xlIG9mIHRoZSB1c2VyXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksIC8vIFVwZGF0ZSB0aGUgdXBkYXRlZEF0IGZpZWxkXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7IHN0YXR1czogdHJ1ZSwgbWVzc2FnZTogXCJDYXRlZ29yeSByZXN0b3JlZCBzdWNjZXNzZnVsbHlcIiwgcmVzdG9yZWRDYXRlZ29yeSB9O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwi4p2MIHJlc3RvcmVDYXRlZ29yeSBFcnJvcjpcIiwgZXJyb3IpO1xyXG4gICAgICAgIHJldHVybiB7IHN0YXR1czogZmFsc2UsIG1lc3NhZ2U6IFwiRXJyb3IgcmVzdG9yaW5nIGNhdGVnb3J5XCIgfTtcclxuICAgIH1cclxufTtcclxuXHJcbi8vIPCflLQgREVMRVRFXHJcbmV4cG9ydCBjb25zdCBkZWxldGVDYXRlZ29yeSA9IGFzeW5jIChpZDogbnVtYmVyKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGF3YWl0IHByaXNtYS5jYXRlZ29yeS5kZWxldGUoeyB3aGVyZTogeyBpZCB9IH0pO1xyXG4gICAgICAgIHJldHVybiB7IHN0YXR1czogdHJ1ZSwgbWVzc2FnZTogXCJDYXRlZ29yeSBkZWxldGVkIHN1Y2Nlc3NmdWxseVwiIH07XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCLinYwgZGVsZXRlQ2F0ZWdvcnkgRXJyb3I6XCIsIGVycm9yKTtcclxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IGZhbHNlLCBtZXNzYWdlOiBcIkVycm9yIGRlbGV0aW5nIGNhdGVnb3J5XCIgfTtcclxuICAgIH1cclxufTsiXSwibmFtZXMiOlsicHJpc21hIiwicGF0aCIsImRlbGV0ZUZpbGUiLCJnZW5lcmF0ZUNhdGVnb3J5U2x1ZyIsIm5hbWUiLCJzbHVnIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwiaXNTbHVnVGFrZW4iLCJzdWZmaXgiLCJleGlzdGluZ0NhdGVnb3J5IiwiY2F0ZWdvcnkiLCJmaW5kVW5pcXVlIiwid2hlcmUiLCJjcmVhdGVDYXRlZ29yeSIsImFkbWluSWQiLCJhZG1pblJvbGUiLCJkZXNjcmlwdGlvbiIsInN0YXR1cyIsImltYWdlIiwibmV3Q2F0ZWdvcnkiLCJjcmVhdGUiLCJkYXRhIiwiY3JlYXRlZEF0IiwiRGF0ZSIsImNyZWF0ZWRCeSIsImNyZWF0ZWRCeVJvbGUiLCJlcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIiwidXBkYXRlQ2F0ZWdvcnkiLCJjYXRlZ29yeUlkIiwidXBkYXRlZEJ5IiwidXBkYXRlZEF0IiwidXBkYXRlZEJ5Um9sZSIsIm5ld0ltYWdlc0FyciIsInNwbGl0IiwibWFwIiwiaW1nIiwidHJpbSIsImdldENhdGVnb3J5QnlJZCIsImV4aXN0aW5nSW1hZ2VzIiwibWVyZ2VkSW1hZ2VzIiwiQXJyYXkiLCJmcm9tIiwiU2V0Iiwiam9pbiIsInVwZGF0ZSIsImlkIiwicmVtb3ZlQ2F0ZWdvcnlJbWFnZUJ5SW5kZXgiLCJpbWFnZUluZGV4IiwiaW1hZ2VzIiwibGVuZ3RoIiwicmVtb3ZlZEltYWdlIiwic3BsaWNlIiwidXBkYXRlZEltYWdlcyIsInVwZGF0ZWRDYXRlZ29yeSIsImltYWdlRmlsZU5hbWUiLCJiYXNlbmFtZSIsImZpbGVQYXRoIiwicHJvY2VzcyIsImN3ZCIsImZpbGVEZWxldGVkIiwiZ2V0QWxsQ2F0ZWdvcmllcyIsImNhdGVnb3JpZXMiLCJmaW5kTWFueSIsIm9yZGVyQnkiLCJnZXRDYXRlZ29yaWVzQnlTdGF0dXMiLCJ3aGVyZUNvbmRpdGlvbiIsImRlbGV0ZWRBdCIsIm5vdCIsIkVycm9yIiwic29mdERlbGV0ZUNhdGVnb3J5IiwiZGVsZXRlZEJ5IiwiZGVsZXRlZEJ5Um9sZSIsInJlc3RvcmVDYXRlZ29yeSIsInJlc3RvcmVkQ2F0ZWdvcnkiLCJkZWxldGVDYXRlZ29yeSIsImRlbGV0ZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/models/admin/category.ts\n");

/***/ }),

/***/ "(rsc)/./src/app/models/staffPermission.ts":
/*!*******************************************!*\
  !*** ./src/app/models/staffPermission.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkStaffPermissionStatus: () => (/* binding */ checkStaffPermissionStatus),\n/* harmony export */   getStaffPermissions: () => (/* binding */ getStaffPermissions),\n/* harmony export */   getStaffPermissionsByStaffId: () => (/* binding */ getStaffPermissionsByStaffId)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n\nconst serializeBigInt = (obj)=>{\n    if (typeof obj === \"bigint\") return obj.toString();\n    if (obj instanceof Date) return obj;\n    if (Array.isArray(obj)) return obj.map(serializeBigInt);\n    if (obj && typeof obj === \"object\") {\n        return Object.fromEntries(Object.entries(obj).map(([key, value])=>[\n                key,\n                serializeBigInt(value)\n            ]));\n    }\n    return obj;\n};\n// 🔍 Professional: Filter by panel, module, action (any or all)\nconst getStaffPermissions = async (filter = {})=>{\n    try {\n        const staffPermissions = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].adminStaffPermission.findMany({\n            where: {\n                ...filter.panel && {\n                    panel: filter.panel\n                },\n                ...filter.module && {\n                    module: filter.module\n                },\n                ...filter.action && {\n                    action: filter.action\n                }\n            },\n            orderBy: {\n                id: \"desc\"\n            }\n        });\n        return {\n            status: true,\n            staffPermissions: serializeBigInt(staffPermissions)\n        };\n    } catch (error) {\n        console.error(\"❌ getStaffPermissions Error:\", error);\n        return {\n            status: false,\n            message: \"Error fetching staff permissions\"\n        };\n    }\n};\nconst checkStaffPermissionStatus = async (filter = {}, staffId)=>{\n    try {\n        if (!staffId || isNaN(staffId)) {\n            return {\n                status: false,\n                message: \"Invalid staff ID\"\n            };\n        }\n        // Fetch staff permissions based on the provided filter and staff ID\n        if (!filter.panel || !filter.module || !filter.action) {\n            return {\n                status: false,\n                message: \"all of filter must be provided\"\n            };\n        }\n        const isValidPanel = [\n            \"admin\",\n            \"supplier\",\n            \"customer\"\n        ].includes(filter.panel);\n        if (!isValidPanel) {\n            return {\n                status: false,\n                message: \"Invalid panel provided\"\n            };\n        }\n        const staffPermissionsExist = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].adminStaffPermission.findFirst({\n            where: {\n                panel: filter.panel,\n                module: filter.module,\n                action: filter.action\n            }\n        });\n        if (!staffPermissionsExist) {\n            return {\n                status: false,\n                message: \"No permissions found for the given filter\"\n            };\n        }\n        const staffPermissions = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].adminStaffHasPermission.findFirst({\n            where: {\n                adminStaffPermissionId: staffPermissionsExist.id,\n                adminStaffId: staffId\n            },\n            orderBy: {\n                id: \"desc\"\n            }\n        });\n        if (!staffPermissions) {\n            return {\n                status: false,\n                message: \"Action Unauthorized\"\n            };\n        }\n        return {\n            status: true,\n            message: \"Action Authorized\"\n        };\n    } catch (error) {\n        console.error(\"❌ getStaffPermissions Error:\", error);\n        return {\n            status: false,\n            message: \"Error fetching staff permissions\"\n        };\n    }\n};\nconst getStaffPermissionsByStaffId = async (filter = {}, staffId)=>{\n    try {\n        // Validate staff ID\n        if (!staffId || isNaN(staffId)) {\n            return {\n                status: false,\n                message: \"Invalid staff ID\"\n            };\n        }\n        // Validate panel if provided\n        if (filter.panel) {\n            const isValidPanel = [\n                \"admin\",\n                \"supplier\",\n                \"customer\",\n                \"dropshipper\"\n            ].includes(filter.panel);\n            if (!isValidPanel) {\n                return {\n                    status: false,\n                    message: \"Invalid panel provided\"\n                };\n            }\n        }\n        // Fetch permissions matching the filter\n        const matchingPermissions = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].adminStaffPermission.findMany({\n            where: {\n                ...filter.panel && {\n                    panel: filter.panel\n                },\n                ...filter.module && {\n                    module: filter.module\n                },\n                ...filter.action && {\n                    action: filter.action\n                }\n            },\n            orderBy: {\n                id: 'desc'\n            }\n        });\n        if (!matchingPermissions.length) {\n            return {\n                status: false,\n                message: \"No matching permissions found for the given filter\"\n            };\n        }\n        const permissionIds = matchingPermissions.map((p)=>p.id);\n        // Get all permissions assigned to the staff from filtered list\n        const assignedPermissions = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].adminStaffHasPermission.findMany({\n            where: {\n                adminStaffPermissionId: {\n                    in: permissionIds\n                },\n                adminStaffId: staffId\n            },\n            include: {\n                permission: true\n            },\n            orderBy: {\n                id: 'desc'\n            }\n        });\n        if (!assignedPermissions.length) {\n            return {\n                status: false,\n                message: \"No permissions assigned to this staff for the given filter\"\n            };\n        }\n        return {\n            status: true,\n            message: \"Permissions retrieved successfully\",\n            assignedPermissions\n        };\n    } catch (error) {\n        console.error(\"❌ getStaffPermissionsByStaffId Error:\", error);\n        return {\n            status: false,\n            message: \"Error retrieving staff permissions\"\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/models/staffPermission.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _prisma_prisma_generated_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../prisma/prisma/generated/client */ \"(rsc)/./prisma/prisma/generated/client/index.js\");\n/* harmony import */ var _prisma_prisma_generated_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_prisma_generated_client__WEBPACK_IMPORTED_MODULE_0__);\n // Adjust the import path as necessary\nconst prisma = new _prisma_prisma_generated_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nasync function connectToDatabase() {\n    try {\n        // Attempt to connect to the database\n        await prisma.$connect();\n        console.log(\"Database connection established successfully.\");\n    } catch (error) {\n        // If connection fails, log the error\n        console.error(\"Database connection failed:\", error);\n        // Avoid using process.exit in Edge Runtime\n        // Instead, you can throw an error to be handled by the calling code\n        throw new Error(\"Database connection failed\");\n    }\n}\nconnectToDatabase().catch((error)=>{\n    // Handle any unhandled promise rejections here, if necessary\n    console.error(error);\n// You can choose to return a response or perform other actions instead of exiting\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0UsQ0FBQyxzQ0FBc0M7QUFFM0csTUFBTUMsU0FBUyxJQUFJRCx5RUFBWUE7QUFFL0IsZUFBZUU7SUFDWCxJQUFJO1FBQ0EscUNBQXFDO1FBQ3JDLE1BQU1ELE9BQU9FLFFBQVE7UUFDckJDLFFBQVFDLEdBQUcsQ0FBQztJQUNoQixFQUFFLE9BQU9DLE9BQU87UUFDWixxQ0FBcUM7UUFDckNGLFFBQVFFLEtBQUssQ0FBQywrQkFBK0JBO1FBQzdDLDJDQUEyQztRQUMzQyxvRUFBb0U7UUFDcEUsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0FBQ0o7QUFFQUwsb0JBQW9CTSxLQUFLLENBQUMsQ0FBQ0Y7SUFDdkIsNkRBQTZEO0lBQzdERixRQUFRRSxLQUFLLENBQUNBO0FBQ2Qsa0ZBQWtGO0FBQ3RGO0FBRUEsaUVBQWVMLE1BQU1BLEVBQUMiLCJzb3VyY2VzIjpbIkQ6XFxXZWJzdGVwMlxcc2hpcG93bC1tZXJnZVxcc3JjXFxsaWJcXHByaXNtYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tIFwiLi4vLi4vcHJpc21hL3ByaXNtYS9nZW5lcmF0ZWQvY2xpZW50XCI7IC8vIEFkanVzdCB0aGUgaW1wb3J0IHBhdGggYXMgbmVjZXNzYXJ5XHJcblxyXG5jb25zdCBwcmlzbWEgPSBuZXcgUHJpc21hQ2xpZW50KCk7XHJcblxyXG5hc3luYyBmdW5jdGlvbiBjb25uZWN0VG9EYXRhYmFzZSgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy8gQXR0ZW1wdCB0byBjb25uZWN0IHRvIHRoZSBkYXRhYmFzZVxyXG4gICAgICAgIGF3YWl0IHByaXNtYS4kY29ubmVjdCgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiRGF0YWJhc2UgY29ubmVjdGlvbiBlc3RhYmxpc2hlZCBzdWNjZXNzZnVsbHkuXCIpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAvLyBJZiBjb25uZWN0aW9uIGZhaWxzLCBsb2cgdGhlIGVycm9yXHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkRhdGFiYXNlIGNvbm5lY3Rpb24gZmFpbGVkOlwiLCBlcnJvcik7XHJcbiAgICAgICAgLy8gQXZvaWQgdXNpbmcgcHJvY2Vzcy5leGl0IGluIEVkZ2UgUnVudGltZVxyXG4gICAgICAgIC8vIEluc3RlYWQsIHlvdSBjYW4gdGhyb3cgYW4gZXJyb3IgdG8gYmUgaGFuZGxlZCBieSB0aGUgY2FsbGluZyBjb2RlXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWRcIik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbm5lY3RUb0RhdGFiYXNlKCkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAvLyBIYW5kbGUgYW55IHVuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbnMgaGVyZSwgaWYgbmVjZXNzYXJ5XHJcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgIC8vIFlvdSBjYW4gY2hvb3NlIHRvIHJldHVybiBhIHJlc3BvbnNlIG9yIHBlcmZvcm0gb3RoZXIgYWN0aW9ucyBpbnN0ZWFkIG9mIGV4aXRpbmdcclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcmlzbWE7XHJcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJwcmlzbWEiLCJjb25uZWN0VG9EYXRhYmFzZSIsIiRjb25uZWN0IiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiRXJyb3IiLCJjYXRjaCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/auth/authUtils.ts":
/*!*************************************!*\
  !*** ./src/utils/auth/authUtils.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generatePasswordResetToken: () => (/* binding */ generatePasswordResetToken),\n/* harmony export */   generateRegistrationToken: () => (/* binding */ generateRegistrationToken),\n/* harmony export */   generateToken: () => (/* binding */ generateToken),\n/* harmony export */   isUserExist: () => (/* binding */ isUserExist),\n/* harmony export */   verifyToken: () => (/* binding */ verifyToken)\n/* harmony export */ });\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/jwt/verify.js\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n\n\n\nconst SECRET_KEY = process.env.JWT_SECRET || '3792e68ef011e0f236a60627ddf304e1bb64d76d5e4dbebca4579490d3c4e6d8c618456f29aa6f92f8dc3cbd4414362b47d4545ffdc0b9549e43b629c39282bb36b9cff7295fc4269d765d59e4d8a811113b911080878f7647e0329a072afdc06d2ecd658c8e79f2ad04e74dbffc45ed10c850b02afdf10b209989910fadaf7ddbef0bb7d0cff27ed8f4a10d3415420107ddba2d9ac8bcf4f7b3b942b5bbe600d9007f9e88b2451cbfaeaab239677b3ed28eaa860eb40fd5d0e36969b6943a3215d2a9f1125ca06be806f8d73d8ae642c4a29b3a728cf42305e1150e4c1f3ed6e14bd3662531cd14357c6b3f3a57095609811f5e9459307cbe70f9b7a159c8d3';\nfunction generateToken(adminId, adminRole) {\n    console.log(`adminId: ${adminId}, adminRole: ${adminRole}`);\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().sign({\n        adminId,\n        adminRole\n    }, SECRET_KEY, {\n        expiresIn: '3h'\n    });\n}\nfunction generatePasswordResetToken(adminId, adminRole) {\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().sign({\n        adminId,\n        adminRole\n    }, SECRET_KEY, {\n        expiresIn: '1h'\n    });\n}\nfunction generateRegistrationToken(adminId, adminRole) {\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().sign({\n        adminId,\n        adminRole\n    }, SECRET_KEY, {\n        expiresIn: '1h'\n    });\n}\nasync function verifyToken(token) {\n    try {\n        const { payload } = await (0,jose__WEBPACK_IMPORTED_MODULE_2__.jwtVerify)(token, new TextEncoder().encode(SECRET_KEY));\n        return {\n            payload,\n            status: true,\n            message: \"Token is valid\"\n        };\n    } catch (error) {\n        let message = \"Authentication failed. Please try again.\";\n        if (typeof error === \"object\" && error !== null && \"code\" in error) {\n            const err = error;\n            if (err.code === 'ERR_JWT_EXPIRED') {\n                message = \"Session expired. Please log in again.\";\n            }\n        }\n        return {\n            payload: null,\n            status: false,\n            message\n        };\n    }\n}\n// Check if admin exists in the database\nasync function isUserExist(adminId, adminRole) {\n    try {\n        const adminRoleStr = String(adminRole); // Ensure it's a string\n        const adminModel = [\n            \"admin\",\n            \"dropshipper\",\n            \"supplier\"\n        ].includes(adminRoleStr) ? \"admin\" : \"adminStaff\";\n        // Fetch admin details from database\n        let admin;\n        if (adminModel === \"admin\") {\n            admin = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__[\"default\"].admin.findUnique({\n                where: {\n                    id: adminId,\n                    role: adminRoleStr\n                },\n                select: {\n                    id: true,\n                    name: true,\n                    email: true,\n                    password: true,\n                    role: true\n                }\n            });\n        } else {\n            admin = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__[\"default\"].adminStaff.findUnique({\n                where: {\n                    id: adminId,\n                    role: adminRoleStr\n                },\n                select: {\n                    id: true,\n                    name: true,\n                    email: true,\n                    password: true,\n                    role: true,\n                    admin: true\n                }\n            });\n        }\n        // If admin doesn't exist, return false with a message\n        if (!admin) {\n            return {\n                status: false,\n                message: \"User with the provided ID does not exist\"\n            };\n        }\n        // Return admin details if found\n        return {\n            status: true,\n            admin\n        };\n    } catch (error) {\n        console.error(\"Error fetching admin by ID:\", error);\n        return {\n            status: false,\n            message: \"Internal Server Error\"\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/auth/authUtils.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/commonUtils.ts":
/*!**********************************!*\
  !*** ./src/utils/commonUtils.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActivityLog: () => (/* binding */ ActivityLog),\n/* harmony export */   fetchLogInfo: () => (/* binding */ fetchLogInfo),\n/* harmony export */   formatDate: () => (/* binding */ formatDate),\n/* harmony export */   logMessage: () => (/* binding */ logMessage)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ua-parser-js */ \"(rsc)/./node_modules/ua-parser-js/src/main/ua-parser.mjs\");\n\n\nasync function logMessage(type, message, item) {\n    try {\n        const isDev = process.env.DEBUG === 'true' || \"development\" === 'development';\n        if (!isDev) return;\n        const logWithMessage = (logFn, prefix = '')=>{\n            if (item !== undefined) {\n                logFn(`${prefix}${message}`, item);\n            } else {\n                logFn(`${prefix}${message}`);\n            }\n        };\n        switch(type.toLowerCase()){\n            case 'error':\n                logWithMessage(console.error, '❌ ');\n                break;\n            case 'warn':\n                logWithMessage(console.warn, '⚠️ ');\n                break;\n            case 'info':\n                logWithMessage(console.info, 'ℹ️ ');\n                break;\n            case 'debug':\n                logWithMessage(console.debug, '🔍 ');\n                break;\n            case 'log':\n                logWithMessage(console.log);\n                break;\n            case 'trace':\n                logWithMessage(console.trace, '🔍 ');\n                break;\n            case 'table':\n                if (item !== undefined) console.table(item);\n                break;\n            case 'group':\n                console.group(message);\n                break;\n            case 'groupend':\n                console.groupEnd();\n                break;\n            default:\n                logWithMessage(console.log, '📌 ');\n                break;\n        }\n    } catch (error) {\n        console.error('❌ Error in logMessage:', error);\n    }\n}\nasync function ActivityLog(params) {\n    try {\n        const { adminId, adminRole, module, action, endpoint, method, payload, response, result, data, ipv4, ipv6, internetServiceProvider, clientInformation, userAgent } = params;\n        // Save the activity log to the database\n        const activityLog = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].activityLog.create({\n            data: {\n                adminId,\n                adminRole,\n                module,\n                action,\n                endpoint,\n                method,\n                payload: JSON.stringify(payload),\n                response: JSON.stringify(response),\n                result,\n                data: data ? JSON.stringify(data) : null,\n                ipv4,\n                ipv6,\n                internetServiceProvider,\n                clientInformation,\n                userAgent\n            }\n        });\n        console.info('Activity Log saved successfully:', activityLog);\n    } catch (error) {\n        console.error('❌ Error saving activity log:', error);\n    }\n}\nasync function fetchLogInfo(module, action, req) {\n    try {\n        // Get the IP address from the 'x-forwarded-for' header or fallback to 'host' header\n        const forwardedFor = req.headers.get('x-forwarded-for');\n        const ipAddress = forwardedFor ? forwardedFor.split(',')[0] : req.headers.get('host');\n        // Construct the full URL\n        const protocol = req.headers.get('x-forwarded-proto') || 'http'; // Default to 'http' if missing\n        const host = req.headers.get('host'); // Get host from headers\n        const url = `${protocol}://${host}${req.nextUrl.pathname}${req.nextUrl.search || ''}`; // Build complete URL\n        // Get the HTTP method and the payload if applicable (POST, PUT, PATCH)\n        const method = req.method;\n        let payload = null;\n        if ([\n            'POST',\n            'PUT',\n            'PATCH'\n        ].includes(method)) {\n            try {\n                payload = await req.json(); // Parse JSON payload\n            } catch (error) {\n                console.error('❌ Error parsing request body:', error);\n            }\n        }\n        // Parse the User-Agent string for client details\n        const userAgent = req.headers.get('user-agent') || 'Unknown';\n        const parser = new ua_parser_js__WEBPACK_IMPORTED_MODULE_1__.UAParser(userAgent);\n        const clientInfo = parser.getResult();\n        // Extract browser, OS, and device details\n        const { browser, os, device } = clientInfo;\n        const browserName = browser.name || 'Unknown Browser';\n        const browserVersion = browser.version || 'Unknown Version';\n        const osName = os.name || 'Unknown OS';\n        const osVersion = os.version || 'Unknown OS Version';\n        const deviceType = device.type || 'Unknown Device';\n        // Log the gathered information\n        const logInfo = {\n            module,\n            action,\n            url,\n            method,\n            payload,\n            response: true,\n            result: [],\n            data: [],\n            ipAddress,\n            clientInfo: {\n                browser: browserName,\n                browserVersion,\n                os: osName,\n                osVersion,\n                device: deviceType\n            },\n            userAgent\n        };\n        // Example of logging the activity info\n        logMessage('info', `Activity log Info:`, logInfo);\n    } catch (error) {\n        console.error('❌ Error saving activity log:', error);\n    }\n}\n/**\r\n * Formats a given date string or Date object into a specified format.\r\n * Returns null if the input is not a valid date.\r\n *\r\n * Supported Tokens:\r\n * - DD     : Day (2 digits)\r\n * - D      : Day (1-2 digits)\r\n * - MMM    : Abbreviated month name (e.g., Jan)\r\n * - MMMM   : Full month name (e.g., January)\r\n * - MM     : Month (2 digits)\r\n * - M      : Month (1-2 digits)\r\n * - YYYY   : Full year\r\n * - HH     : Hours (00-23)\r\n * - mm     : Minutes (00-59)\r\n * - ss     : Seconds (00-59)\r\n *\r\n * @param input - A date input as string, Date object, or null\r\n * @param format - Desired output format string\r\n * @returns Formatted date string or null if invalid\r\n */ function formatDate(input, format = \"DD-MM-YYYY\") {\n    if (!input) return null;\n    const date = typeof input === \"string\" ? new Date(input) : input;\n    if (!(date instanceof Date) || isNaN(date.getTime())) {\n        return null;\n    }\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const seconds = date.getSeconds();\n    const dayStr = String(day).padStart(2, '0');\n    const monthStr = String(month + 1).padStart(2, '0');\n    const hourStr = String(hours).padStart(2, '0');\n    const minuteStr = String(minutes).padStart(2, '0');\n    const secondStr = String(seconds).padStart(2, '0');\n    const MONTH_NAMES_SHORT = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec'\n    ];\n    const MONTH_NAMES_FULL = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December'\n    ];\n    return format.replace(/DD/g, dayStr).replace(/D/g, String(day)).replace(/MMMM/g, MONTH_NAMES_FULL[month]).replace(/MMM/g, MONTH_NAMES_SHORT[month]).replace(/MM/g, monthStr).replace(/M/g, String(month + 1)).replace(/YYYY/g, String(year)).replace(/HH/g, hourStr).replace(/mm/g, minuteStr).replace(/ss/g, secondStr);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/commonUtils.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/saveFiles.ts":
/*!********************************!*\
  !*** ./src/utils/saveFiles.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteFile: () => (/* binding */ deleteFile),\n/* harmony export */   saveFilesFromFormData: () => (/* binding */ saveFilesFromFormData)\n/* harmony export */ });\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var basic_ftp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! basic-ftp */ \"(rsc)/./node_modules/basic-ftp/dist/index.js\");\n/* harmony import */ var basic_ftp__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(basic_ftp__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _commonUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonUtils */ \"(rsc)/./src/utils/commonUtils.ts\");\n\n\n\n\n\n// Load from env or replace with your actual values\nconst ftpConfig = {\n    host: process.env.FTP_HOST || 'ftp.example.com',\n    user: process.env.FTP_USER || 'ftpuser',\n    password: process.env.FTP_PASSWORD || 'ftppassword',\n    secure: false,\n    remoteDir: '',\n    publicUrlBase: process.env.FTP_FILE_HOST || 'https://cdn.example.com/uploads'\n};\n// Helper: ensure directory exists\nasync function ensureDir(dirPath) {\n    if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(dirPath)) {\n        (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '📁 Directory not found. Creating:', dirPath);\n        await (0,fs_promises__WEBPACK_IMPORTED_MODULE_0__.mkdir)(dirPath, {\n            recursive: true\n        });\n    } else {\n        (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '✅ Directory already exists:', dirPath);\n    }\n}\n// Helper: generate file name\nfunction generateFileName(originalName, pattern, customName) {\n    const ext = path__WEBPACK_IMPORTED_MODULE_1___default().extname(originalName);\n    const base = path__WEBPACK_IMPORTED_MODULE_1___default().basename(originalName, ext);\n    switch(pattern){\n        case 'original':\n            (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '📝 Using original filename:', originalName);\n            return originalName;\n        case 'custom':\n            const name = `${customName}${ext}`;\n            (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '📝 Using custom filename:', name);\n            return name;\n        case 'slug':\n            const slug = base.toLowerCase().replace(/[^a-z0-9]/g, '-');\n            const slugName = `${slug}${ext}`;\n            (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '📝 Using slug filename:', slugName);\n            return slugName;\n        case 'slug-unique':\n            const unique = `${base.toLowerCase().replace(/[^a-z0-9]/g, '-')}-${Date.now()}`;\n            const slugUniqueName = `${unique}${ext}`;\n            (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '📝 Using slug-unique filename:', slugUniqueName);\n            return slugUniqueName;\n        default:\n            return originalName;\n    }\n}\n// Upload file to FTP\nasync function uploadToFTP(localPath, remoteFileName) {\n    const client = new basic_ftp__WEBPACK_IMPORTED_MODULE_3__.Client();\n    try {\n        (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '🚀 Connecting to FTP...');\n        await client.access({\n            host: ftpConfig.host,\n            user: ftpConfig.user,\n            password: ftpConfig.password,\n            secure: ftpConfig.secure || false\n        });\n        (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '✅ FTP connection established');\n        const relativePath = localPath.split(/uploads[\\\\/]/)[1]?.replace(/\\\\/g, '/') || '';\n        const dirPath = relativePath.replace(new RegExp(`${remoteFileName}$`), '').replace(/\\/+$/, '');\n        (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '📦 Local file path:', localPath);\n        (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', `📁 Relative path after 'uploads':`, relativePath);\n        (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '📂 Nested FTP directory to ensure:', dirPath);\n        // Go to root\n        await client.cd('/');\n        (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', \"📍 Changed to FTP root '/'\");\n        // If remoteDir is set, change to it or create it\n        if (ftpConfig.remoteDir) {\n            const baseFolders = ftpConfig.remoteDir.split('/').filter(Boolean);\n            for (const folder of baseFolders){\n                try {\n                    await client.cd(folder);\n                } catch  {\n                    await client.send(`MKD ${folder}`);\n                    await client.cd(folder);\n                }\n            }\n        }\n        // Manually create nested directories\n        const dirParts = dirPath.split('/').filter(Boolean);\n        for (const folder of dirParts){\n            try {\n                (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '➡️ Ensuring nested folder:', folder);\n                await client.cd(folder); // Try to enter\n            } catch  {\n                (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '📁 Creating missing folder:', folder);\n                await client.send(`MKD ${folder}`);\n                await client.cd(folder);\n            }\n        }\n        // Upload the file\n        (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '📤 Uploading file:', remoteFileName);\n        await client.uploadFrom(localPath, remoteFileName);\n        (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '✅ Successfully uploaded:', remoteFileName);\n        await client.close();\n        const publicUrl = `${ftpConfig.publicUrlBase}/${dirPath ? dirPath + '/' : ''}${remoteFileName}`;\n        (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '🔗 Public file URL:', publicUrl);\n        return publicUrl;\n    } catch (err) {\n        console.error(`❌ FTP upload failed:`, err);\n        await client.close();\n        return null;\n    }\n}\nasync function saveFilesFromFormData(formData, fieldName, options) {\n    const { dir, pattern, customName, multiple = false } = options;\n    (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '🚀 Starting file save from field: ', fieldName);\n    await ensureDir(dir);\n    let result = multiple ? [] : null;\n    const files = formData.getAll(fieldName).filter((item)=>item instanceof File && item.name.length > 0);\n    (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', '📦 Total files to process: ', files.length);\n    for(let index = 0; index < files.length; index++){\n        const file = files[index];\n        const nameToUse = pattern === 'custom' && multiple ? `${customName}-${index + 1}` : pattern === 'custom' ? customName : file.name;\n        const finalFileName = generateFileName(nameToUse, pattern, nameToUse);\n        const bytes = await file.arrayBuffer();\n        const buffer = Buffer.from(bytes);\n        const fullPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(dir, finalFileName);\n        await (0,fs_promises__WEBPACK_IMPORTED_MODULE_0__.writeFile)(fullPath, buffer);\n        (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('log', 'fullPath - ', fullPath);\n        // Upload to FTP\n        const ftpUrl = await uploadToFTP(fullPath, finalFileName);\n        const info = {\n            originalName: file.name,\n            savedAs: finalFileName,\n            size: file.size,\n            type: file.type,\n            url: ftpUrl || `/uploads/fallback/${finalFileName}`\n        };\n        if (multiple && Array.isArray(result)) {\n            result.push(info);\n        } else {\n            result = info;\n        }\n    // Optional: delete local file after FTP upload\n    // await unlink(fullPath);\n    /*\r\n            const publicIndex = fullPath.indexOf('public');\r\n            const fileUrl = publicIndex !== -1\r\n                ? fullPath.split('public')[1].replace(/\\\\/g, '/')\r\n                : fullPath;\r\n\r\n            const info: UploadedFileInfo = {\r\n                originalName: file.name,\r\n                savedAs: finalFileName,\r\n                size: file.size,\r\n                type: file.type,\r\n                url: `${fileUrl}`,\r\n            };\r\n\r\n            if (multiple && Array.isArray(result)) {\r\n                result.push(info);\r\n            } else {\r\n                result = info;\r\n            }\r\n        */ }\n    return result;\n}\n/**\r\n * Deletes a file from the file system\r\n * @param filePath Absolute path to the file\r\n * @returns A boolean indicating if the file was deleted successfully\r\n */ async function deleteFile(filePath) {\n    try {\n        await (0,fs_promises__WEBPACK_IMPORTED_MODULE_0__.stat)(filePath); // Throws if file doesn't exist\n        await (0,fs_promises__WEBPACK_IMPORTED_MODULE_0__.unlink)(filePath);\n        return true;\n    } catch (error) {\n        (0,_commonUtils__WEBPACK_IMPORTED_MODULE_4__.logMessage)('error', `File not found or couldn't be deleted: ${filePath}`, error);\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/saveFiles.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/validateFormData.ts":
/*!***************************************!*\
  !*** ./src/utils/validateFormData.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateFormData: () => (/* binding */ validateFormData)\n/* harmony export */ });\nfunction toReadableFieldName(field) {\n    // Converts camelCase or snake_case to Title Case\n    return field.replace(/_/g, ' ').replace(/([a-z])([A-Z])/g, '$1 $2').replace(/\\b\\w/g, (char)=>char.toUpperCase());\n}\nfunction validateFormData(formData, { requiredFields = [], patternValidations = {}, fileExtensionValidations = {} }) {\n    const error = {};\n    // Required fields\n    for (const field of requiredFields){\n        const value = formData.get(field);\n        if (value === null || value === '' || typeof value === 'string' && value.trim() === '') {\n            error[field] = `${toReadableFieldName(field)} is required`;\n        }\n    }\n    // Pattern validations\n    for (const [field, expectedType] of Object.entries(patternValidations)){\n        const value = formData.get(field);\n        if (value !== null) {\n            const val = typeof value === 'string' ? value.trim() : value;\n            const isInvalidNumber = expectedType === 'number' && isNaN(Number(val));\n            const isInvalidBoolean = expectedType === 'boolean' && ![\n                'true',\n                'false',\n                '1',\n                '0',\n                true,\n                false,\n                1,\n                0,\n                'active',\n                'inactive'\n            ].includes(val.toString().toLowerCase());\n            if (isInvalidNumber || isInvalidBoolean) {\n                error[field] = `${toReadableFieldName(field)} must be a valid ${expectedType}`;\n            }\n        }\n    }\n    // File extension validations\n    for (const [field, allowedExtensions] of Object.entries(fileExtensionValidations)){\n        const file = formData.get(field);\n        if (file instanceof File) {\n            const fileName = file.name.toLowerCase();\n            const fileExtension = fileName.split('.').pop() || '';\n            if (!allowedExtensions.map((ext)=>ext.toLowerCase()).includes(fileExtension)) {\n                error[field] = `${toReadableFieldName(field)} must be one of the following file types: ${allowedExtensions.join(', ')}`;\n            }\n        } else if (file !== null) {\n            error[field] = `${toReadableFieldName(field)} must be a valid file`;\n        }\n    }\n    const errorCount = Object.keys(error).length;\n    return {\n        isValid: errorCount === 0,\n        ...errorCount > 0 && {\n            error\n        },\n        message: errorCount === 0 ? 'Form submitted successfully.' : `Form has ${errorCount} error${errorCount > 1 ? 's' : ''}. Please correct and try again.`\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvdXRpbHMvdmFsaWRhdGVGb3JtRGF0YS50cyIsIm1hcHBpbmdzIjoiOzs7O0FBWUEsU0FBU0Esb0JBQW9CQyxLQUFhO0lBQ3RDLGlEQUFpRDtJQUNqRCxPQUFPQSxNQUNGQyxPQUFPLENBQUMsTUFBTSxLQUNkQSxPQUFPLENBQUMsbUJBQW1CLFNBQzNCQSxPQUFPLENBQUMsU0FBU0MsQ0FBQUEsT0FBUUEsS0FBS0MsV0FBVztBQUNsRDtBQUVPLFNBQVNDLGlCQUNaQyxRQUFrQixFQUNsQixFQUNJQyxpQkFBaUIsRUFBRSxFQUNuQkMscUJBQXFCLENBQUMsQ0FBQyxFQUN2QkMsMkJBQTJCLENBQUMsQ0FBQyxFQUNiO0lBRXBCLE1BQU1DLFFBQWdDLENBQUM7SUFFdkMsa0JBQWtCO0lBQ2xCLEtBQUssTUFBTVQsU0FBU00sZUFBZ0I7UUFDaEMsTUFBTUksUUFBUUwsU0FBU00sR0FBRyxDQUFDWDtRQUMzQixJQUFJVSxVQUFVLFFBQVFBLFVBQVUsTUFBTyxPQUFPQSxVQUFVLFlBQVlBLE1BQU1FLElBQUksT0FBTyxJQUFLO1lBQ3RGSCxLQUFLLENBQUNULE1BQU0sR0FBRyxHQUFHRCxvQkFBb0JDLE9BQU8sWUFBWSxDQUFDO1FBQzlEO0lBQ0o7SUFFQSxzQkFBc0I7SUFDdEIsS0FBSyxNQUFNLENBQUNBLE9BQU9hLGFBQWEsSUFBSUMsT0FBT0MsT0FBTyxDQUFDUixvQkFBcUI7UUFDcEUsTUFBTUcsUUFBUUwsU0FBU00sR0FBRyxDQUFDWDtRQUMzQixJQUFJVSxVQUFVLE1BQU07WUFDaEIsTUFBTU0sTUFBTSxPQUFPTixVQUFVLFdBQVdBLE1BQU1FLElBQUksS0FBS0Y7WUFFdkQsTUFBTU8sa0JBQWtCSixpQkFBaUIsWUFBWUssTUFBTUMsT0FBT0g7WUFDbEUsTUFBTUksbUJBQ0ZQLGlCQUFpQixhQUNqQixDQUFDO2dCQUFDO2dCQUFRO2dCQUFTO2dCQUFLO2dCQUFLO2dCQUFNO2dCQUFPO2dCQUFHO2dCQUFHO2dCQUFVO2FBQVcsQ0FBQ1EsUUFBUSxDQUFDTCxJQUFJTSxRQUFRLEdBQUdDLFdBQVc7WUFFN0csSUFBSU4sbUJBQW1CRyxrQkFBa0I7Z0JBQ3JDWCxLQUFLLENBQUNULE1BQU0sR0FBRyxHQUFHRCxvQkFBb0JDLE9BQU8saUJBQWlCLEVBQUVhLGNBQWM7WUFDbEY7UUFDSjtJQUNKO0lBRUEsNkJBQTZCO0lBQzdCLEtBQUssTUFBTSxDQUFDYixPQUFPd0Isa0JBQWtCLElBQUlWLE9BQU9DLE9BQU8sQ0FBQ1AsMEJBQW1EO1FBQ3ZHLE1BQU1pQixPQUFPcEIsU0FBU00sR0FBRyxDQUFDWDtRQUMxQixJQUFJeUIsZ0JBQWdCQyxNQUFNO1lBQ3RCLE1BQU1DLFdBQVdGLEtBQUtHLElBQUksQ0FBQ0wsV0FBVztZQUN0QyxNQUFNTSxnQkFBZ0JGLFNBQVNHLEtBQUssQ0FBQyxLQUFLQyxHQUFHLE1BQU07WUFDbkQsSUFBSSxDQUFDUCxrQkFBa0JRLEdBQUcsQ0FBQ0MsQ0FBQUEsTUFBT0EsSUFBSVYsV0FBVyxJQUFJRixRQUFRLENBQUNRLGdCQUFnQjtnQkFDMUVwQixLQUFLLENBQUNULE1BQU0sR0FBRyxHQUFHRCxvQkFBb0JDLE9BQU8sMENBQTBDLEVBQUV3QixrQkFBa0JVLElBQUksQ0FBQyxPQUFPO1lBQzNIO1FBQ0osT0FBTyxJQUFJVCxTQUFTLE1BQU07WUFDdEJoQixLQUFLLENBQUNULE1BQU0sR0FBRyxHQUFHRCxvQkFBb0JDLE9BQU8scUJBQXFCLENBQUM7UUFDdkU7SUFDSjtJQUVBLE1BQU1tQyxhQUFhckIsT0FBT3NCLElBQUksQ0FBQzNCLE9BQU80QixNQUFNO0lBRTVDLE9BQU87UUFDSEMsU0FBU0gsZUFBZTtRQUN4QixHQUFJQSxhQUFhLEtBQUs7WUFBRTFCO1FBQU0sQ0FBQztRQUMvQjhCLFNBQ0lKLGVBQWUsSUFDVCxpQ0FDQSxDQUFDLFNBQVMsRUFBRUEsV0FBVyxNQUFNLEVBQUVBLGFBQWEsSUFBSSxNQUFNLEdBQUcsK0JBQStCLENBQUM7SUFDdkc7QUFDSiIsInNvdXJjZXMiOlsiRDpcXFdlYnN0ZXAyXFxzaGlwb3dsLW1lcmdlXFxzcmNcXHV0aWxzXFx2YWxpZGF0ZUZvcm1EYXRhLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImludGVyZmFjZSBWYWxpZGF0aW9uT3B0aW9ucyB7XHJcbiAgICByZXF1aXJlZEZpZWxkcz86IHN0cmluZ1tdO1xyXG4gICAgcGF0dGVyblZhbGlkYXRpb25zPzogUmVjb3JkPHN0cmluZywgJ3N0cmluZycgfCAnbnVtYmVyJyB8ICdib29sZWFuJz47XHJcbiAgICBmaWxlRXh0ZW5zaW9uVmFsaWRhdGlvbnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmdbXT47XHJcbn1cclxuXHJcbmludGVyZmFjZSBWYWxpZGF0aW9uUmVzdWx0IHtcclxuICAgIGlzVmFsaWQ6IGJvb2xlYW47XHJcbiAgICBlcnJvcj86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XHJcbiAgICBtZXNzYWdlOiBzdHJpbmc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvUmVhZGFibGVGaWVsZE5hbWUoZmllbGQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAvLyBDb252ZXJ0cyBjYW1lbENhc2Ugb3Igc25ha2VfY2FzZSB0byBUaXRsZSBDYXNlXHJcbiAgICByZXR1cm4gZmllbGRcclxuICAgICAgICAucmVwbGFjZSgvXy9nLCAnICcpXHJcbiAgICAgICAgLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csICckMSAkMicpXHJcbiAgICAgICAgLnJlcGxhY2UoL1xcYlxcdy9nLCBjaGFyID0+IGNoYXIudG9VcHBlckNhc2UoKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1EYXRhKFxyXG4gICAgZm9ybURhdGE6IEZvcm1EYXRhLFxyXG4gICAge1xyXG4gICAgICAgIHJlcXVpcmVkRmllbGRzID0gW10sXHJcbiAgICAgICAgcGF0dGVyblZhbGlkYXRpb25zID0ge30sXHJcbiAgICAgICAgZmlsZUV4dGVuc2lvblZhbGlkYXRpb25zID0ge31cclxuICAgIH06IFZhbGlkYXRpb25PcHRpb25zXHJcbik6IFZhbGlkYXRpb25SZXN1bHQge1xyXG4gICAgY29uc3QgZXJyb3I6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcclxuXHJcbiAgICAvLyBSZXF1aXJlZCBmaWVsZHNcclxuICAgIGZvciAoY29uc3QgZmllbGQgb2YgcmVxdWlyZWRGaWVsZHMpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGZvcm1EYXRhLmdldChmaWVsZCk7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSAnJyB8fCAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS50cmltKCkgPT09ICcnKSkge1xyXG4gICAgICAgICAgICBlcnJvcltmaWVsZF0gPSBgJHt0b1JlYWRhYmxlRmllbGROYW1lKGZpZWxkKX0gaXMgcmVxdWlyZWRgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBQYXR0ZXJuIHZhbGlkYXRpb25zXHJcbiAgICBmb3IgKGNvbnN0IFtmaWVsZCwgZXhwZWN0ZWRUeXBlXSBvZiBPYmplY3QuZW50cmllcyhwYXR0ZXJuVmFsaWRhdGlvbnMpKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBmb3JtRGF0YS5nZXQoZmllbGQpO1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCB2YWwgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpc0ludmFsaWROdW1iZXIgPSBleHBlY3RlZFR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKE51bWJlcih2YWwpKTtcclxuICAgICAgICAgICAgY29uc3QgaXNJbnZhbGlkQm9vbGVhbiA9XHJcbiAgICAgICAgICAgICAgICBleHBlY3RlZFR5cGUgPT09ICdib29sZWFuJyAmJlxyXG4gICAgICAgICAgICAgICAgIVsndHJ1ZScsICdmYWxzZScsICcxJywgJzAnLCB0cnVlLCBmYWxzZSwgMSwgMCwgJ2FjdGl2ZScsICdpbmFjdGl2ZSddLmluY2x1ZGVzKHZhbC50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlzSW52YWxpZE51bWJlciB8fCBpc0ludmFsaWRCb29sZWFuKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvcltmaWVsZF0gPSBgJHt0b1JlYWRhYmxlRmllbGROYW1lKGZpZWxkKX0gbXVzdCBiZSBhIHZhbGlkICR7ZXhwZWN0ZWRUeXBlfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRmlsZSBleHRlbnNpb24gdmFsaWRhdGlvbnNcclxuICAgIGZvciAoY29uc3QgW2ZpZWxkLCBhbGxvd2VkRXh0ZW5zaW9uc10gb2YgT2JqZWN0LmVudHJpZXMoZmlsZUV4dGVuc2lvblZhbGlkYXRpb25zKSBhcyBbc3RyaW5nLCBzdHJpbmdbXV1bXSkge1xyXG4gICAgICAgIGNvbnN0IGZpbGUgPSBmb3JtRGF0YS5nZXQoZmllbGQpO1xyXG4gICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgRmlsZSkge1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlTmFtZSA9IGZpbGUubmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlRXh0ZW5zaW9uID0gZmlsZU5hbWUuc3BsaXQoJy4nKS5wb3AoKSB8fCAnJztcclxuICAgICAgICAgICAgaWYgKCFhbGxvd2VkRXh0ZW5zaW9ucy5tYXAoZXh0ID0+IGV4dC50b0xvd2VyQ2FzZSgpKS5pbmNsdWRlcyhmaWxlRXh0ZW5zaW9uKSkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JbZmllbGRdID0gYCR7dG9SZWFkYWJsZUZpZWxkTmFtZShmaWVsZCl9IG11c3QgYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgZmlsZSB0eXBlczogJHthbGxvd2VkRXh0ZW5zaW9ucy5qb2luKCcsICcpfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGZpbGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgZXJyb3JbZmllbGRdID0gYCR7dG9SZWFkYWJsZUZpZWxkTmFtZShmaWVsZCl9IG11c3QgYmUgYSB2YWxpZCBmaWxlYDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZXJyb3JDb3VudCA9IE9iamVjdC5rZXlzKGVycm9yKS5sZW5ndGg7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpc1ZhbGlkOiBlcnJvckNvdW50ID09PSAwLFxyXG4gICAgICAgIC4uLihlcnJvckNvdW50ID4gMCAmJiB7IGVycm9yIH0pLFxyXG4gICAgICAgIG1lc3NhZ2U6XHJcbiAgICAgICAgICAgIGVycm9yQ291bnQgPT09IDBcclxuICAgICAgICAgICAgICAgID8gJ0Zvcm0gc3VibWl0dGVkIHN1Y2Nlc3NmdWxseS4nXHJcbiAgICAgICAgICAgICAgICA6IGBGb3JtIGhhcyAke2Vycm9yQ291bnR9IGVycm9yJHtlcnJvckNvdW50ID4gMSA/ICdzJyA6ICcnfS4gUGxlYXNlIGNvcnJlY3QgYW5kIHRyeSBhZ2Fpbi5gLFxyXG4gICAgfTtcclxufSJdLCJuYW1lcyI6WyJ0b1JlYWRhYmxlRmllbGROYW1lIiwiZmllbGQiLCJyZXBsYWNlIiwiY2hhciIsInRvVXBwZXJDYXNlIiwidmFsaWRhdGVGb3JtRGF0YSIsImZvcm1EYXRhIiwicmVxdWlyZWRGaWVsZHMiLCJwYXR0ZXJuVmFsaWRhdGlvbnMiLCJmaWxlRXh0ZW5zaW9uVmFsaWRhdGlvbnMiLCJlcnJvciIsInZhbHVlIiwiZ2V0IiwidHJpbSIsImV4cGVjdGVkVHlwZSIsIk9iamVjdCIsImVudHJpZXMiLCJ2YWwiLCJpc0ludmFsaWROdW1iZXIiLCJpc05hTiIsIk51bWJlciIsImlzSW52YWxpZEJvb2xlYW4iLCJpbmNsdWRlcyIsInRvU3RyaW5nIiwidG9Mb3dlckNhc2UiLCJhbGxvd2VkRXh0ZW5zaW9ucyIsImZpbGUiLCJGaWxlIiwiZmlsZU5hbWUiLCJuYW1lIiwiZmlsZUV4dGVuc2lvbiIsInNwbGl0IiwicG9wIiwibWFwIiwiZXh0Iiwiam9pbiIsImVycm9yQ291bnQiLCJrZXlzIiwibGVuZ3RoIiwiaXNWYWxpZCIsIm1lc3NhZ2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/validateFormData.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:child_process":
/*!*************************************!*\
  !*** external "node:child_process" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:child_process");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:fs/promises":
/*!***********************************!*\
  !*** external "node:fs/promises" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs/promises");

/***/ }),

/***/ "node:os":
/*!**************************!*\
  !*** external "node:os" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:os");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:path");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:process");

/***/ }),

/***/ "node:tty":
/*!***************************!*\
  !*** external "node:tty" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:tty");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/ua-parser-js","vendor-chunks/semver","vendor-chunks/jose","vendor-chunks/jsonwebtoken","vendor-chunks/lodash.includes","vendor-chunks/jws","vendor-chunks/lodash.once","vendor-chunks/jwa","vendor-chunks/lodash.isinteger","vendor-chunks/ecdsa-sig-formatter","vendor-chunks/lodash.isplainobject","vendor-chunks/ms","vendor-chunks/lodash.isstring","vendor-chunks/lodash.isnumber","vendor-chunks/lodash.isboolean","vendor-chunks/safe-buffer","vendor-chunks/buffer-equal-constant-time","vendor-chunks/basic-ftp"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fcategory%2Froute&page=%2Fapi%2Fadmin%2Fcategory%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fcategory%2Froute.ts&appDir=D%3A%5CWebstep2%5Cshipowl-merge%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CWebstep2%5Cshipowl-merge&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();